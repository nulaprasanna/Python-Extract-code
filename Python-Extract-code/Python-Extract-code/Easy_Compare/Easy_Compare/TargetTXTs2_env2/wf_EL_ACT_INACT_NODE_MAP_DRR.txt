ETL Name:	wf_EL_ACT_INACT_NODE_MAP_DRR.xml


Session 1: 	s_m_EL_ACT_INACT_NODE_MAP_DRR
Mapping 1: 	m_EL_ACTIVE_INACT_NODE_MAP_DRRm_EL_ACTIVE_INACT_NODE_MAP_DRR


Source1 Name : SQ_EL_ACT_INACT_NODE_MAP_DRR


Pre SQL : 



SQL Query : 
SELECT
 NODE_ATTR_DTL_ID ,
 NODE_ID AS OLD_NODE_ID ,
 REPLACED_NODE_ID ,
 EFFECTIVE_DATE , 
 EXPIRATION_DATE , 
 OLD_TERR.SALES_TERRITORY_KEY AS OLD_SALES_TERRITORY_KEY ,
 REPLACED.SALES_TERRITORY_KEY AS REPLACED_SALES_TERRIOTRY_KEY ,
 OLD_TERR.DV_SALES_TERR_LEVEL_NUM_INT AS OLD_SALES_TERRITORY_LEVEL ,
 REPLACED.DV_SALES_TERR_LEVEL_NUM_INT AS REPLACED_SALES_TERRITORY_LEVEL ,
 OLD_TERR.L1_SALES_TERRITORY_NAME_CODE AS OLD_SL1_NAME_CODE , 
 REPLACED.L1_SALES_TERRITORY_NAME_CODE AS REPLACED_SL1_NAME_CODE , 
 OLD_TERR.ISO_COUNTRY_CODE AS OLD_ISO_COUNTRY_CODE,
 REPLACED.ISO_COUNTRY_CODE AS REPLACED_ISO_COUNTRY_CODE,
 CASE WHEN ( ( COALESCE(OLD_TERR.SALES_TERR_EXPIRATION_DATE, CAST('3500-01-01' AS DATE)) < CURRENT_DATE)  
   AND CURRENT_DATE BETWEEN REPLACED.SALES_TERR_EFFECTIVE_DATE AND COALESCE(REPLACED.SALES_TERR_EXPIRATION_DATE,CAST('3500-01-01' AS DATE))
   ) THEN 'Y'
 ELSE 'N'
 END AS VALID_FLAG , 
 DATE_CREATED,
 DATE_MODIFIED,
 CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM ,
 CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM                
FROM
    $$STGDB.ST_ACT_INACT_NODE_MAP_DRR ST
INNER JOIN $$COMREFVWDB.R_SALES_HIERARCHY OLD_TERR
 ON ST.NODE_ID = OLD_TERR.SHARE_NODE_ID_INT
INNER JOIN $$COMREFVWDB.R_SALES_HIERARCHY REPLACED
 ON ST.REPLACED_NODE_ID = REPLACED.SHARE_NODE_ID_INT


Post SQL : 



Target1 Name : EL_ACT_INACT_NODE_MAP_DRR


Pre SQL : 
DELETE FROM $$ETLVWDB.EL_ACT_INACT_NODE_MAP_DRR ALL;

CALL COLLECT_STATS_WRAP('$$STGDB','ST_ACT_INACT_NODE_MAP_DRR','D');


Post SQL : 
DELETE FROM $$STGDB.WI_CURRENT_ACTIVE_TERRITORY;

INSERT INTO $$STGDB.WI_CURRENT_ACTIVE_TERRITORY
WITH RECURSIVE INACTIVE_ACTIVE_NODE_MAP(OLD_SALES_TERRITORY_KEY, REPLACED_SALES_TERRITORY_KEY, ACTIVE_SALES_TERRITORY_KEY,LEV )
AS
( 
SELECT 
            OLD_SALES_TERRITORY_KEY, 
            REPLACED_SALES_TERRITORY_KEY, 
            REPLACED_SALES_TERRITORY_KEY AS ACTIVE_SALES_TERRITORY_KEY,
            1 AS LEV
FROM  $$ETLVWDB.EL_ACT_INACT_NODE_MAP_DRR

UNION ALL

SELECT 
    EL.OLD_SALES_TERRITORY_KEY, 
    EL.REPLACED_SALES_TERRITORY_KEY, 
    IAN.ACTIVE_SALES_TERRITORY_KEY ,
    CASE WHEN EL.REPLACED_SALES_TERRITORY_KEY = IAN.OLD_SALES_TERRITORY_KEY 
                THEN LEV + 1
                 ELSE LEV
      END AS LEV 
FROM  $$ETLVWDB.EL_ACT_INACT_NODE_MAP_DRR EL , 
             INACTIVE_ACTIVE_NODE_MAP IAN
WHERE EL.REPLACED_SALES_TERRITORY_KEY = IAN.OLD_SALES_TERRITORY_KEY
AND IAN.LEV <= 10
)  
SELECT * FROM INACTIVE_ACTIVE_NODE_MAP
QUALIFY ROW_NUMBER() OVER(PARTITION BY OLD_SALES_TERRITORY_KEY ORDER BY LEV DESC ) = 1 ;

UPDATE EL
FROM
$$ETLVWDB.EL_ACT_INACT_NODE_MAP_DRR EL,
$$STGDB.WI_CURRENT_ACTIVE_TERRITORY WI
SET ACTIVE_SALES_TERRITORY_KEY = WI.ACTIVE_SALES_TERRITORY_KEY
WHERE 
 EL.OLD_SALES_TERRITORY_KEY = WI.OLD_SALES_TERRITORY_KEY
AND EL.REPLACED_SALES_TERRITORY_KEY = WI.REPLACED_SALES_TERRITORY_KEY ;

CALL COLLECT_STATS_WRAP('$$ETLONLYDB','EL_ACT_INACT_NODE_MAP_DRR','D');