ETL Name:	wf_WI_FIN_ADJ_DRR.xml


Session 1: 	s_m_WI_FIN_ADJ_DRR
Mapping 1: 	m_WI_FIN_ADJ_DRRm_WI_FIN_ADJ_DRR


Source1 Name : SQ_ST_FIN_ADJ_DRR_UPLOAD


Pre SQL : 
DELETE FROM $$STGDB.WI_FIN_ADJ_DRR ; 

UPDATE $$STGDB.ST_FIN_ADJ_DRR_UPLOAD
  SET RESTATEMENT_SUB_TYPE = CASE WHEN OREPLACE(RESTATEMENT_SUB_TYPE,'') IS NULL THEN NULL ELSE RESTATEMENT_SUB_TYPE END , 
  		  /* BOOK_SOURCE = CASE WHEN OREPLACE(BOOK_SOURCE,'') IS NULL THEN NULL ELSE BOOK_SOURCE END ,  */
  		   SOURCE_SYSTEM = CASE WHEN OREPLACE(SOURCE_SYSTEM,'') IS NULL THEN NULL ELSE SOURCE_SYSTEM END , 
           SALES_TERRITORY_NAME_CODE = CASE WHEN OREPLACE(SALES_TERRITORY_NAME_CODE,'') IS NULL THEN NULL ELSE SALES_TERRITORY_NAME_CODE END ;

UPDATE $$STGDB.ST_FIN_ADJ_DRR_UPLOAD
      SET RESTATED_SALES_TERR_NAME_CODE = CASE WHEN OREPLACE(RESTATED_SALES_TERR_NAME_CODE,'') IS NULL THEN NULL ELSE RESTATED_SALES_TERR_NAME_CODE END ,
		   	   INITIATED_BY = CASE WHEN OREPLACE(INITIATED_BY,'') IS NULL THEN NULL ELSE INITIATED_BY END , 
	  		   DNR_FLAG = CASE WHEN OREPLACE(DNR_FLAG,'') IS NULL THEN NULL ELSE DNR_FLAG END ;

CALL COLLECT_STATS_WRAP('$$STGDB','ST_FIN_ADJ_DRR_UPLOAD','D');


SQL Query : 
SELECT 
	 TRIM(RESTATEMENT_SUB_TYPE)           
	,CASE 
	 WHEN TRIM(SOURCE_SYSTEM) = 'RTE' THEN 'AR'
	 WHEN TRIM(SOURCE_SYSTEM) = 'DSV' THEN 'POS'
	ELSE TRIM(SOURCE_SYSTEM)
	END AS BOOK_SOURCE                     
	,TRIM(SOURCE_SYSTEM)                  
	,CASE WHEN ORDER_NUMBER = 0 THEN NULL ELSE ORDER_NUMBER END AS ORDER_NUMBER
	,CASE WHEN ORDER_LINE_ID = 0 THEN NULL ELSE ORDER_LINE_ID END AS ORDER_LINE_ID
	,TRIM(SALES_TERRITORY_NAME_CODE)       
	,TRIM(RESTATED_SALES_TERR_NAME_CODE)  
	,CASE WHEN SAV_ID = 0 THEN NULL ELSE SAV_ID END AS SAV_ID
	,CASE WHEN PARTY_ID = 0 THEN NULL ELSE PARTY_ID END AS PARTY_ID
	,COALESCE ( CASE WHEN SPLIT = 0 THEN NULL ELSE SPLIT END , 100.00 ) SPLIT
	,COALESCE ( TRIM(DNR_FLAG),'N')  DNR_FLAG                        
	,EFFECTIVE_DATE                 
	,COALESCE(EXPIRY_DATE, CAST('3500-01-01' AS DATE) ) AS EXPIRY_DATE
	,INITIATED_BY AS APPROVED_BY                    
	,COALESCE(INITIATED_ON, CURRENT_TIMESTAMP(0))  AS APPROVED_DTM                   
	,UPLOADED_BY                   
	,UPLOADED_DTM                   
	,FILE_NAME                     
	,REASON_DESCR                   
	,CASE WHEN TRX_ID_INT = 0 THEN NULL ELSE TRX_ID_INT END AS TRX_ID_INT
	,FILE_VALIDATION 
	,BATCH_ID
FROM 
(
  SELECT ST.*,
	     CASE WHEN ST1.FILE_COUNT > 1 THEN ST.FILE_NAME||' '||'DUPLICATE FILE NAME.FILE WITH THIS NAME HAS BEEN ALREADY PROCESSED'
		      ELSE NULL
		  END AS FILE_VALIDATION
   FROM $$STGDB.ST_FIN_ADJ_DRR_UPLOAD ST
 INNER JOIN (SELECT MIN(BATCH_ID) BATCH_ID FROM $$STGDB.ST_FIN_ADJ_UPLOAD_AUD WHERE PROCESS_FLAG = 'N' ) AUD
    ON ST.BATCH_ID = AUD.BATCH_ID   
 INNER JOIN ( SELECT FILE_NAME, COUNT(1) FILE_COUNT FROM $$STGDB.ST_FIN_ADJ_UPLOAD_AUD GROUP BY 1 ) ST1
    ON ST.FILE_NAME = ST1.FILE_NAME
) WI


Post SQL : 



Target1 Name : WI_FIN_ADJ_DRR


Pre SQL : 



Post SQL : 
/*UPDATE $$STGDB.ST_FIN_ADJ_UPLOAD_AUD
SET PROCESS_FLAG = 'Y' 
WHERE BATCH_ID = 
( SELECT BATCH_ID 
FROM $$STGDB.WI_FIN_ADJ_DRR 
  WHERE OREPLACE(FILE_VALIDATION,'') IS NOT NULL 
GROUP BY 1)  */ /* commented as failed records also would get process flag Y in N UPLD etl*/

CALL COLLECT_STATS_WRAP('$$STGDB','WI_FIN_ADJ_DRR','D');