ETL Name:	wf_MT_SLS_ACNT_RSTD_MSR_DRRNG_D.xml


Session 1: 	s_m_MT_SLS_ACNT_RSTD_MSR_DRRNG_D
Mapping 1: 	m_MT_SLS_ACNT_RSTD_MSR_DRRNG_Dm_MT_SLS_ACNT_RSTD_MSR_DRRNG_D


Source1 Name : SQ_MT_NAMD_ACNT_BKGS_MEASURE


Pre SQL : 



SQL Query : 
SELECT 
	  NBM.BOOKINGS_MEASURE_KEY,
	  NBM.BOOKINGS_PROCESS_DATE,
	  NBM.BKGS_MEASURE_TRANS_TYPE_CODE,
	  MT.FIELD_VLDTD_END_CUST_PRTY_KEY AS DV_END_CUST_PARTY_KEY,
	  MT.BK_SA_MEMBER_ID_INT,
	  MT.SLS_ACCT_GRP_MEMBER_PARTY_KEY AS LINK_CUSTOMER_PARTY_KEY,
	  MT.SALES_ACCOUNT_GROUP_PARTY_KEY,
	  COALESCE(MT.END_CUST_OWNERSHIP_SPLIT_PCT,100) AS DV_END_CUST_OWNERSHIP_SPLT_PCT,
	  CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM,
	  CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM,
	  NBM.SALES_TERRITORY_KEY,
	  NBM.SALES_REP_NUMBER,
	  -999 AS EP_OTM_TERRITORY_ID_INT
  FROM ( SELECT BOOKINGS_MEASURE_KEY, 
				BKGS_MEASURE_TRANS_TYPE_CODE, 
				BOOKINGS_PROCESS_DATE,
				SALES_TERRITORY_KEY,
				SALES_REP_NUMBER
          FROM $$SLSORDVWDB.N_BOOKINGS_MEASURE NBM
		 WHERE EDW_UPDATE_DATETIME > '$$LastExtractDate') NBM
  INNER JOIN $$SLSORDVWDB.MT_NAMD_ACNT_BKGS_MEASURE MT
    ON NBM.BOOKINGS_MEASURE_KEY = MT.BOOKINGS_MEASURE_KEY
   AND NBM.BKGS_MEASURE_TRANS_TYPE_CODE = MT.BKGS_MEASURE_TRANS_TYPE_CODE
   AND NBM.BOOKINGS_PROCESS_DATE = MT.BOOKINGS_PROCESS_DATE


Post SQL : 



Target1 Name : WI_SLS_ACNT_RSTD_MSR_DRRNG_D


Pre SQL : 
DELETE FROM $$STGDB.WI_SLS_ACNT_RSTD_MSR_DRRNG_D ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_SLS_ACNT_RSTD_MSR_DRRNG_D','D');

DELETE  FROM $$SLSORDVWDB.MT_SLS_ACNT_RSTD_MSR_DRRNG_DEL
WHERE CAST(EDW_CREATE_DTM AS DATE) < CURRENT_DATE -30;

INSERT INTO $$SLSORDVWDB.MT_SLS_ACNT_RSTD_MSR_DRRNG_DEL
SELECT 
BOOKINGS_MEASURE_KEY,
BOOKINGS_PROCESS_DT,
BKGS_MEASURE_TRANS_TYPE_CD,
DV_END_CUST_PARTY_KEY,
BK_SA_MEMBER_ID_INT,
LINK_CUSTOMER_PARTY_KEY,
SALES_ACCOUNT_GROUP_PARTY_KEY,
DV_END_CUST_REASON_DESCR,
DV_END_CUST_OWNERSHIP_SPLT_PCT,
LAST_UPDATED_DTM,
CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM,
USER AS  EDW_CREATE_USER,
CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM,
USER AS EDW_UPDATE_USER,
SALES_REP_NUM,
SALES_TERRITORY_KEY,
EP_OTM_TERRITORY_ID_INT,
PROCESS_TYPE,
DV_FIN_ADJ_KEY,
DV_RSTMT_REASON_CD,
SK_SEQUENCE_ID
FROM $$SLSORDVWDB.MT_SLS_ACNT_RSTD_MSR_DRR_NG 
 WHERE (BOOKINGS_MEASURE_KEY,BOOKINGS_PROCESS_DT,BKGS_MEASURE_TRANS_TYPE_CD) IN
 (
 SELECT BOOKINGS_MEASURE_KEY,BOOKINGS_PROCESS_DT,BKGS_MEASURE_TRANS_TYPE_CD FROM $$STGDB.WI_SLS_ACNT_RSTD_MSR_DRRNG_D);

 
DELETE FROM $$SLSORDVWDB.MT_SLS_ACNT_RSTD_MSR_DRR_NG WHERE (BOOKINGS_MEASURE_KEY,BOOKINGS_PROCESS_DT,BKGS_MEASURE_TRANS_TYPE_CD) IN
 (
 SELECT BOOKINGS_MEASURE_KEY,BOOKINGS_PROCESS_DT,BKGS_MEASURE_TRANS_TYPE_CD FROM $$STGDB.WI_SLS_ACNT_RSTD_MSR_DRRNG_D);


Source2 Name : SQ_WI_SLS_ACNT_RSTD_MSR_DRRNG_D


Pre SQL : 



SQL Query : 
SELECT 
    WI.BOOKINGS_MEASURE_KEY,
    WI.BOOKINGS_PROCESS_DT,
    WI.BKGS_MEASURE_TRANS_TYPE_CD,
    WI.DV_END_CUST_PARTY_KEY,
    WI.BK_SA_MEMBER_ID_INT,
    WI.LINK_CUSTOMER_PARTY_KEY,
    WI.SALES_ACCOUNT_GROUP_PARTY_KEY,
    CASE WHEN EL.REPLACED_SALES_TERRITORY_KEY IS NOT NULL THEN '14 - AS WAS CV ENRICHMENT FROM INCREMENTAL LOAD_REPLACED WITH ACTIVE NODE' 
	     ELSE '14 - AS WAS CV ENRICHMENT FROM INCREMENTAL LOAD'
     END AS DV_SAV_REASON_DESCR,
    'AS WAS CV ENRICHMENT FROM INCREMENTAL LOAD' AS DV_END_CUST_REASON_DESCR,
    DV_END_CUST_OWNERSHIP_SPLT_PCT ,
	CURRENT_TIMESTAMP(0) LAST_UPDATED_DTM,
    CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM , 
    USER AS EDW_CREATE_USER,
    CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM, 
    USER AS EDW_UPDATE_USER,
    CASE WHEN EL.REPLACED_SALES_TERRITORY_KEY IS NOT NULL THEN -999 
	     ELSE WI.SALES_REP_NUM
     END AS SALES_REP_NUM,
    CASE WHEN EL.REPLACED_SALES_TERRITORY_KEY IS NOT NULL THEN EL.REPLACED_SALES_TERRITORY_KEY
	     ELSE WI.SLS_ACCT_GROUP_SALES_TERR_KEY
     END AS SALES_TERRITORY_KEY,
    WI.EP_OTM_TERRITORY_ID_INT 
FROM $$STGDB.WI_SLS_ACNT_RSTD_MSR_DRRNG_D WI  
LEFT JOIN ( SELECT * FROM $$ETLVWDB.EL_ACT_INACT_NODE_MAP_DRR WHERE VALID_FLAG = 'Y' ) EL
    ON EL.OLD_SALES_TERRITORY_KEY = WI.SLS_ACCT_GROUP_SALES_TERR_KEY
LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY RSH_ACT
    ON RSH_ACT.SALES_TERRITORY_KEY = EL.REPLACED_SALES_TERRITORY_KEY


Post SQL : 



Target2 Name : WI_SLS_ACNT_RSTD_MSR_DRRNG_D1


Pre SQL : 
DELETE FROM $$STGDB.WI_SLS_ACNT_RSTD_MSR_DRRNG_D1 ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_SLS_ACNT_RSTD_MSR_DRRNG_D1','D');


Source3 Name : SQ_WI_SLS_ACNT_RSTD_MSR_DRRNG_D1


Pre SQL : 



SQL Query : 
/*To populate SAV Reason Codes from N_DYN_RESTMT_ENRICH_REASON table*/
SELECT  
      WI.BOOKINGS_MEASURE_KEY,
   WI.BOOKINGS_PROCESS_DT,
   WI.BKGS_MEASURE_TRANS_TYPE_CD,
   WI.DV_END_CUST_PARTY_KEY,
   WI.BK_SA_MEMBER_ID_INT,
   WI.LINK_CUSTOMER_PARTY_KEY,
      WI.SALES_ACCOUNT_GROUP_PARTY_KEY,
      WI.DV_END_CUST_REASON_DESCR,
      WI.DV_END_CUST_OWNERSHIP_SPLT_PCT,
      CURRENT_TIMESTAMP(0) LAST_UPDATED_DTM,
   CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM , 
   USER AS EDW_CREATE_USER,
   CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM, 
   USER AS EDW_UPDATE_USER,
   WI.SALES_REP_NUM,
   WI.SALES_TERRITORY_KEY,
   WI.EP_OTM_TERRITORY_ID_INT,
   'Engine' AS PROCESS_TYPE,
   -999 AS DV_FIN_ADJ_KEY,
   DRE.BK_REASON_CD AS DV_RSTMT_REASON_CD,
   MAX_MT.SK_SEQUENCE_ID + ROW_NUMBER()OVER(order by BOOKINGS_MEASURE_KEY) as SK_SEQUENCE_ID
FROM 
$$STGDB.WI_SLS_ACNT_RSTD_MSR_DRRNG_D1 WI 
INNER JOIN
$$SLSORDVWDB.N_DYN_RESTMT_ENRICH_REASON DRE
ON WI.DV_SAV_REASON_DESCR=DRE.REASON_DESCR,
(SELECT MAX(SK_SEQUENCE_ID) AS SK_SEQUENCE_ID FROM
(
SELECT COALESCE(MAX(SK_SEQUENCE_ID), 0) AS SK_SEQUENCE_ID FROM $$SLSORDVWDB.MT_SLS_ACNT_RSTD_MSR_DRR_NG
UNION ALL 
SELECT COALESCE(MAX(SK_SEQUENCE_ID), 0) AS SK_SEQUENCE_ID FROM $$SLSORDVWDB.MT_SLS_ACNT_RSTD_MSR_DRRNG_DEL
) SEQUENCE 
) MAX_MT


Post SQL : 



Target3 Name : MT_SLS_ACNT_RSTD_MSR_DRR_NG


Pre SQL : 



Post SQL : 
UPDATE $$ETLVWDB.DW_JOB_STREAMS SET LAST_EXTRACT_DATE=(SELECT MAX(EDW_UPDATE_DTM) FROM $$SLSORDVWDB.MT_SLS_ACNT_RSTD_MSR_DRR_NG)
WHERE JOB_STREAM_ID='wf_MT_SLS_ACNT_RSTD_MSR_DRRNG_D';

DELETE  FROM $$SLSORDVWDB.MT_SLS_ACNT_RSTD_MSR_DRR_NG
WHERE BOOKINGS_PROCESS_DT<(
SELECT MIN(CALENDAR_DATE) CALENDAR_DATE FROM
$$COMREFVWDB.R_FISCAL_DAY_TO_YEAR RFD
WHERE FISCAL_YEAR_NUMBER_INT >= 2011
);

CALL COLLECT_STATS_WRAP('$$SLSORDDB','MT_SLS_ACNT_RSTD_MSR_DRR_NG','D');