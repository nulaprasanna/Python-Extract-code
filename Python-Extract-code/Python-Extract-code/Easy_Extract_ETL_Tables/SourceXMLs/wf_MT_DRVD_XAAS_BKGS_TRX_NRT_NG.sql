ETL Name:	wf_MT_DRVD_XAAS_BKGS_TRX_NRT_NG.xml


Session 1: 	s_m_MT_DRVD_XAAS_BKGS_TRX_NRT_NG
Mapping 1: 	m_MT_DRVD_XAAS_BKGS_TRX_NRT_NG


Source1 Name : SQ_MT_DRVD_XAAS_BKGS_TRX_NRT_NG


Pre SQL : 



SQL Query : 
SELECT 
        W_XAAS.BOOKINGS_MEASURE_KEY AS BOOKINGS_MEASURE_KEY,W_XAAS.PRODUCT_KEY  AS PRODUCT_KEY,W_XAAS.END_CUSTOMER_KEY AS END_CUSTOMER_KEY
       ,W_XAAS.BILL_TO_CUSTOMER_KEY AS BILL_TO_CUSTOMER_KEY,W_XAAS.SHIP_TO_CUSTOMER_KEY AS SHIP_TO_CUSTOMER_KEY,W_XAAS.SOLD_TO_CUSTOMER_KEY AS SOLD_TO_CUSTOMER_KEY
       ,W_XAAS.TRANSACTION_DATETIME AS TRANSACTION_DATETIME,W_XAAS.SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,W_XAAS.SALES_REP_NUMBER AS SALES_REP_NUMBER
       ,W_XAAS.PROCESS_DATE AS PROCESS_DATE,W_XAAS.DV_FISCAL_YEAR_MTH_NUMBER_INT AS DV_FISCAL_YEAR_MTH_NUMBER_INT,W_XAAS.ADJUSTMENT_TYPE_CODE AS ADJUSTMENT_TYPE_CODE
       ,W_XAAS.SALES_CHANNEL_CODE AS SALES_CHANNEL_CODE,W_XAAS.SALES_CREDIT_TYPE_CODE AS SALES_CREDIT_TYPE_CODE,W_XAAS.ADJUSTMENT_CODE AS ADJUSTMENT_CODE
       ,W_XAAS.BKGS_MEASURE_TRANS_TYPE_CODE AS BKGS_MEASURE_TRANS_TYPE_CODE,W_XAAS.CANCELLED_FLG AS CANCELLED_FLG,W_XAAS.CANCEL_CODE AS CANCEL_CODE
       ,W_XAAS.ACQUISITION_FLG AS ACQUISITION_FLG,W_XAAS.FORWARD_REVERSE_FLG  AS FORWARD_REVERSE_FLG,W_XAAS.DISTRIBUTOR_OFFSET_FLG AS DISTRIBUTOR_OFFSET_FLG
        ,(CASE WHEN   DD_RMA_FLAG = 'Y' OR DD_INTERNATIONAL_DEMO_FLAG = 'Y' OR DD_REPLACEMENT_DEMO_FLAG = 'Y' OR DD_REVENUE_FLAG = 'N'  OR DD_OVERLAY_FLAG='Y' OR DD_SALESREP_FLAG ='Y' 
      OR DD_IC_REVENUE_FLAG='N'OR CHARGES_FLAG='Y' OR MISC_FLAG='Y' OR DD_ACQUISITION_FLAG='Y' OR DIVESTITURE_TYPE_CD <> 'UNKNOWN' OR (GOODS_OR_SERVICE_TYPE = 'GOODS' 
      AND BK_BUSINESS_UNIT_ID ='CDBU' AND ENABLE_FLAG ='Y') THEN 'N'        ELSE CASE WHEN W_XAAS.L1_SALES_TERRITORY_NAME_CODE <> 'WW Distribution' THEN 'Y' ELSE 'N' END END) AS CORP_BOOKINGS_FLG 
          ,W_XAAS.OVERLAY_FLG AS OVERLAY_FLG, W_XAAS.DD_IC_REVENUE_FLAG AS DD_IC_REVENUE_FLAG,W_XAAS.CHARGES_FLAG AS CHARGES_FLAG
          ,W_XAAS.DD_SALESREP_FLAG AS SALESREP_FLAG,W_XAAS.MISC_FLAG AS MISC_FLAG,W_XAAS.SERVICE_FLG AS SERVICE_FLG
         ,W_XAAS.INTERNATIONAL_DEMO_FLG AS INTERNATIONAL_DEMO_FLG,W_XAAS.REPLACEMENT_DEMO_FLG AS REPLACEMENT_DEMO_FLG,W_XAAS.REVENUE_FLG AS REVENUE_FLG
       ,W_XAAS.DD_RMA_FLAG AS RMA_FLG ,W_XAAS.DD_COMP_US_NET_PRICE_AMOUNT AS DD_COMP_US_NET_PRICE_AMOUNT,W_XAAS.DD_COMP_US_LIST_PRICE_AMOUNT AS DD_COMP_US_LIST_PRICE_AMOUNT
       ,W_XAAS.DD_COMP_US_STANDARD_PRICE_AMT AS DD_COMP_US_STANDARD_PRICE_AMT,W_XAAS.CONVERSION_RATE AS CONVERSION_RATE,W_XAAS.CONVERSION_DATE AS CONVERSION_DATE
       ,W_XAAS.DD_CISCO_BOOKED_DTM AS DD_CISCO_BOOKED_DTM,W_XAAS.DD_SALES_ORDER_CATEGORY_TYPE AS DD_SALES_ORDER_CATEGORY_TYPE,W_XAAS.DD_SLS_ORD_OPERATING_UNIT_CD AS DD_SLS_ORD_OPERATING_UNIT_CD
       ,COALESCE(W_XAAS.DD_TRX_CURRENCY_CD,'USD') AS DD_TRX_CURRENCY_CD ,W_XAAS.DV_TRANSACTION_TYPE   AS DV_TRANSACTION_TYPE ,W_XAAS.DV_TRANSACTION_NAME  AS DV_TRANSACTION_NAME
       ,W_XAAS.BOOKINGS_SPLIT_PCT AS BOOKINGS_SPLIT_PCT,W_XAAS.DV_SOURCE_ORDER_NUM_INT AS DV_SOURCE_ORDER_NUM_INT,W_XAAS.DV_DEAL_ID AS DV_DEAL_ID
       ,W_XAAS.DV_PURCHASE_ORDER_NUM AS DV_PURCHASE_ORDER_NUM,W_XAAS.BOOKED_DT  AS BOOKED_DT
         ,(CASE  WHEN DD_RMA_FLAG = 'Y' OR DD_INTERNATIONAL_DEMO_FLAG = 'Y' OR DD_REPLACEMENT_DEMO_FLAG = 'Y' OR DD_REVENUE_FLAG = 'N' OR DD_OVERLAY_FLAG='Y'
          OR DD_SALESREP_FLAG ='Y' OR DD_IC_REVENUE_FLAG='N' OR CHARGES_FLAG='Y' OR MISC_FLAG='Y' OR DD_ACQUISITION_FLAG='Y' OR DIVESTITURE_TYPE_CD <> 'UNKNOWN' 
       OR (GOODS_OR_SERVICE_TYPE = 'GOODS' AND BK_BUSINESS_UNIT_ID ='CDBU' AND ENABLE_FLAG ='Y') THEN 'N' ELSE 'Y' END) AS DV_REVENUE_RECOGNITION_FLG 
          ,(CASE WHEN DD_RMA_FLAG = 'Y'OR DD_INTERNATIONAL_DEMO_FLAG = 'Y' OR DD_REPLACEMENT_DEMO_FLAG = 'Y' OR DD_REVENUE_FLAG = 'N' OR DD_OVERLAY_FLAG='Y'
          OR DD_SALESREP_FLAG ='Y' OR DD_IC_REVENUE_FLAG='N' OR CHARGES_FLAG='Y' OR MISC_FLAG='Y' OR DD_ACQUISITION_FLAG='Y' OR DIVESTITURE_TYPE_CD <> 'UNKNOWN' 
       OR (GOODS_OR_SERVICE_TYPE = 'GOODS'  AND BK_BUSINESS_UNIT_ID ='CDBU' AND ENABLE_FLAG ='Y') THEN 'N' ELSE CASE WHEN W_XAAS.L1_SALES_TERRITORY_NAME_CODE = 'WW Distribution' THEN 'Y' ELSE 'N' END
          END) AS DV_NET_SPREAD_FLG 
          ,W_XAAS.DV_PRODUCT_KEY  AS DV_PRODUCT_KEY ,W_XAAS.DV_ATTRIBUTION_CD AS DV_ATTRIBUTION_CD   ,W_XAAS.DV_FMV_FLG AS DV_FMV_FLG
         ,W_XAAS.TRANSACTION_SEQUENCE_ID_INT AS TRANSACTION_SEQUENCE_ID_INT ,W_XAAS.TSL_TRX_SOURCE_COMMIT_DTM AS TSL_TRX_SOURCE_COMMIT_DTM
         ,W_XAAS.RBK_SC_SOURCE_COMMIT_DTM AS RBK_SC_SOURCE_COMMIT_DTM ,W_XAAS.SO_SBSCRPTN_ITM_SLS_TRX_KEY AS SO_SBSCRPTN_ITM_SLS_TRX_KEY
          ,W_XAAS.SALES_VALUE_TRXL_AMT AS SALES_VALUE_TRXL_AMT,W_XAAS.TRANSACTION_QTY AS TRANSACTION_QTY , W_XAAS.DV_END_CUSTOMER_KEY
         ,W_XAAS. EDW_CREATE_USER AS EDW_CREATE_USER,W_XAAS. EDW_UPDATE_USER AS EDW_UPDATE_USER,W_XAAS. EDW_CREATE_DATETIME AS EDW_CREATE_DATETIME
         ,W_XAAS. EDW_UPDATE_DATETIME  AS EDW_UPDATE_DATETIME,W_XAAS. DD_COMP_US_COST_AMOUNT AS DD_COMP_US_COST_AMOUNT , W_XAAS.WEB_ORDER_ID AS WEB_ORDER_ID
         ,W_XAAS.DV_LATEST_RECORD_FLG AS DV_LATEST_RECORD_FLG ,W_XAAS.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY AS DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY
         ,W_XAAS.SK_OFFER_ATTRIBUTION_ID_INT AS SK_OFFER_ATTRIBUTION_ID_INT,W_XAAS.DV_LOCAL_EXTND_LIST_PRICE_AMT ,W_XAAS.LOCAL_UNIT_LIST_PRICE_AMT1     
         ,W_XAAS.DV_UNIT_LIST_PRICE_USD_AMT ,W_XAAS.DV_TOTAL_CNTRCT_VAL_USD_AMT ,W_XAAS.DV_MTHLY_RCR_REV_TRXL_USD_AMT ,W_XAAS.DV_INCRML_MTHY_RCRR_RV_USD_AMT 
         ,W_XAAS.DV_ANNLZD_MTHY_RCRR_RV_USD_AMT ,W_XAAS.DV_INCRML_ANNL_RCRR_RV_USD_AMT ,W_XAAS.DV_PURCHASE_ADJ_DSCNT_USD_AMT 
         ,W_XAAS.POB_TYPE_CD    ,W_XAAS.NRS_TRANSITION_FLG 
         ,W_XAAS.DV_COMP_US_HOLD_NET_PRICE_AMT   ,W_XAAS.DV_COMP_US_HOLD_LIST_PRICE_AMT   ,W_XAAS.DV_COMP_US_HOLD_COST_AMT   ,W_XAAS.DV_EXTENDED_HOLD_QTY,W_XAAS.BOOKING_PCT ,W_XAAS.SALES_MOTION_CD/* END Q2FY18 XAAS */
         FROM
       (SELECT 
         SMXBTRX.DRVD_XAAS_BKG_TRX_KEY AS BOOKINGS_MEASURE_KEY        ,W_DRVD_XAAS.SUBSCRIPTION_PRODUCT_KEY AS PRODUCT_KEY
         ,COALESCE(NXSSIS.END_CUST_ACCT_LOC_USE_KEY,-999) AS END_CUSTOMER_KEY          ,COALESCE(NXSSIS.BILL_TO_CUST_ACCT_LOC_USE_KEY,-999) AS BILL_TO_CUSTOMER_KEY 
         ,COALESCE(NXSSIS.SHIP_TO_CUST_ACCT_LOC_USE_KEY,-999) AS SHIP_TO_CUSTOMER_KEY          ,COALESCE(NXSSIS.SOLD_TO_CUST_ACCT_KEY,-999) AS SOLD_TO_CUSTOMER_KEY 
         ,W_DRVD_XAAS.TRANSACTION_DATETIME          ,COALESCE(W_DRVD_XAAS.SALES_TERRITORY_KEY,-999) AS  SALES_TERRITORY_KEY
         ,W_DRVD_XAAS.BK_SALES_REP_NUM AS SALES_REP_NUMBER          ,W_DRVD_XAAS.PROCESS_DATE AS PROCESS_DATE 
         ,RFMY.FISCAL_YEAR_MONTH_INT AS DV_FISCAL_YEAR_MTH_NUMBER_INT          ,'UNKNOWN' AS  ADJUSTMENT_TYPE_CODE 
         ,NXSSIS.SALES_CHANNEL_CD AS SALES_CHANNEL_CODE          ,W_DRVD_XAAS.BK_SALES_CREDIT_TYPE_CODE AS SALES_CREDIT_TYPE_CODE 
         ,'UNKNOWN'  AS ADJUSTMENT_CODE          ,'XAAS' AS BKGS_MEASURE_TRANS_TYPE_CODE 
         ,CASE WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD = 'CANCEL' THEN 'Y' ELSE 'N' END AS CANCELLED_FLG 
         , CASE WHEN  NXSSIS.BK_SALES_ORDER_TYPE_CD = 'CANCEL'  THEN 'XAAS CNCL' ELSE '=' END AS CANCEL_CODE 
         ,'N' AS ACQUISITION_FLG          ,W_DRVD_XAAS.FORWARD_REVERSE_CODE AS FORWARD_REVERSE_FLG 
         ,'N' AS DISTRIBUTOR_OFFSET_FLG          ,'N' AS OVERLAY_FLG 
        , (CASE WHEN NCAT_IC.INTERNAL_CUSTOMER_FLAG= 'I' THEN 'N' WHEN NCAT_IC.INTERNAL_CUSTOMER_FLAG IS NULL THEN 'N'ELSE 'Y'END) AS DD_IC_REVENUE_FLAG
         ,(CASE WHEN NP.BK_PRODUCT_TYPE_ID= 'CHARGES'  THEN 'Y'  ELSE 'N'END) AS CHARGES_FLAG 
         , DD_SALESREP_FLAG 
         ,(CASE   WHEN SUBSTR(NP.BK_PRODUCT_ID,1,4)= 'MISC'  THEN 'Y'   ELSE 'N' END) AS MISC_FLAG
         ,(CASE   WHEN   NP.GOODS_OR_SERVICE_TYPE ='SERVICE'  THEN 'Y' ELSE 'N' END) AS SERVICE_FLG 
         ,'N' AS INTERNATIONAL_DEMO_FLG          ,'N' AS REPLACEMENT_DEMO_FLG          ,'Y' AS REVENUE_FLG         ,'N' AS DD_RMA_FLAG 
         ,CAST(CAST(CAST(((W_DRVD_XAAS.SPLIT_PCT *  W_DRVD_XAAS.RECOG_SALES_VALUE_LOCAL_AMT)/100.000000) AS DECIMAL(18,6)) /*END*/ As DECIMAL(18,6)) *COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST(1 AS DECIMAL(18,11)) )
          AS DECIMAL(18,6))AS DD_COMP_US_NET_PRICE_AMOUNT         
     ,CAST(    CASE WHEN NPPT.PRODUCT_KEY IS NOT NULL AND NPPT.BASE_PRICE IS NOT NULL THEN 
    CAST((NPPT.BASE_PRICE/(CASE WHEN NPPT.PRICING_TERM_MTHS_CNT=0 THEN 1 ELSE COALESCE(NPPT.PRICING_TERM_MTHS_CNT,1) END)) AS DECIMAL(18,6))
    ELSE 
    CAST((COALESCE(NXSSIS.LIST_PRICE,0.000000)/(CASE WHEN NXSSIS.PRICING_TERM_MTHS_CNT=0 THEN 1 
	ELSE COALESCE(NXSSIS.PRICING_TERM_MTHS_CNT,1) END))*(COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST( 1 AS DECIMAL(18,11))) )AS DECIMAL(18,6)) 
    END  *CASE WHEN NP1.RU_CHARGE_TYPE_CD='Amortized One Time' THEN CAST(CAST( 1 AS DECIMAL(18,11))*(W_DRVD_XAAS.SPLIT_PCT/100.000000) *(W_DRVD_XAAS.BOOKING_PCT/100.000000)  AS DECIMAL(18,6))
  ELSE CAST(CAST(CASE WHEN NXSSIS.trx_ss_cd='AR' THEN
               CASE WHEN SOL.BILLING_MODEL='Monthly Billing' THEN 1
                    WHEN SOL.BILLING_MODEL='Annual Billing' THEN 12
	                WHEN SOL.BILLING_MODEL='Quarterly Billing' THEN 3
	                WHEN SOL.BILLING_MODEL IN ('Prepaid Term','UNKNOWN') THEN CASE WHEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT in(-999,0) then 1 ELSE NXSSIS.INITIAL_TERM_DUR_MTHS_CNT END
                END
WHEN NXSSIS.trx_ss_cd='MANUAL' THEN 1 ELSE
 CASE WHEN BOOKING_TERM_MONTHS_CNT=0 THEN CASE WHEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT in(-999,0) then 1 ELSE NXSSIS.INITIAL_TERM_DUR_MTHS_CNT END      ELSE BOOKING_TERM_MONTHS_CNT  END
 END AS DECIMAL(18,6))*(W_DRVD_XAAS.SPLIT_PCT/100.000000) *(W_DRVD_XAAS.BOOKING_PCT/100.000000) AS DECIMAL(18,6) )
  END    *   CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN         CAST( W_DRVD_XAAS.TRANSACTION_QTY  AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET','BIB OFFSET') THEN      CAST( NXSSIS.TRANSACTION_QTY * (-1) AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB') THEN      CAST( COALESCE(NXSSIS.TRANSACTION_QTY,0)  * (NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(18,6) )END AS DECIMAL(18,6)) DD_COMP_US_LIST_PRICE_AMOUNT       /* PRICING_TERM_MTHS_CNT - SIGORANT ADDED AS PART OF Q2FY19 */
 , CAST( CAST(COALESCE( NSC.STANDARD_COST_AMOUNT,0.000000) *  (W_DRVD_XAAS.SPLIT_PCT/100.000000) *(W_DRVD_XAAS.BOOKING_PCT/100.000000) AS DECIMAL(18,6) ) *  CAST( W_DRVD_XAAS.TRANSACTION_QTY * 1 AS DECIMAL(18,6) )  AS DECIMAL(18,6)  )  AS DD_COMP_US_COST_AMOUNT
    ,CASE WHEN   NP1.RU_CHARGE_TYPE_CD='Amortized One Time' THEN CAST( 1 AS DECIMAL(18,11)) ELSE 
  CAST(CASE WHEN NXSSIS.trx_ss_cd='AR' THEN
               CASE WHEN SOL.BILLING_MODEL='Monthly Billing' THEN 1
                    WHEN SOL.BILLING_MODEL='Annual Billing' THEN 12
	                WHEN SOL.BILLING_MODEL='Quarterly Billing' THEN 3
	                WHEN SOL.BILLING_MODEL IN ('Prepaid Term','UNKNOWN') THEN CASE WHEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT in(-999,0) then 1 ELSE NXSSIS.INITIAL_TERM_DUR_MTHS_CNT END
                END
WHEN NXSSIS.trx_ss_cd='MANUAL' THEN 1 ELSE
 CASE WHEN BOOKING_TERM_MONTHS_CNT=0 THEN CASE WHEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT in(-999,0) then 1 ELSE NXSSIS.INITIAL_TERM_DUR_MTHS_CNT END     ELSE BOOKING_TERM_MONTHS_CNT  END
 END AS DECIMAL(18,6)) END  *
  CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN
     CAST(CAST( CAST( ((W_DRVD_XAAS.SPLIT_PCT *  (W_DRVD_XAAS.BOOKING_PCT/100.000000) * W_DRVD_XAAS.TRANSACTION_QTY * (NXSSIS.LIST_PRICE/(CASE WHEN NXSSIS.PRICING_TERM_MTHS_CNT=0 THEN 1 
	 ELSE COALESCE(NXSSIS.PRICING_TERM_MTHS_CNT,1) END)))/100.000000) AS DECIMAL(18,6) )  AS DECIMAL(18,6) ) * COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST( 1 AS DECIMAL(18,11)))  AS DECIMAL(18,6) )  
      ELSE
      CAST(CAST( CAST( ((W_DRVD_XAAS.SPLIT_PCT *  (W_DRVD_XAAS.BOOKING_PCT/100.000000) * W_DRVD_XAAS.TRANSACTION_QTY * (NXSSA.ATTRIBUTED_UNIT_LIST_PRICE/(CASE WHEN NXSSA.PRICING_TERM_MTHS_CNT=0	  THEN 1 ELSE COALESCE(NXSSA.PRICING_TERM_MTHS_CNT,1) END)))/100.000000) AS DECIMAL(18,6) ) AS DECIMAL(18,6) ) * 
         COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST( 1 AS DECIMAL(18,11))) AS DECIMAL(18,6) )   
      END AS DD_COMP_US_STANDARD_PRICE_AMT  
          ,COALESCE(NCDR.PL_CONVERSION_RATE,1) AS CONVERSION_RATE           ,COALESCE(NCDR.SK_CONVERSION_DATE,NXSSIS.ORDER_CREATED_DT) AS CONVERSION_DATE 
          ,CAST(W_DRVD_XAAS.BOOKED_DT AS TIMESTAMP(0)) AS DD_CISCO_BOOKED_DTM           ,'UNK' AS  DD_SALES_ORDER_CATEGORY_TYPE           ,'UNKNOWN' AS DD_SLS_ORD_OPERATING_UNIT_CD 
          ,W_DRVD_XAAS.BK_TRXL_CURRENCY_CD AS DD_TRX_CURRENCY_CD            ,'XAAS' AS DV_TRANSACTION_TYPE            ,'NOT AVAILABLE' AS DV_TRANSACTION_NAME           ,COALESCE(SPLIT_PCT,100) AS BOOKINGS_SPLIT_PCT 
          ,CASE WHEN NXSSIS.TRX_SS_CD='MANUAL' THEN NXSSIS.FCM_ID_INT ELSE NXSSIS.BK_SALES_ORDER_ID_INT END AS  DV_SOURCE_ORDER_NUM_INT,NXSSIS.BK_DEAL_ID AS DV_DEAL_ID , NXSSIS.CUST_PURCHASE_ORDER_NUM  AS DV_PURCHASE_ORDER_NUM 
          ,W_DRVD_XAAS.BOOKED_DT AS  BOOKED_DT ,W_DRVD_XAAS.DV_PRODUCT_KEY AS  DV_PRODUCT_KEY
          ,W_DRVD_XAAS.DV_ATTRIBUTION_CD AS DV_ATTRIBUTION_CD          ,'N' AS DV_FMV_FLG  
          ,W_DRVD_XAAS.TRANSACTION_SEQUENCE_ID_INT AS TRANSACTION_SEQUENCE_ID_INT          , NXSSIS.SOURCE_COMMIT_DTM AS TSL_TRX_SOURCE_COMMIT_DTM 
          ,W_DRVD_XAAS.RBK_SC_SOURCE_COMMIT_DTM AS RBK_SC_SOURCE_COMMIT_DTM           ,W_DRVD_XAAS.SO_SBSCRPTN_ITM_SLS_TRX_KEY AS SO_SBSCRPTN_ITM_SLS_TRX_KEY
          ,W_DRVD_XAAS.FORWARD_REVERSE_CODE AS FORWARD_REVERSE_CODE
          ,CAST(W_DRVD_XAAS.RECOG_SALES_VALUE_LOCAL_AMT *  (W_DRVD_XAAS.SPLIT_PCT/100.0000000) AS DECIMAL(27,7)) /*END*/ AS SALES_VALUE_TRXL_AMT
          ,W_DRVD_XAAS.TRANSACTION_QTY AS TRANSACTION_QTY          ,RSH.L1_SALES_TERRITORY_NAME_CODE AS L1_SALES_TERRITORY_NAME_CODE
          ,W_DRVD_XAAS.DD_INTERNATIONAL_DEMO_FLAG AS DD_INTERNATIONAL_DEMO_FLAG          ,W_DRVD_XAAS. DD_REPLACEMENT_DEMO_FLAG AS  DD_REPLACEMENT_DEMO_FLAG
          ,W_DRVD_XAAS.DD_REVENUE_FLAG AS DD_REVENUE_FLAG          ,W_DRVD_XAAS.DD_OVERLAY_FLAG AS DD_OVERLAY_FLAG        ,W_DRVD_XAAS.DD_ACQUISITION_FLAG AS DD_ACQUISITION_FLAG
        ,(CASE 
            WHEN NXSSIS.SALES_CHANNEL_CD  IN ('TWO TIER DISTRIBUTOR','2-TIER DISTRIBUTOR','Two Tier Distributor') 
            THEN CAST(-777 AS Integer) 
            ELSE COALESCE(NXSSIS.END_CUST_ACCT_LOC_USE_KEY,-999) 
           END) AS DV_END_CUSTOMER_KEY
          ,USER AS EDW_CREATE_USER           ,USER AS EDW_UPDATE_USER 
          ,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DATETIME           ,CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DATETIME           
		  ,CASE WHEN  W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN  NXSSIS.WEB_ORDER_ID           ELSE  NXSSA.CCW_WEB_ORDER_ID END AS WEB_ORDER_ID
          ,W_DRVD_XAAS.DV_LATEST_RECORD_FLG AS DV_LATEST_RECORD_FLG
          ,W_DRVD_XAAS.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY AS DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY
       ,W_DRVD_XAAS.SK_OFFER_ATTRIBUTION_ID_INT AS SK_OFFER_ATTRIBUTION_ID_INT
       ,NP.GOODS_OR_SERVICE_TYPE	   ,NP.DIVESTITURE_TYPE_CD       ,NPF.BK_BUSINESS_UNIT_ID  ,ELC.ENABLE_FLAG  
     ,CASE WHEN      NP1.RU_CHARGE_TYPE_CD='Amortized One Time' THEN CAST( 1 AS DECIMAL(18,11)) ELSE 
     CAST(CASE WHEN NXSSIS.trx_ss_cd='AR' THEN
               CASE WHEN SOL.BILLING_MODEL='Monthly Billing' THEN 1
                    WHEN SOL.BILLING_MODEL='Annual Billing' THEN 12
	                WHEN SOL.BILLING_MODEL='Quarterly Billing' THEN 3
	                WHEN SOL.BILLING_MODEL IN ('Prepaid Term','UNKNOWN') THEN CASE WHEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT in(-999,0) then 1 ELSE NXSSIS.INITIAL_TERM_DUR_MTHS_CNT END
                END
WHEN NXSSIS.trx_ss_cd='MANUAL' THEN 1 ELSE
 CASE WHEN BOOKING_TERM_MONTHS_CNT=0 THEN CASE WHEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT in(-999,0) then 1 ELSE NXSSIS.INITIAL_TERM_DUR_MTHS_CNT END      ELSE BOOKING_TERM_MONTHS_CNT  END
 END AS DECIMAL(18,6)) END  *
  CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN
     CAST(CAST( CAST( ((W_DRVD_XAAS.SPLIT_PCT*(W_DRVD_XAAS.BOOKING_PCT/100.000000) *  W_DRVD_XAAS.TRANSACTION_QTY * (NXSSIS.LIST_PRICE/(CASE WHEN NXSSIS.PRICING_TERM_MTHS_CNT=0 THEN 1 
	 ELSE COALESCE(NXSSIS.PRICING_TERM_MTHS_CNT,1) END)))/100.000000) AS DECIMAL(18,6) )  AS DECIMAL(18,6) ) AS DECIMAL(18,6) )  
      ELSE
      CAST(CAST( CAST( ((W_DRVD_XAAS.SPLIT_PCT *(W_DRVD_XAAS.BOOKING_PCT/100.000000)*  W_DRVD_XAAS.TRANSACTION_QTY * (NXSSA.ATTRIBUTED_UNIT_LIST_PRICE/(CASE WHEN NXSSA.PRICING_TERM_MTHS_CNT=0 THEN 1 ELSE COALESCE(NXSSA.PRICING_TERM_MTHS_CNT,1) END)))/100.000000) AS DECIMAL(18,6) ) AS DECIMAL(18,6) )  AS DECIMAL(18,6) )   
      END AS DV_LOCAL_EXTND_LIST_PRICE_AMT   
,CAST( 
    CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET') THEN
    CAST(COALESCE(NXSSA.ATTRIBUTED_UNIT_LIST_PRICE,0.000000) AS DECIMAL(18,6))
    ELSE
    CAST(COALESCE(NXSSIS.LIST_PRICE,0.000000) AS DECIMAL(18,6)) 
    END   *   CAST((W_DRVD_XAAS.BOOKING_PCT/100.000000 )AS DECIMAL(18,6) )    *    CAST((W_DRVD_XAAS.SPLIT_PCT/100.000000 )AS DECIMAL(18,6) )
    *    CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE','ATTRIBUTED','BIB','BIB OFFSET') THEN         CAST( 1  AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN      CAST( -1 AS DECIMAL(18,6) )      END    AS DECIMAL(18,6))    LOCAL_UNIT_LIST_PRICE_AMT1                      
    ,CAST(LOCAL_UNIT_LIST_PRICE_AMT1*COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST( 1 AS DECIMAL(18,11)) )AS DECIMAL(18,6)) AS DV_UNIT_LIST_PRICE_USD_AMT
    ,    CAST(    CASE WHEN NXSSIS.TRX_SS_CD='MANUAL' THEN CAST(NXSSIS.DEAL_TCCV_USD_AMT AS DECIMAL(18,6))
    ELSE CAST(NXSSIS.DV_TOTAL_CNTRCT_VAL_USD_AMT AS DECIMAL(18,6))
    END    *  CAST((W_DRVD_XAAS.SPLIT_PCT/100.000000 ) * (W_DRVD_XAAS.BOOKING_PCT/100.000000) AS DECIMAL(18,6) )
    *    CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN         CAST( 1  AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN      CAST( -1 AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET') THEN      CAST((NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(18,6) )
    END    AS DECIMAL(18,6))    DV_TOTAL_CNTRCT_VAL_USD_AMT
    ,CAST(CAST(NXSSIS.MTHLY_RECURR_REV_TRXL_AMT *COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST(1 AS DECIMAL(18,11)) ) AS DECIMAL(18,6)) 
    *  CAST((W_DRVD_XAAS.SPLIT_PCT/100.000000 ) * (W_DRVD_XAAS.BOOKING_PCT/100.000000) AS DECIMAL(18,6) )
    *    CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN         CAST( 1  AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN      CAST( -1 AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET') THEN
      CAST((NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(18,6) )
    END    AS DECIMAL(18,6))    DV_MTHLY_RCR_REV_TRXL_USD_AMT 
    ,CAST(CAST(NXSSIS.DV_INCRML_MTHY_RCRR_RV_USD_AMT  AS DECIMAL(18,6)) 
    *  CAST((W_DRVD_XAAS.SPLIT_PCT/100.000000 )* (W_DRVD_XAAS.BOOKING_PCT/100.000000) AS DECIMAL(18,6) )
    *    CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN         CAST( 1  AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN      CAST( -1 AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET') THEN      CAST((NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(18,6) )
    END    AS DECIMAL(18,6))    DV_INCRML_MTHY_RCRR_RV_USD_AMT
    ,CAST(CAST(NXSSIS.DV_ANNLZD_MTHY_RCRR_RV_USD_AMT AS DECIMAL(18,6)) 
    *  CAST((W_DRVD_XAAS.SPLIT_PCT/100.000000 ) * (W_DRVD_XAAS.BOOKING_PCT/100.000000) AS DECIMAL(18,6) )
    *    CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN         CAST( 1  AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN      CAST( -1 AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET') THEN      CAST((NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(18,6) )
    END    AS DECIMAL(18,6))    DV_ANNLZD_MTHY_RCRR_RV_USD_AMT
    ,    CAST(CAST(NXSSIS.DV_INCRML_ANNL_RCRR_RV_USD_AMT AS DECIMAL(18,6)) 
  *  CAST((W_DRVD_XAAS.SPLIT_PCT/100.000000 )*(W_DRVD_XAAS.BOOKING_PCT/100.000000) AS DECIMAL(18,6) )
    *    CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN         CAST( 1  AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN      CAST( -1 AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET') THEN      CAST((NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(18,6) )
    END    AS DECIMAL(18,6))    DV_INCRML_ANNL_RCRR_RV_USD_AMT, 
  COALESCE(  CAST(CAST(NXSSIS.SUBSCRIPTION_IB_CRDT_LOCAL_AMT AS DECIMAL(26,7)) 
     *COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST(1 AS DECIMAL(18,11)) )
     * (W_DRVD_XAAS.BOOKING_PCT/100.000000)  *     CAST((W_DRVD_XAAS.SPLIT_PCT/100.000000 )AS DECIMAL(26,7) )
     *     CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN          CAST( 1  AS DECIMAL(26,7) ) 
      WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN       CAST( -1 AS DECIMAL(26,7) ) 
      WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED') THEN       CAST((NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(26,7) )
     END     AS DECIMAL(26,7))  ,0.0000000)AS DV_PURCHASE_ADJ_DSCNT_USD_AMT /* Q1FY18 PA */   ,W_DRVD_XAAS.POB_TYPE_CD   	
  ,W_DRVD_XAAS.NRS_TRANSITION_FLG 
      ,CAST(CAST(
     CAST(((W_DRVD_XAAS.SPLIT_PCT *  W_DRVD_XAAS.SALES_VALUE_TRXL_AMT *(1-(W_DRVD_XAAS.BOOKING_PCT/100.000000)))/100.000000) AS DECIMAL(18,6)) /*END*/ As DECIMAL(18,6)) *COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST(1 AS DECIMAL(18,11)) )
        AS DECIMAL(18,6)) AS DV_COMP_US_HOLD_NET_PRICE_AMT  
        ,CAST(  CASE WHEN NPPT.PRODUCT_KEY IS NOT NULL AND NPPT.BASE_PRICE IS NOT NULL THEN 
  CAST((NPPT.BASE_PRICE/(CASE WHEN NPPT.PRICING_TERM_MTHS_CNT=0 THEN 1 
  ELSE COALESCE(NPPT.PRICING_TERM_MTHS_CNT,1) END)) AS DECIMAL(18,6))
  ELSE 
  CAST((COALESCE(NXSSIS.LIST_PRICE,0.000000)/(CASE WHEN NXSSIS.PRICING_TERM_MTHS_CNT=0 THEN 1 
  ELSE COALESCE(NXSSIS.PRICING_TERM_MTHS_CNT,1) END))*(COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST( 1 AS DECIMAL(18,11))) )AS DECIMAL(18,6)) 
  END   *CASE WHEN NP1.RU_CHARGE_TYPE_CD='Amortized One Time' THEN CAST(CAST( 1 AS DECIMAL(18,11))*(W_DRVD_XAAS.SPLIT_PCT/100.000000)*(1-(W_DRVD_XAAS.BOOKING_PCT/100.000000))  AS DECIMAL(18,6))
  ELSE CAST(CAST(CASE WHEN NXSSIS.trx_ss_cd='AR' THEN
               CASE WHEN SOL.BILLING_MODEL='Monthly Billing' THEN 1
                    WHEN SOL.BILLING_MODEL='Annual Billing' THEN 12
	                WHEN SOL.BILLING_MODEL='Quarterly Billing' THEN 3
	                WHEN SOL.BILLING_MODEL IN ('Prepaid Term','UNKNOWN') THEN CASE WHEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT in(-999,0) then 1 ELSE NXSSIS.INITIAL_TERM_DUR_MTHS_CNT END
                END
WHEN NXSSIS.trx_ss_cd='MANUAL' THEN 1 ELSE
 CASE WHEN BOOKING_TERM_MONTHS_CNT=0 THEN CASE WHEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT in(-999,0) then 1 ELSE NXSSIS.INITIAL_TERM_DUR_MTHS_CNT END     ELSE BOOKING_TERM_MONTHS_CNT  END
 END AS DECIMAL(18,6))*(W_DRVD_XAAS.SPLIT_PCT/100.000000)*(1-(W_DRVD_XAAS.BOOKING_PCT/100.000000))  AS DECIMAL(18,6) )
  END
  *  CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN       CAST( W_DRVD_XAAS.TRANSACTION_QTY  AS DECIMAL(18,6) ) 
   WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN    CAST( NXSSIS.TRANSACTION_QTY * (-1) AS DECIMAL(18,6) ) 
   WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET') THEN    CAST( COALESCE(NXSSIS.TRANSACTION_QTY,0)  * (NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(18,6) )
  END  AS DECIMAL(18,6))  DV_COMP_US_HOLD_LIST_PRICE_AMT       
 , CAST( CAST(COALESCE( NSC.STANDARD_COST_AMOUNT,0.000000) *  (W_DRVD_XAAS.SPLIT_PCT/100.000000) AS DECIMAL(18,6) ) *(1-(W_DRVD_XAAS.BOOKING_PCT/100.000000))*  CAST( W_DRVD_XAAS.TRANSACTION_QTY * 1 AS DECIMAL(18,6) ) AS DECIMAL(18,6)  )  AS DV_COMP_US_HOLD_COST_AMT
     ,CAST((W_DRVD_XAAS.SPLIT_PCT*(1-(W_DRVD_XAAS.BOOKING_PCT/100.000000))*W_DRVD_XAAS.TRANSACTION_QTY)/100 AS DECIMAL(18,6))   AS DV_EXTENDED_HOLD_QTY
  ,W_DRVD_XAAS.BOOKING_PCT AS BOOKING_PCT  ,W_DRVD_XAAS.SALES_MOTION_CD
         FROM 
         (SELECT
         WIF.SLS_CREDIT_ASGNMT_SLS_TRX_KEY   ,WIF.BK_SALES_REP_NUM  ,WIF.SO_SBSCRPTN_ITM_SLS_TRX_KEY  ,WIF.SALES_TERRITORY_KEY  ,WIF.BK_SALES_CREDIT_TYPE_CODE           ,WIF.SPLIT_PCT 
         ,WIF.BK_SALES_ADJ_CD  ,WIF.BK_SALES_ADJ_TYPE_CD          ,WIF.BK_TRXL_CURRENCY_CD ,WIF.BOOKED_DT,WIF.TRANSACTION_SEQUENCE_ID_INT ,WIF.FORWARD_REVERSE_CODE 
         ,WIF.TRANSACTION_DATETIME          ,WIF.PROCESS_DATE         ,WIF.TRANSACTION_QTY  ,WIF.SALES_VALUE_TRXL_AMT     ,WIF.RECOG_SALES_VALUE_LOCAL_AMT         ,'N' AS DD_RMA_FLAG
         ,'N'  AS DD_INTERNATIONAL_DEMO_FLAG         ,'N' AS DD_REPLACEMENT_DEMO_FLAG         ,'Y' AS DD_REVENUE_FLAG ,'N' AS DD_OVERLAY_FLAG         ,'N' AS DD_ACQUISITION_FLAG         ,(CASE   WHEN WIF.BK_SALES_REP_NUM IS NULL    THEN 'Y'   ELSE 'N' END) AS DD_SALESREP_FLAG
         ,WIF.SUBSCRIPTION_PRODUCT_KEY         ,WIF.RBK_SC_SOURCE_COMMIT_DTM         ,'Y' AS DV_LATEST_RECORD_FLG ,WIF.DV_ATTRIBUTION_CD       ,WIF.SK_OFFER_ATTRIBUTION_ID_INT       ,WIF.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY ,WIF.DV_PRODUCT_KEY        
 ,WIF.BOOKING_PCT ,WIF.POB_TYPE_CD 
 ,WIF.NRS_TRANSITION_FLG,WIF.SALES_MOTION_CD FROM $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_F_NG  WIF   
) W_DRVD_XAAS
INNER JOIN $$ETLVWDB.SM_XAAS_BKG_TRX_NRT_NG SMXBTRX ON SMXBTRX.TRANSACTION_SEQUENCE_ID_INT = W_DRVD_XAAS.TRANSACTION_SEQUENCE_ID_INT
INNER JOIN $$COMREFVWDB.R_FISCAL_MONTH_TO_YEAR RFMY ON W_DRVD_XAAS.PROCESS_DATE BETWEEN RFMY.FISCAL_MONTH_START_DATE AND RFMY.FISCAL_MONTH_END_DATE
INNER JOIN $$COMREFVWDB.R_SALES_HIERARCHY RSH ON RSH.SALES_TERRITORY_KEY = W_DRVD_XAAS.SALES_TERRITORY_KEY 
INNER JOIN $$NRTNCRVWDB.N_XAAS_SO_SBCR_ITM_STRX_NRT_TV NXSSIS ON NXSSIS.SO_SBSCRPTN_ITM_SLS_TRX_KEY = W_DRVD_XAAS.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY AND NXSSIS.END_TV_DTM=CAST('3500-01-01 00:00:00' AS TIMESTAMP(0))
INNER JOIN $$COMREFVWDB.N_PRODUCT NP ON NP.ITEM_KEY = W_DRVD_XAAS.SUBSCRIPTION_PRODUCT_KEY     
INNER JOIN $$COMREFVWDB.N_PRODUCT NP1 ON NP1.ITEM_KEY = NXSSIS.SUBSCRIPTION_PRODUCT_KEY       
LEFT JOIN $$COMREFVWDB.N_PRODUCT_FAMILY NPF ON NP.RU_BK_PRODUCT_FAMILY_ID = NPF.BK_PRODUCT_FAMILY_ID      
 LEFT JOIN $$ETLVWDB.EL_CDBU_NG ELC ON NPF.BK_BUSINESS_UNIT_ID = ELC.BK_BUSINESS_UNIT_ID AND NP.GOODS_OR_SERVICE_TYPE = ELC.GOODS_OR_SERVICE_TYPE    
 LEFT OUTER JOIN $$FINLGLVWDB.N_CURRENCY_CONV_DAILY_RATE NCDR  ON (NCDR.BK_FROM_CURRENCY_CODE = W_DRVD_XAAS.BK_TRXL_CURRENCY_CD           
  AND NCDR.BK_TO_CURRENCY_CODE ='USD' AND NCDR.SK_CONVERSION_DATE = NXSSIS.ORDER_CREATED_DT )
   INNER JOIN $$COMREFVWDB.N_ERP_CUST_ACCT_LOC_USE SITE_USE ON SITE_USE.ERP_CUST_ACCOUNT_LOCATION_KEY = NXSSIS.BILL_TO_CUST_ACCT_LOC_USE_KEY 
     LEFT OUTER JOIN ( $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCAT_IC  ) ON SITE_USE.CUSTOMER_ACCOUNT_KEY=NCAT_IC.CUSTOMER_ACCOUNT_KEY
         LEFT OUTER JOIN $$COMREFVWDB.N_SUBSCRIPTION_PRDT_PRC_TV NPPT  ON NPPT.PRODUCT_KEY =NXSSIS.SUBSCRIPTION_PRODUCT_KEY AND NPPT.BK_PRICE_LIST_NAME = NXSSIS.BK_PRICE_LIST_NAME
        AND NPPT.BK_VERSION_NUM_INT=NXSSIS.BK_VERSION_NUM_INT AND  NPPT.PRICING_FORMULA_CD<>'Rate Table' 
LEFT OUTER JOIN (SELECT ITEM_KEY,STANDARD_COST_REVS_DATETIME,TRANSACTION_SEQUENCE_ID_INT,BK_MRP_ORG_NAME,STANDARD_COST_AMOUNT 
       FROM $$COMREFVWDB.N_STANDARD_COST NSTC
        INNER JOIN(SELECT TRANSACTION_SEQUENCE_ID_INT,SUBSCRIPTION_PRODUCT_KEY FROM $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_F_NG
    ) WIXSB ON WIXSB.SUBSCRIPTION_PRODUCT_KEY=NSTC.ITEM_KEY  WHERE NSTC.BK_MRP_ORG_NAME = 'GLOBAL ORGANIZATION'
        QUALIFY ROW_NUMBER () OVER (PARTITION BY  WIXSB.TRANSACTION_SEQUENCE_ID_INT,  NSTC.ITEM_KEY ORDER BY NSTC.STANDARD_COST_REVS_DATETIME DESC )  = 1 ) NSC
       ON  NSC.ITEM_KEY  =W_DRVD_XAAS.SUBSCRIPTION_PRODUCT_KEY  AND NSC.TRANSACTION_SEQUENCE_ID_INT = W_DRVD_XAAS.TRANSACTION_SEQUENCE_ID_INT  AND NSC.STANDARD_COST_REVS_DATETIME <= NXSSIS.ORDER_CREATED_DT
       LEFT OUTER JOIN (SELECT NXSSA.ATTRIBUTION_CD,NXSSA.PARENT_SO_SBSCRP_ITMSLSTRX_KEY, NXSSA.BK_OFFER_ATTRIBUTION_ID_INT,NXSSA.CCW_WEB_ORDER_ID ,NXSSA.PRICING_TERM_MTHS_CNT,NXSSA.  ATTRIBUTED_UNIT_LIST_PRICE,NXSSA.ACV_ATTRIBUTION_PCT
FROM $$NRTNCRVWDB.N_XAAS_SO_SBSCR_ATRB_NG_NRT_TV NXSSA
WHERE  ATTRIBUTION_CD<>'ATTRIBUTED' AND  NXSSA.END_TV_DTM='3500-01-01 00:00:00' AND EXISTS ( SELECT 1 FROM $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_F_NG WI_F
WHERE NXSSA.BK_OFFER_ATTRIBUTION_ID_INT = WI_F.SK_OFFER_ATTRIBUTION_ID_INT AND NXSSA.PARENT_SO_SBSCRP_ITMSLSTRX_KEY=WI_F.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY )
UNION
SELECT NXSSA.ATTRIBUTION_CD, NXSSA.PARENT_SO_SBSCRP_ITMSLSTRX_KEY,NXSSA.BK_OFFER_ATTRIBUTION_ID_INT,NXSSA.CCW_WEB_ORDER_ID ,NXSSA.PRICING_TERM_MTHS_CNT,NXSSIS.LIST_PRICE,100 AS ACV_ATTRIBUTION_PCT
FROM $$NRTNCRVWDB.N_XAAS_SO_SBSCR_ATRB_NG_NRT_TV NXSSA 
INNER JOIN $$NRTNCRVWDB.N_XAAS_SO_SBCR_ITM_STRX_NRT_TV NXSSIS ON NXSSA.PARENT_SO_SBSCRP_ITMSLSTRX_KEY=NXSSIS.SO_SBSCRPTN_ITM_SLS_TRX_KEY AND NXSSIS.END_TV_DTM='3500-01-01 00:00:00' WHERE ATTRIBUTION_CD='ATTRIBUTED'
AND NXSSA.END_TV_DTM='3500-01-01 00:00:00' AND EXISTS ( SELECT 1 FROM $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_F_NG WI_F
WHERE NXSSA.BK_OFFER_ATTRIBUTION_ID_INT = WI_F.SK_OFFER_ATTRIBUTION_ID_INT AND NXSSA.PARENT_SO_SBSCRP_ITMSLSTRX_KEY=WI_F.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY ))NXSSA
ON NXSSA.BK_OFFER_ATTRIBUTION_ID_INT = W_DRVD_XAAS.SK_OFFER_ATTRIBUTION_ID_INT AND NXSSA.PARENT_SO_SBSCRP_ITMSLSTRX_KEY = W_DRVD_XAAS.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY 
LEFT JOIN (SELECT COALESCE(SOL.Billing_model,'UNKNOWN') billing_model,trx_id,trx_version from $$ETLVWdb.EL_XXOPL_BOOKING_TRANSACTIONS XBT LEFT JOIN $$ETLVWdb.EL_XXOPL_ORDER_LINES_ALL SOL on SOL.line_id=cast(XBT.line_id as bigint)) SOL on (SOL.trx_id=NXSSIS.sk_trx_id_int and SOL.trx_version=NXSSIS.BOOKING_VERSION_INT)) W_XAAS
	   
UNION ALL
    SELECT     
 SMXBTRX.DRVD_XAAS_BKG_TRX_KEY AS BOOKINGS_MEASURE_KEY,WXBR.PRODUCT_KEY ,WXBR.END_CUSTOMER_KEY ,WXBR.BILL_TO_CUSTOMER_KEY,WXBR.SHIP_TO_CUSTOMER_KEY       
,WXBR.SOLD_TO_CUSTOMER_KEY ,WXBR.TRANSACTION_DATETIME,WXBR.SALES_TERRITORY_KEY ,WXBR.SALES_REP_NUMBER,WXBR.PROCESS_DATE  ,WXBR.DV_FISCAL_YEAR_MTH_NUMBER_INT ,WXBR.ADJUSTMENT_TYPE_CODE          
,WXBR.SALES_CHANNEL_CODE ,WXBR.SALES_CREDIT_TYPE_CODE ,WXBR.ADJUSTMENT_CODE,WXBR.BKGS_MEASURE_TRANS_TYPE_CODE ,WXBR.CANCELLED_FLG ,WXBR.CANCEL_CODE                   
,WXBR.ACQUISITION_FLG ,WXBR.FORWARD_REVERSE_FLG,WXBR.DISTRIBUTOR_OFFSET_FLG ,WXBR.CORPORATE_BOOKINGS_FLG,WXBR.OVERLAY_FLG ,WXBR.IC_REVENUE_FLG,WXBR.CHARGES_FLG                   
,WXBR.SALESREP_FLG ,WXBR.MISC_FLG ,WXBR.SERVICE_FLG ,WXBR.INTERNATIONAL_DEMO_FLG,WXBR.REPLACEMENT_DEMO_FLG ,WXBR.REVENUE_FLG ,WXBR.RMA_FLG ,WXBR.DD_COMP_US_NET_PRICE_AMOUNT
,WXBR.DD_COMP_US_LIST_PRICE_AMOUNT ,WXBR.DD_COMP_US_STANDARD_PRICE_AMT ,WXBR.CONVERSION_RT ,WXBR.CONVERSION_DT ,WXBR.DD_CISCO_BOOKED_DTM ,WXBR.DD_SALES_ORDER_CATEGORY_TYPE
,WXBR.DD_SLS_ORD_OPERATING_UNIT_CD,WXBR.DD_TRX_CURRENCY_CD ,WXBR.DV_TRANSACTION_TYPE  ,WXBR.DV_TRANSACTION_NAME,WXBR.BOOKINGS_SPLIT_PCT ,WXBR.DV_SOURCE_ORDER_NUM_INT ,WXBR.DV_DEAL_ID    
,WXBR.DV_PURCHASE_ORDER_NUM ,WXBR.DV_BOOKED_DT,WXBR.DV_REVENUE_RECOGNITION_FLG,WXBR.DV_NET_SPREAD_FLG,WXBR.DV_PRODUCT_KEY,WXBR.DV_ATTRIBUTION_CD,WXBR.DV_FMV_FLG,WXBR.TRANSACTION_SEQUENCE_ID_INT  
,WXBR.TSL_TRX_SOURCE_COMMIT_DTM ,WXBR.RBK_SC_SOURCE_COMMIT_DTM ,WXBR.SO_SBSCRPTN_ITM_SLS_TRX_KEY ,WXBR.SALES_VALUE_TRXL_AMT,WXBR.TRANSACTION_QUANTITY,WXBR.DV_END_CUSTOMER_KEY,USER AS EDW_CREATE_USER 
,USER AS EDW_UPDATE_USER ,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DATETIME,CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DATETIME ,WXBR.DV_COMP_US_COST_AMT,WXBR.WEB_ORDER_ID          
,WXBR.DV_LATEST_RECORD_FLG ,WXBR.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY,WXBR.SK_OFFER_ATTRIBUTION_ID_INT ,WXBR.DV_LOCAL_EXTND_LIST_PRICE_AMT,WXBR.LOCAL_UNIT_LIST_PRICE_AMT ,WXBR.DV_UNIT_LIST_PRICE_USD_AMT 
,WXBR.DV_TOTAL_CNTRCT_VAL_USD_AMT ,WXBR.DV_MTHLY_RCR_REV_TRXL_USD_AMT,WXBR.DV_INCRML_MTHY_RCRR_RV_USD_AMT,WXBR.DV_ANNLZD_MTHY_RCRR_RV_USD_AMT 
,WXBR.DV_INCRML_ANNL_RCRR_RV_USD_AMT,WXBR.DV_PURCHASE_ADJ_DSCNT_USD_AMT ,WXBR.POB_TYPE_CD,WXBR.NRS_TRANSITION_FLG 
,WXBR.DV_COMP_US_HOLD_NET_PRICE_AMT ,WXBR.DV_COMP_US_HOLD_LIST_PRICE_AMT ,WXBR.DV_COMP_US_HOLD_COST_AMT ,WXBR.DV_EXTENDED_HOLD_QTY,WXBR.BOOKING_PCT
,WXBR.SALES_MOTION_CD
FROM $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_R_NG WXBR 
INNER JOIN $$ETLVWDB.SM_XAAS_BKG_TRX_NRT_NG SMXBTRX 
ON SMXBTRX.TRANSACTION_SEQUENCE_ID_INT = WXBR.TRANSACTION_SEQUENCE_ID_INT


Post SQL : 



Target1 Name : MT_DRVD_XAAS_BKGS_TRX_NRT1_NG


Pre SQL : 
UPDATE  MTXBT FROM
   $$NRTNCRVWDB.MT_DRVD_XAAS_BKGS_TRX_NG_NRT MTXBT,
   $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_R_NG  WI
   SET DV_LATEST_RECORD_FLG='N'
   WHERE MTXBT.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY = WI.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY 
   AND MTXBT.SK_OFFER_ATTRIBUTION_ID_INT = WI.SK_OFFER_ATTRIBUTION_ID_INT /*OA Q1FY16*/
   AND MTXBT.SALES_TERRITORY_KEY=WI.SALES_TERRITORY_KEY           
   AND MTXBT. SALES_REP_NUMBER =WI.SALES_REP_NUMBER              
   AND MTXBT.FORWARD_REVERSE_FLG = 'F'
   AND MTXBT.DV_LATEST_RECORD_FLG='Y';
   
   
   DELETE FROM $$NRTNCRVWDB.MT_DRVD_XAAS_BKGS_TRX_NG_NRT  MTDNBT_DEL 
   WHERE EXISTS (SELECT 1 FROM $$NRTSTGDB.WI_DRVD_XAAS_BKG_TRX_DEL_NRT_NG WLIR_DEL 
   WHERE MTDNBT_DEL.DRVD_XAAS_BKGS_KEY = WLIR_DEL.DRVD_XAAS_BKGS_KEY
   AND MTDNBT_DEL.PROCESS_DATE = WLIR_DEL.PROCESS_DATE);


Post SQL : 
CALL COLLECT_STATS_WRAP ('$$NRTNCRDB','MT_DRVD_XAAS_BKGS_TRX_NG_NRT','D');

/*AMY-Jun2018 - UPDATE for today's 'F' records using NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_F as driving table - Start */

CREATE VOLATILE TABLE V_W_XAAS_OUTER 
AS (
SELECT 
        W_XAAS.BOOKINGS_MEASURE_KEY AS BOOKINGS_MEASURE_KEY
       ,W_XAAS.PRODUCT_KEY  AS PRODUCT_KEY
       ,W_XAAS.SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY 
       ,W_XAAS.PROCESS_DATE AS PROCESS_DATE
       ,W_XAAS.DV_FISCAL_YEAR_MTH_NUMBER_INT AS DV_FISCAL_YEAR_MTH_NUMBER_INT
       ,W_XAAS.FORWARD_REVERSE_FLG  AS FORWARD_REVERSE_FLG
       ,W_XAAS.DD_COMP_US_NET_PRICE_AMOUNT AS DD_COMP_US_NET_PRICE_AMOUNT
       ,COALESCE(W_XAAS.DD_TRX_CURRENCY_CD,'USD') AS DD_TRX_CURRENCY_CD 
         ,W_XAAS.DV_ATTRIBUTION_CD AS DV_ATTRIBUTION_CD
         ,W_XAAS.TRANSACTION_SEQUENCE_ID_INT AS TRANSACTION_SEQUENCE_ID_INT 
         ,W_XAAS.DV_LATEST_RECORD_FLG AS DV_LATEST_RECORD_FLG 
      ,W_XAAS.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY AS DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY
      ,W_XAAS.SK_OFFER_ATTRIBUTION_ID_INT AS SK_OFFER_ATTRIBUTION_ID_INT
      ,W_XAAS.DV_MTHLY_RCR_REV_TRXL_USD_AMT  
  ,W_XAAS.BOOKING_PCT
	/* Jun2018 Release - Start */
	,W_XAAS.RU_SERVICE_CONTRACT_START_DTM 
	,W_XAAS.RU_SERVICE_CONTRACT_END_DTM
	,W_XAAS.DV_CONTRACT_DURATION 
	,W_XAAS.DV_ANNUALIZED_FLG 
	,W_XAAS.DV_ANNUALIZED_US_NET_AMT 
	,W_XAAS.DV_MULTIYEAR_US_NET_AMT 
	/* Jun2018 Release - End */
  
         FROM
       (SELECT 
         SMXBTRX.DRVD_XAAS_BKG_TRX_KEY AS BOOKINGS_MEASURE_KEY
      ,W_DRVD_XAAS.SUBSCRIPTION_PRODUCT_KEY AS PRODUCT_KEY 
         ,COALESCE(W_DRVD_XAAS.SALES_TERRITORY_KEY,-999) AS  SALES_TERRITORY_KEY 
         ,W_DRVD_XAAS.PROCESS_DATE AS PROCESS_DATE 
         ,RFMY.FISCAL_YEAR_MONTH_INT AS DV_FISCAL_YEAR_MTH_NUMBER_INT 
         ,W_DRVD_XAAS.FORWARD_REVERSE_CODE AS FORWARD_REVERSE_FLG  
       ,CAST(CAST(/*CASE WHEN W_DRVD_XAAS.FORWARD_REVERSE_CODE='R' THEN CAST(W_DRVD_XAAS.SALES_VALUE_TRXL_AMT as DECIMAL(18,6))*/
     /* ELSE  (*/
     CAST(((W_DRVD_XAAS.SPLIT_PCT *  W_DRVD_XAAS.RECOG_SALES_VALUE_LOCAL_AMT)/100.000000) AS DECIMAL(18,6)) /*END*/ As DECIMAL(18,6)) *COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST(1 AS DECIMAL(18,11)) )
          AS DECIMAL(18,6))
     AS DD_COMP_US_NET_PRICE_AMOUNT   
         
          ,W_DRVD_XAAS.BK_TRXL_CURRENCY_CD AS DD_TRX_CURRENCY_CD 
       ,W_DRVD_XAAS.DV_ATTRIBUTION_CD AS DV_ATTRIBUTION_CD
          ,W_DRVD_XAAS.TRANSACTION_SEQUENCE_ID_INT AS TRANSACTION_SEQUENCE_ID_INT 
          ,W_DRVD_XAAS.FORWARD_REVERSE_CODE AS FORWARD_REVERSE_CODE 
   ,CAST(W_DRVD_XAAS.RECOG_SALES_VALUE_LOCAL_AMT *  (W_DRVD_XAAS.SPLIT_PCT/100.0000000) AS DECIMAL(27,7)) /*END*/ AS SALES_VALUE_TRXL_AMT 
          ,W_DRVD_XAAS.DV_LATEST_RECORD_FLG AS DV_LATEST_RECORD_FLG 
       ,W_DRVD_XAAS.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY AS DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY
       ,W_DRVD_XAAS.SK_OFFER_ATTRIBUTION_ID_INT AS SK_OFFER_ATTRIBUTION_ID_INT 
    ,CAST(CAST(NXSSIS.MTHLY_RECURR_REV_TRXL_AMT *COALESCE(CAST(NCDR.PL_CONVERSION_RATE AS DECIMAL(18,11)),CAST(1 AS DECIMAL(18,11)) ) AS DECIMAL(18,6)) 
    *
  CAST((W_DRVD_XAAS.SPLIT_PCT/100.000000 ) * (W_DRVD_XAAS.BOOKING_PCT/100.000000) AS DECIMAL(18,6) )
    *
    CASE WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE') THEN 
        CAST( 1  AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('OFFSET') THEN
      CAST( -1 AS DECIMAL(18,6) ) 
     WHEN W_DRVD_XAAS.DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET') THEN
      CAST((NXSSA.ACV_ATTRIBUTION_PCT/100.00000000) AS DECIMAL(18,6) )
    END
    AS DECIMAL(18,6))
    DV_MTHLY_RCR_REV_TRXL_USD_AMT 
  ,W_DRVD_XAAS.BOOKING_PCT AS BOOKING_PCT
	/* Jun2018 Release - Start */ -- below 6-cols derivation from joins/tables as in SW_ANNUALIZE_XAAS - NBM logic
   ,NSOLNRT.RU_SERVICE_CONTRACT_START_DTM  AS RU_SERVICE_CONTRACT_START_DTM   --AS NEW_CONTRACT_START_DTM
   ,NSOLNRT.RU_SERVICE_CONTRACT_END_DTM AS RU_SERVICE_CONTRACT_END_DTM -- AS NEW_CONTRACT_END_DTM
   , CASE 
  WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD = 'AUTO-RENEWAL' THEN NXSSIS.RENEWAL_TERM_MTHS_CNT 
 WHEN COALESCE(NXSSIS.BOOKING_TERM_MONTHS_CNT, NXSSIS.INITIAL_TERM_DUR_MTHS_CNT) > 0 THEN COALESCE(NXSSIS.BOOKING_TERM_MONTHS_CNT, NXSSIS.INITIAL_TERM_DUR_MTHS_CNT)
 WHEN COALESCE(NXSSIS.BOOKING_TERM_MONTHS_CNT,0) = 0 AND COALESCE(NXSSIS.INITIAL_TERM_DUR_MTHS_CNT, 0) > 0  THEN NXSSIS.INITIAL_TERM_DUR_MTHS_CNT
   WHEN ( NP.BK_PRODUCT_ID LIKE 'SWOA%' OR  NP.BK_PRODUCT_ID LIKE '%ADJ%' ) AND NP.BK_PRODUCT_ID NOT LIKE 'SWOA-MX%' THEN NULL
   ELSE 
    CASE 
  WHEN NP.PRICING_UNIT_NAME = 'YEAR' THEN NP.PRICING_UNIT_DURATION_INT * 12 
      WHEN NP.PRICING_UNIT_NAME = 'MONTHS' THEN NP.PRICING_UNIT_DURATION_INT 
	WHEN NP.PRICING_UNIT_NAME = 'DAYS' THEN  CAST(((NP.PRICING_UNIT_DURATION_INT*12(FLOAT))/365) AS DECIMAL(15,6) )
    WHEN EL.BIZ_DEF_TERM IS NOT NULL THEN EL.BIZ_DEF_TERM
    WHEN EL.DURATION IS NOT NULL THEN EL.DURATION
     ELSE NULL
    END
   END
   DV_CONTRACT_DURATION /* CONTRACT_DURATION */
 , ( COALESCE (CAST(DV_CONTRACT_DURATION AS DECIMAL(15,6)),12) / 12) * 365 ORIG_SUB_DAYS
   , 
 CASE WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD IN ('REPLACE') AND NXSSIS.BK_SALES_ORDER_SELL_TYPE_CD IN ('UPSELL') /*AND NXSSIST.ACTION_CD = 'ADD'*/ THEN 0
  WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD IN ('MODIFY') AND NXSSIS.BK_SALES_ORDER_SELL_TYPE_CD IN ('UPSELL') /*AND NXSSIST.ACTION_CD IN ('ADD','REMOVE')*/ THEN 0
  ELSE  NXSSIS.FULFILLMENT_TERM_DAYS_CNT 
  END FULFILLMENT_TERM_DAYS 
/* ,NBM.DV_MTHLY_RCR_REV_TRXL_USD_AMT   MRR  */
/* ,NBM.DV_INCRML_MTHY_RCRR_RV_USD_AMT IMRR  */
/* , NBM.DD_COMP_US_NET_PRICE_AMOUNT /* * COALESCE(SWFTR.ALLOCATION_PCT,1) */ /*BOOK_NET */
  ,CASE
    WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD IN ('REPLACE','MODIFY') AND NXSSIS.BK_SALES_ORDER_SELL_TYPE_CD IN ('UPSELL','DOWNSELL','NOCHANGE') /*AND NXSSIST.ACTION_CD = 'ADD'*/ THEN DV_MTHLY_RCR_REV_TRXL_USD_AMT
    WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD IN ('NEW' ) AND NXSSIS.BK_SALES_ORDER_SELL_TYPE_CD IN ('NOCHANGE') AND NXSSIS.ACTION_CD = 'ADD' THEN DV_MTHLY_RCR_REV_TRXL_USD_AMT
    WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD = 'AUTO-RENEWAL' THEN DV_MTHLY_RCR_REV_TRXL_USD_AMT 
    ELSE DV_INCRML_MTHY_RCRR_RV_USD_AMT
   END MONTHLY_RATE
   , MONTHLY_RATE * 12 / 365 DAILY_RATE_FROM_MONTHLY
   , CASE WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD IN ('MODIFY') AND NXSSIS.BK_SALES_ORDER_SELL_TYPE_CD IN ('UPSELL')
  THEN CASE WHEN ORIG_SUB_DAYS - NXSSIS.FULFILLMENT_TERM_DAYS_CNT <= 0  THEN 0
    ELSE DD_COMP_US_NET_PRICE_AMOUNT / ( ORIG_SUB_DAYS - NXSSIS.FULFILLMENT_TERM_DAYS_CNT ) 
   END
  WHEN ORIG_SUB_DAYS - FULFILLMENT_TERM_DAYS <= 0  THEN 0
        ELSE  DD_COMP_US_NET_PRICE_AMOUNT / ( ORIG_SUB_DAYS - FULFILLMENT_TERM_DAYS ) 
  END  AS DAILY_RATE
   ,
   CASE 
   WHEN NXSSIS.ATCCV_FLG = 'Y' THEN 'Y'
   WHEN DV_CONTRACT_DURATION IS NULL THEN 'Y' 
    WHEN DV_CONTRACT_DURATION IS NOT NULL THEN 
    CASE    
     WHEN COALESCE ( EX.EXCLUDE_FLAG,'N' ) = 'Y' THEN 'Y' 
     WHEN EX.EXCLUDE_FLAG IS NOT NULL AND EX.EXCLUDE_FLAG = 'N'  
     THEN     CASE  WHEN   DV_CONTRACT_DURATION >12   AND NP.MONETIZATION_TYPE_CD <>'USAGE'  THEN 'N' ELSE 'Y' END
    /* WHEN DV_CONTRACT_DURATION >12 AND NP.MONETIZATION_TYPE_CD <>'USAGE'  AND NBM.XCAT_FLG <>'Y' AND FDM.BK_DEAL_ID IS NULL THEN 'N' ELSE 'Y'*/
     WHEN DV_CONTRACT_DURATION >12 AND NP.MONETIZATION_TYPE_CD <>'USAGE' AND NP.XCAT_FLG <>'Y'  AND FDM.BK_DEAL_ID IS NULL THEN 'N' ELSE 'Y' /*replaced NBM.XCAT_FLG with NP.XCAT_FLG .... also NBM.XCAT_FLG is always 'N' for 'XAAS' as of now */
    END
   
   END DV_ANNUALIZED_FLG, /* ANNUALIZED_FLG, */
   
  CASE 
  WHEN  DV_ANNUALIZED_FLG = 'N' AND NXSSIS.BK_SALES_ORDER_TYPE_CD IN ('MODIFY') AND NXSSIS.BK_SALES_ORDER_SELL_TYPE_CD IN ('UPSELL') AND ((DV_FISCAL_YEAR_MTH_NUMBER_INT - (CSM.FISCAL_YEAR_MONTH_INT)) MOD 100) = 0 AND (((ORIG_SUB_DAYS - NXSSIS.FULFILLMENT_TERM_DAYS_CNT)/365)*12)<=12
     THEN DD_COMP_US_NET_PRICE_AMOUNT
  WHEN DV_ANNUALIZED_FLG = 'N' AND ( DV_FISCAL_YEAR_MTH_NUMBER_INT - CSM.FISCAL_YEAR_MONTH_INT )  = 0  AND FULFILLMENT_TERM_DAYS <> 0 
      THEN ( 365.000 - FULFILLMENT_TERM_DAYS ) * DAILY_RATE 
  WHEN  DV_ANNUALIZED_FLG = 'N'  AND ((DV_FISCAL_YEAR_MTH_NUMBER_INT - (CSM.FISCAL_YEAR_MONTH_INT)) MOD 100) = 0 AND (((ORIG_SUB_DAYS - FULFILLMENT_TERM_DAYS)/365)*12)<=12 
     THEN DD_COMP_US_NET_PRICE_AMOUNT 
  WHEN DV_ANNUALIZED_FLG = 'N' AND ( ( DV_FISCAL_YEAR_MTH_NUMBER_INT - CSM.FISCAL_YEAR_MONTH_INT ) MOD 100 ) = 0  AND FULFILLMENT_TERM_DAYS > 365 
      THEN   ( ( (365.000) - ( FULFILLMENT_TERM_DAYS MOD (365.000) ) ) ) * DAILY_RATE 
  WHEN DV_ANNUALIZED_FLG = 'N' AND ( ( DV_FISCAL_YEAR_MTH_NUMBER_INT - CSM.FISCAL_YEAR_MONTH_INT ) MOD 100 ) = 0  AND CSM.WORKDAY_IN_FISCAL_MONTH_NUM = 25 AND ( FULFILLMENT_TERM_DAYS BETWEEN 0 AND 364 ) AND ( 365 - FULFILLMENT_TERM_DAYS ) < 35  
      THEN   ( ( (365.000) - ( FULFILLMENT_TERM_DAYS) ) + 365 )  * DAILY_RATE  
  WHEN DV_ANNUALIZED_FLG = 'N' AND ( ( DV_FISCAL_YEAR_MTH_NUMBER_INT - CSM.FISCAL_YEAR_MONTH_INT ) MOD 100 ) = 0  AND FULFILLMENT_TERM_DAYS <> 0 
      THEN   ( ( (365.000/12.000) - ( FULFILLMENT_TERM_DAYS MOD (365.000/12.000) ) ) + 365 ) * DAILY_RATE 
  WHEN DV_ANNUALIZED_FLG = 'N' AND ( ( DV_FISCAL_YEAR_MTH_NUMBER_INT - CSM.FISCAL_YEAR_MONTH_INT ) MOD 100 ) = 0  AND FULFILLMENT_TERM_DAYS = 0 
      THEN   ( 365 ) * DAILY_RATE  
  WHEN DV_ANNUALIZED_FLG = 'N' AND ( ( DV_FISCAL_YEAR_MTH_NUMBER_INT - CSM.FISCAL_YEAR_MONTH_INT ) MOD 100 ) <> 0 AND FULFILLMENT_TERM_DAYS = 365 
      THEN 0
  WHEN DV_ANNUALIZED_FLG = 'N' 
      THEN ( ( 365 - ( FULFILLMENT_TERM_DAYS MOD 365 ) ) ) * DAILY_RATE
  WHEN DV_ANNUALIZED_FLG = 'Y' 
      THEN DD_COMP_US_NET_PRICE_AMOUNT  
   END
   DV_ANNUALIZED_US_NET_AMT,  /*ANNUAL_AMOUNT ,*/
   DD_COMP_US_NET_PRICE_AMOUNT - DV_ANNUALIZED_US_NET_AMT AS DV_MULTIYEAR_US_NET_AMT   /* BOOK_NET - ANNUAL_AMOUNT AS MULTI_YEAR_AMOUNT */

   /* Jun2018 Release - End */
  
       FROM 
         (SELECT
		 WIF.SALES_TERRITORY_KEY
         ,WIF.SPLIT_PCT  
         ,WIF.BK_TRXL_CURRENCY_CD
         ,WIF.TRANSACTION_SEQUENCE_ID_INT
         ,WIF.FORWARD_REVERSE_CODE  
         ,WIF.PROCESS_DATE
         ,WIF.SALES_VALUE_TRXL_AMT 
     ,WIF.RECOG_SALES_VALUE_LOCAL_AMT 
         ,WIF.SUBSCRIPTION_PRODUCT_KEY 
         ,'Y' AS DV_LATEST_RECORD_FLG 
      ,WIF.DV_ATTRIBUTION_CD 
      ,WIF.SK_OFFER_ATTRIBUTION_ID_INT
      ,WIF.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY
  ,WIF.BOOKING_PCT

         FROM $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_F_NG  WIF
) 
   W_DRVD_XAAS
          INNER JOIN
        $$ETLVWDB.SM_XAAS_BKG_TRX_NRT_NG SMXBTRX
              ON SMXBTRX.TRANSACTION_SEQUENCE_ID_INT = W_DRVD_XAAS.TRANSACTION_SEQUENCE_ID_INT
          INNER JOIN $$COMREFVWDB.R_FISCAL_MONTH_TO_YEAR RFMY
              ON W_DRVD_XAAS.PROCESS_DATE 
              BETWEEN RFMY.FISCAL_MONTH_START_DATE AND RFMY.FISCAL_MONTH_END_DATE
          INNER JOIN $$COMREFVWDB.R_SALES_HIERARCHY RSH
              ON RSH.SALES_TERRITORY_KEY = W_DRVD_XAAS.SALES_TERRITORY_KEY 
          INNER JOIN $$NRTNCRVWDB.N_XAAS_SO_SBCR_ITM_STRX_NRT_TV NXSSIS
              ON NXSSIS.SO_SBSCRPTN_ITM_SLS_TRX_KEY = W_DRVD_XAAS.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY  
  AND NXSSIS.END_TV_DTM=CAST('3500-01-01 00:00:00' AS TIMESTAMP(0))
          INNER JOIN $$COMREFVWDB.N_PRODUCT NP 
              ON  NP.ITEM_KEY = W_DRVD_XAAS.SUBSCRIPTION_PRODUCT_KEY     /* OA-Q1FY16*/ 
        INNER JOIN $$COMREFVWDB.N_PRODUCT NP1
              ON  NP1.ITEM_KEY = NXSSIS.SUBSCRIPTION_PRODUCT_KEY     /* OA-Q1FY16*/ 
     
   LEFT JOIN $$COMREFVWDB.N_PRODUCT_FAMILY NPF      /* NPF and ELC Join added as part of Q2FY16 - CDBU - SA (Scientific Atlanta) Changes for CORP BOOKINGS FLAG, REVENUE RECOGNITION FLAG and NET SPREAD FLAG Columns */
       ON NP.RU_BK_PRODUCT_FAMILY_ID = NPF.BK_PRODUCT_FAMILY_ID
       
       LEFT JOIN $$ETLVWDB.EL_CDBU_NG ELC
      ON NPF.BK_BUSINESS_UNIT_ID = ELC.BK_BUSINESS_UNIT_ID
      AND NP.GOODS_OR_SERVICE_TYPE = ELC.GOODS_OR_SERVICE_TYPE
     
          LEFT OUTER JOIN $$FINLGLVWDB.N_CURRENCY_CONV_DAILY_RATE NCDR
              ON (NCDR.BK_FROM_CURRENCY_CODE = W_DRVD_XAAS.BK_TRXL_CURRENCY_CD           
           AND NCDR.BK_TO_CURRENCY_CODE ='USD'
              AND NCDR.SK_CONVERSION_DATE = NXSSIS.ORDER_CREATED_DT )
            INNER JOIN $$COMREFVWDB.N_ERP_CUST_ACCT_LOC_USE SITE_USE
          ON SITE_USE.ERP_CUST_ACCOUNT_LOCATION_KEY = NXSSIS.BILL_TO_CUST_ACCT_LOC_USE_KEY 
              LEFT OUTER JOIN (   
          $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCAT_IC
           ) ON SITE_USE.CUSTOMER_ACCOUNT_KEY=NCAT_IC.CUSTOMER_ACCOUNT_KEY
         LEFT OUTER JOIN $$COMREFVWDB.N_SUBSCRIPTION_PRDT_PRC_TV NPPT
         ON NPPT.PRODUCT_KEY =NXSSIS.SUBSCRIPTION_PRODUCT_KEY  
           AND NPPT.BK_PRICE_LIST_NAME = NXSSIS.BK_PRICE_LIST_NAME
        AND NPPT.BK_VERSION_NUM_INT=NXSSIS.BK_VERSION_NUM_INT
        AND  NPPT.PRICING_FORMULA_CD<>'Rate Table' 

LEFT OUTER JOIN (SELECT ITEM_KEY,STANDARD_COST_REVS_DATETIME,TRANSACTION_SEQUENCE_ID_INT,BK_MRP_ORG_NAME,STANDARD_COST_AMOUNT 
       FROM $$COMREFVWDB.N_STANDARD_COST NSTC
        INNER JOIN(SELECT TRANSACTION_SEQUENCE_ID_INT,SUBSCRIPTION_PRODUCT_KEY
        FROM $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_F_NG
         /*UNION ALL
         SELECT
         TRANSACTION_SEQUENCE_ID_INT,SUBSCRIPTION_PRODUCT_KEY
         FROM NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_R*/) WIXSB
        ON WIXSB.SUBSCRIPTION_PRODUCT_KEY=NSTC.ITEM_KEY
        WHERE NSTC.BK_MRP_ORG_NAME = 'GLOBAL ORGANIZATION'
        QUALIFY ROW_NUMBER () OVER (PARTITION BY  WIXSB.TRANSACTION_SEQUENCE_ID_INT,  NSTC.ITEM_KEY     
        ORDER BY NSTC.STANDARD_COST_REVS_DATETIME DESC )  = 1 ) NSC
       ON 
       NSC.ITEM_KEY  =W_DRVD_XAAS.SUBSCRIPTION_PRODUCT_KEY 
       AND NSC.TRANSACTION_SEQUENCE_ID_INT = W_DRVD_XAAS.TRANSACTION_SEQUENCE_ID_INT /* OA-Q1FY16 */
       AND NSC.STANDARD_COST_REVS_DATETIME <= NXSSIS.ORDER_CREATED_DT
       /* Added the below join as part of OA-Q1FY16*/
       LEFT OUTER JOIN $$NRTNCRVWDB.N_XAAS_SO_SBSCR_ATRB_NG_NRT_TV NXSSA
       ON NXSSA.BK_OFFER_ATTRIBUTION_ID_INT = W_DRVD_XAAS.SK_OFFER_ATTRIBUTION_ID_INT
       AND NXSSA.PARENT_SO_SBSCRP_ITMSLSTRX_KEY = W_DRVD_XAAS.DV_SO_SBSCRPTN_ITM_SLS_TRX_KEY
       AND NXSSA.END_TV_DTM=CAST('3500-01-01 00:00:00' AS TIMESTAMP(0))

   /* Jun2018 Release - Start */  /* reference joins/tables in SW_ANNUALIZE_XAAS - NBM logic */
	/*INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL ON NXSSIS.MINOR_LN_EXAAS_SUBSCR_SOL_KEY =NSOL.SALES_ORDER_LINE_KEY AND NSOL.END_TV_DATETIME='3500-01-01 00:00:00' */
	INNER JOIN $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT NSOLNRT ON NXSSIS.MINOR_LN_EXAAS_SUBSCR_SOL_KEY =NSOLNRT.SALES_ORDER_LINE_KEY /* AND NSOLNRT.END_TV_DATETIME='3500-01-01 00:00:00' */
	INNER JOIN $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR CSM  ON  ( W_DRVD_XAAS.PROCESS_DATE  - FULFILLMENT_TERM_DAYS )  = CSM.CALENDAR_DATE 
	LEFT OUTER JOIN 
		 (SELECT SKU,INVENTORY_ITEM_ID,DURATION,BIZ_DEF_TERM FROM $$ETLVWDB.EL_CG1_XXCFIR_PROD_SUBSCR_SKU WHERE END_DATE IS NULL)EL 
		  ON NP.BK_PRODUCT_ID=EL.SKU
    INNER  JOIN ( SELECT 
		DV_FISCAL_YEAR_QUARTER_NUM_INT, PRODUCT_KEY, BK_PRDT_ALLCTN_METRIC_CD, BK_PRDT_ALLCTN_CLSFCTN_CD, ALLOCATION_PCT 
		FROM $$COMREFVWDB.N_PRDT_TO_PRDT_CLSFTN_ALCTN  WHERE  BK_PRDT_ALLCTN_METRIC_CD IN ('BOOKINGS','UNKNOWN')
		GROUP BY 1,2,3,4,5
		QUALIFY RANK()  OVER (PARTITION BY DV_FISCAL_YEAR_QUARTER_NUM_INT,PRODUCT_KEY, BK_PRDT_ALLCTN_METRIC_CD  
			ORDER BY  BK_PRDT_ALLCTN_CLSFCTN_CD DESC  ) = 1
	  ) ALCTN  --should this ALCTN be LEFT JOIN .. suresh
    ON W_DRVD_XAAS.SUBSCRIPTION_PRODUCT_KEY= ALCTN.PRODUCT_KEY AND RFMY.FISCAL_YEAR_QUARTER_NUMBER_INT=ALCTN.DV_FISCAL_YEAR_QUARTER_NUM_INT

  INNER JOIN $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR CEM  ON  CEM.CALENDAR_DATE =
  CASE WHEN NXSSIS.BK_SALES_ORDER_TYPE_CD IN ('MODIFY') AND NXSSIS.BK_SALES_ORDER_SELL_TYPE_CD IN ('UPSELL')
        THEN ( W_DRVD_XAAS.PROCESS_DATE  + ( ORIG_SUB_DAYS - NXSSIS.FULFILLMENT_TERM_DAYS_CNT) ) 
        ELSE ( W_DRVD_XAAS.PROCESS_DATE  + ( ORIG_SUB_DAYS - FULFILLMENT_TERM_DAYS) )
        END

   LEFT OUTER JOIN $$FINLGLVWDB.N_FCM_DEAL_MAPPING  FDM ON NXSSIS.BK_DEAL_ID = FDM.BK_DEAL_ID AND RFMY.FISCAL_YEAR_MONTH_INT = FDM.BK_DV_FISCAL_YEAR_MTH_NUM_INT 
		
   LEFT OUTER JOIN $$STGDB.WI_ATCCV_EXCLUDE_TRX EX 
   ON EX.EXCLUDE_VALUE =  (  
       CASE WHEN EX.EXCLUDE_REF_COLUMN_1 = 'RU_BK_PRODUCT_FAMILY_ID' THEN NP.RU_BK_PRODUCT_FAMILY_ID 
                          WHEN EXCLUDE_REF_COLUMN_1 = 'ADJUSTMENT_CODE'  THEN 'UNKNOWN' -- defaulted in XAAS in MT-DRVD logic ,'UNKNOWN'  AS ADJUSTMENT_CODE 
                          WHEN EXCLUDE_REF_COLUMN_1 = 'BK_PRODUCT_ID'  THEN NP.BK_PRODUCT_ID      
        WHEN EXCLUDE_REF_COLUMN_1='BK_BUSINESS_UNIT_ID' THEN NPF.BK_BUSINESS_UNIT_ID
   END ) 

	/* Jun2018 Release - End */

   ) W_XAAS
) WITH DATA PRIMARY INDEX(BOOKINGS_MEASURE_KEY,PRODUCT_KEY,SALES_TERRITORY_KEY) 
        ON COMMIT PRESERVE ROWS;
          
COLLECT STATISTICS COLUMN (BOOKINGS_MEASURE_KEY,PRODUCT_KEY,SALES_TERRITORY_KEY) ON V_W_XAAS_OUTER;
        
COLLECT STATISTICS COLUMN (BOOKINGS_MEASURE_KEY) ON V_W_XAAS_OUTER;


UPDATE MTDXBT
FROM 
$$NRTNCRVWDB.MT_DRVD_XAAS_BKGS_TRX_NG_NRT MTDXBT,
V_W_XAAS_OUTER W_XAAS_OUTER
SET
RU_SERVICE_CONTRACT_START_DTM = W_XAAS_OUTER.RU_SERVICE_CONTRACT_START_DTM
,RU_SERVICE_CONTRACT_END_DTM = W_XAAS_OUTER.RU_SERVICE_CONTRACT_END_DTM
,DV_CONTRACT_DURATION = W_XAAS_OUTER.DV_CONTRACT_DURATION
,DV_ANNUALIZED_FLG = W_XAAS_OUTER.DV_ANNUALIZED_FLG
,DV_ANNUALIZED_US_NET_AMT = W_XAAS_OUTER.DV_ANNUALIZED_US_NET_AMT
,DV_MULTIYEAR_US_NET_AMT = W_XAAS_OUTER.DV_MULTIYEAR_US_NET_AMT
WHERE 
W_XAAS_OUTER.BOOKINGS_MEASURE_KEY = MTDXBT.DRVD_XAAS_BKGS_KEY
AND ( MTDXBT.RU_SERVICE_CONTRACT_START_DTM <> W_XAAS_OUTER.RU_SERVICE_CONTRACT_START_DTM
	OR MTDXBT.RU_SERVICE_CONTRACT_END_DTM <> W_XAAS_OUTER.RU_SERVICE_CONTRACT_END_DTM
	OR MTDXBT.DV_CONTRACT_DURATION <> W_XAAS_OUTER.DV_CONTRACT_DURATION
	OR MTDXBT.DV_ANNUALIZED_FLG <> W_XAAS_OUTER.DV_ANNUALIZED_FLG
	OR MTDXBT.DV_ANNUALIZED_US_NET_AMT <> W_XAAS_OUTER.DV_ANNUALIZED_US_NET_AMT
	OR MTDXBT.DV_MULTIYEAR_US_NET_AMT <> W_XAAS_OUTER.DV_MULTIYEAR_US_NET_AMT
	)
;
/*AMY-Jun2018 - UPDATE for today's 'F' records using NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_F as driving table - End */

/* AMY-Jun2018 - UPDATE for today's 'R' records using NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_R as driving table - Start */

UPDATE MTDXBT
FROM 
$$NRTNCRVWDB.MT_DRVD_XAAS_BKGS_TRX_NG_NRT MTDXBT,
$$ETLVWDB.SM_XAAS_BKG_TRX_NRT_NG SMXBTRX,
(SELECT
    WIR.TRANSACTION_SEQUENCE_ID_INT
	,WIR.RU_SERVICE_CONTRACT_START_DTM 
	,WIR.RU_SERVICE_CONTRACT_END_DTM
	,WIR.DV_CONTRACT_DURATION 
	,WIR.DV_ANNUALIZED_FLG 
	,WIR.DV_ANNUALIZED_US_NET_AMT 
	,WIR.DV_MULTIYEAR_US_NET_AMT 
FROM $$NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_R_NG  WIR
) W_XAAS_OUTER
SET
RU_SERVICE_CONTRACT_START_DTM = W_XAAS_OUTER.RU_SERVICE_CONTRACT_START_DTM
,RU_SERVICE_CONTRACT_END_DTM = W_XAAS_OUTER.RU_SERVICE_CONTRACT_END_DTM
,DV_CONTRACT_DURATION = W_XAAS_OUTER.DV_CONTRACT_DURATION
,DV_ANNUALIZED_FLG = W_XAAS_OUTER.DV_ANNUALIZED_FLG
,DV_ANNUALIZED_US_NET_AMT = W_XAAS_OUTER.DV_ANNUALIZED_US_NET_AMT
,DV_MULTIYEAR_US_NET_AMT = W_XAAS_OUTER.DV_MULTIYEAR_US_NET_AMT
WHERE 
SMXBTRX.TRANSACTION_SEQUENCE_ID_INT = W_XAAS_OUTER.TRANSACTION_SEQUENCE_ID_INT
AND SMXBTRX.DRVD_XAAS_BKG_TRX_KEY = MTDXBT.DRVD_XAAS_BKGS_KEY
AND ( MTDXBT.RU_SERVICE_CONTRACT_START_DTM <> W_XAAS_OUTER.RU_SERVICE_CONTRACT_START_DTM
	OR MTDXBT.RU_SERVICE_CONTRACT_END_DTM <> W_XAAS_OUTER.RU_SERVICE_CONTRACT_END_DTM
	OR MTDXBT.DV_CONTRACT_DURATION <> W_XAAS_OUTER.DV_CONTRACT_DURATION
	OR MTDXBT.DV_ANNUALIZED_FLG <> W_XAAS_OUTER.DV_ANNUALIZED_FLG
	OR MTDXBT.DV_ANNUALIZED_US_NET_AMT <> W_XAAS_OUTER.DV_ANNUALIZED_US_NET_AMT
	OR MTDXBT.DV_MULTIYEAR_US_NET_AMT <> W_XAAS_OUTER.DV_MULTIYEAR_US_NET_AMT
	)
;
/* AMY-Jun2018 - UPDATE for today's 'R' records using NRTSTGDB.WI_DRVD_XAAS_BKGS_TRX_NRT_R as driving table - End */

  
  UPDATE $$ETLVWDB.DW_JOB_STREAMS_NRT DJS
  SET
  LAST_EXTRACT_DATE = (SELECT COALESCE(MAX(EDW_UPDATE_DTM),CAST('1900-01-01 00:00:00' AS TIMESTAMP(0)))  FROM $$NRTNCRVWDB.N_XAAS_SCA_SLS_TRX_NG_NRT)
  WHERE
  DJS.JOB_STREAM_ID= 'wf_N_XAAS_SLSCR_ASN_SLSTRX_NRT_NG';
    
  UPDATE $$ETLVWDB.DW_JOB_STREAMS_NRT DJS
  SET
  LAST_EXTRACT_DATE = (SELECT COALESCE(MAX(EDW_UPDATE_DTM),CAST('1900-01-01 00:00:00' AS TIMESTAMP(0)))  FROM $$NRTNCRVWDB.N_XAAS_SO_SBSCR_ITM_SLSTRX_NRT)
  WHERE
  DJS.JOB_STREAM_ID= 'wf_N_XAAS_SO_SBSCR_ITM_SLS_TRX_NRT_NG';
  UPDATE $$ETLVWDB.DW_JOB_STREAMS_NRT DJS
  SET
  LAST_EXTRACT_DATE = (SELECT COALESCE(MAX(EDW_UPDATE_DTM),CAST('1900-01-01 00:00:00' AS TIMESTAMP(0)))  FROM $$NRTNCRVWDB.N_XAAS_SO_SBSCR_ATRB_NG_NRT WHERE PARENT_SO_SBSCRP_ITMSLSTRX_KEY>0)
  WHERE
  DJS.JOB_STREAM_ID= 'wf_N_XAAS_SO_SBSCRPTN_ATTRBTN_NRT_NG';