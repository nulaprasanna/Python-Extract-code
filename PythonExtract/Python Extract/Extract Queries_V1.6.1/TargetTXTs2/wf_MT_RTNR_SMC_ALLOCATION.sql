


Source1 Name : SQ_MT_SLS_MOTION_ATTRIBUTION


Pre SQL : 



SQL Query : 
SELECT 
	SALES_ORDER_LINE_KEY,
	DV_ENTERPRISE_INV_SKU_ID,
	SALES_MOTION_CD,
	DV_ALLOCATION_PCT,
	DV_SERVICE_CATEGORY_CD,  
	START_TV_DTM,
	END_TV_DTM,
	SALES_MOTION_TIMING_CD,
	DV_SOURCE_TYPE, /* DV SOURCE TYPE addition to accommodate SQ */
	RENEWAL_GAP_DAYS
FROM $$SLSORDVWDB.MT_SLS_MOTION_ATTRIBUTION
WHERE END_TV_DTM = '3500-01-01 00:00:00'  
  AND DV_SOURCE_TYPE IN ('RTNR', 'SQ' )
  AND BUNDLE_FLG='N'
  AND SALES_ORDER_LINE_KEY IN ( SELECT SALES_ORDER_LINE_KEY 
								 FROM $$SLSORDVWDB.MT_SLS_MOTION_ATTRIBUTION
                                WHERE EDW_UPDATE_DTM > '$$LastExtractDate' 
                                  AND DV_SOURCE_TYPE IN ( 'RTNR', 'SQ' )
								  AND BUNDLE_FLG='N'
                              )


Post SQL : 



Target1 Name : WI_MT_SMC_ATTRIBUTION_INCR


Pre SQL : 
DELETE $$STGDB.WI_MT_SMC_ATTRIBUTION_INCR ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_MT_SMC_ATTRIBUTION_INCR','D');


Source2 Name : SQ_WI_MT_XAAS_SMC_ATTRIBUTION_INC


Pre SQL : 



SQL Query : 
SELECT 
	TRX.MINOR_LN_EXAAS_SUBSCR_SOL_KEY AS SALES_ORDER_LINE_KEY,
	DV_ENTERPRISE_INV_SKU_ID,
	MT.SALES_MOTION_CD,
	DV_ALLOCATION_PCT,
	MT.DV_SERVICE_CATEGORY_CD,  
	START_TV_DTM,
	END_TV_DTM,
	SALES_MOTION_TIMING_CD,
	DV_SOURCE_TYPE, /* DV SOURCE TYPE addition to accommodate SQ */
	RENEWAL_GAP_DAYS
FROM $$SLSORDVWDB.MT_XAAS_SLS_MOTION_ATTRIB MT
INNER JOIN $$SLSORDVWDB.N_XAAS_SO_SBSCR_ITM_SLS_TRX TRX
ON MT.SO_SBSCRPTN_ITM_SLS_TRX_KEY=TRX.SO_SBSCRPTN_ITM_SLS_TRX_KEY
WHERE MT.END_TV_DTM = '3500-01-01 00:00:00'
AND TRX.MINOR_LN_EXAAS_SUBSCR_SOL_KEY>0
AND MT.BUNDLE_FLG='N'
--AND DV_SOURCE_TYPE IN ('RTNR')
  AND MT.SO_SBSCRPTN_ITM_SLS_TRX_KEY IN ( SELECT SO_SBSCRPTN_ITM_SLS_TRX_KEY 
								 FROM $$SLSORDVWDB.MT_XAAS_SLS_MOTION_ATTRIB
                                WHERE EDW_UPDATE_DTM > '$$LastExtractDate'
								AND BUNDLE_FLG='N'
								--AND DV_SOURCE_TYPE IN ('RTNR')
								GROUP BY 1
                              )
GROUP BY 1,2,3,4,5,6,7,8,9,10


Post SQL : 



Target2 Name : WI_MT_XAAS_SMC_ATTRIBUTION_INC1


Pre SQL : 
DELETE FROM $$STGDB.WI_MT_XAAS_SMC_ATTRIBUTION_INC ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_MT_XAAS_SMC_ATTRIBUTION_INC','D');


Source3 Name : SQ_WI_MT_SMC_ATTRIBUTION_INCR


Pre SQL : 



SQL Query : 
SELECT
SMC_FINAL.SALES_ORDER_LINE_KEY,
SMC_FINAL.SALES_MOTION_CD,
SMC_FINAL.DV_ALLOCATION_PCT/SMC_FINAL.SUM_SPLIT AS DV_ALLOCATION_PCT,
SMC_FINAL.DV_SERVICE_CATEGORY_CD,
SMC_FINAL.START_TV_DTM , 
SMC_FINAL.END_TV_DTM,
SMC_FINAL.SALES_MOTION_TIMING_CD SALES_MOTION_TIMING_CD,
SMC_FINAL.DV_SOURCE_TYPE DV_SOURCE_TYPE,
SMC_FINAL.RENEWAL_GAP_DAYS
FROM (SELECT 
SMC.SALES_ORDER_LINE_KEY,
SMC.SALES_MOTION_CD,
SUM(SMC.DV_ALLOCATION_PCT ) AS DV_ALLOCATION_PCT,
SMC.SUM_SPLIT ,
smc.DV_SERVICE_CATEGORY_CD,
SMC.START_TV_DTM , 
SMC.END_TV_DTM,
SMC.SALES_MOTION_TIMING_CD SALES_MOTION_TIMING_CD,
SMC.DV_SOURCE_TYPE DV_SOURCE_TYPE,/* DV SOURCE TYPE ADDITION to accommodate SQ */
SMC.RENEWAL_GAP_DAYS
FROM
(
/* For RTR data */
SELECT 
SALES_ORDER_LINE_KEY,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
CASE WHEN SUM_SPLIT=0 THEN 1 ELSE SUM_SPLIT END AS SUM_SPLIT,
DV_SERVICE_CATEGORY_CD,
START_TV_DTM,
END_TV_DTM,
SALES_MOTION_TIMING_CD,
CAST('RTNR' AS VARCHAR(10)) AS DV_SOURCE_TYPE,
RENEWAL_GAP_DAYS
FROM 
(SELECT
RTR.SALES_ORDER_LINE_KEY,
RTR.SALES_MOTION_CD,
RTR.ATTR_PCT DV_ALLOCATION_PCT,
SUM(RTR.ATTR_PCT) OVER(PARTITION BY RTR.SALES_ORDER_LINE_KEY) SUM_SPLIT,
MAX(RTR.START_TV_DTM) OVER(PARTITION BY RTR.SALES_ORDER_LINE_KEY) START_TV_DTM, /* Changed logic as part of May 2nd release */
CAST('3500-01-01 00:00:00' AS TIMESTAMP(0)) AS END_TV_DTM,
RTR.ITEM_CATEGORY_NAME AS DV_SERVICE_CATEGORY_CD,
RTR.SALES_MOTION_TIMING_CD,
DV_RENEWAL_GAP_DAYS_CNT AS RENEWAL_GAP_DAYS
FROM
$$SLSORDVWDB.N_ATTR_PRDT_NEW_RNWL_ACV_TV RTR
WHERE END_TV_DTM = '3500-01-01 00:00:00'
AND RTR.ITEM_CATEGORY_NAME NOT IN ( 'Billing', 'FLEXIBLE CONSUMPTION MODEL' )
AND SALES_ORDER_LINE_KEY IN ( SEL SALES_ORDER_LINE_KEY FROM $$STGDB.WI_MT_SMC_ATTRIBUTION_INCR INCR WHERE DV_SOURCE_TYPE = 'RTNR' )
) SMC1

/* Below for SQ data */
UNION ALL

SELECT 
SALES_ORDER_LINE_KEY,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
CASE WHEN SUM_SPLIT=0 THEN 1 ELSE SUM_SPLIT END AS SUM_SPLIT,
DV_SERVICE_CATEGORY_CD,
START_TV_DTM,
END_TV_DTM,
SALES_MOTION_TIMING_CD,
CAST( 'SQ' AS VARCHAR(10)) AS DV_SOURCE_TYPE,
RENEWAL_GAP_DAYS
FROM 
(SELECT
    SALES_ORDER_LINE_KEY,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY SALES_ORDER_LINE_KEY) SUM_SPLIT,
DV_SERVICE_CATEGORY_CD,  
MAX(START_TV_DTM) OVER(PARTITION BY SALES_ORDER_LINE_KEY) START_TV_DTM, /* Changed logic as part of May 2nd release */
    MAX(END_TV_DTM) OVER(PARTITION BY SALES_ORDER_LINE_KEY) END_TV_DTM,
SALES_MOTION_TIMING_CD,
RENEWAL_GAP_DAYS
FROM
$$STGDB.WI_MT_SMC_ATTRIBUTION_INCR INCR
WHERE INCR.DV_SOURCE_TYPE = 'SQ'
) SMC1
) SMC
GROUP BY 1,2,4,5,6,7,8,9,10
) SMC_FINAL


Post SQL : 



Target3 Name : WI_RTNR_SMC_ALLOCATION


Pre SQL : 
DELETE FROM $$STGDB.WI_RTNR_SMC_ALLOCATION ALL;


Post SQL : 
CREATE MULTISET VOLATILE TABLE WI_ZERO_SPLIT_LINES AS (
SEL SALES_ORDER_LINE_KEY, SUM(DV_ALLOCATION_PCT) SUM_SPLIT, COUNT(*) REC_CNT
 FROM $$STGDB.WI_RTNR_SMC_ALLOCATION
 WHERE END_TV_DTM > CURRENT_TIMESTAMP(0)
 GROUP BY 1 HAVING ROUND(SUM_SPLIT, 3) = 0.00000
 ) WITH DATA ON COMMIT PRESERVE ROWS ;
 
UPDATE MT FROM 
 $$STGDB.WI_RTNR_SMC_ALLOCATION MT,
 ( SEL  WI.SALES_ORDER_LINE_KEY,
 SALES_MOTION_CD,
 DV_ALLOCATION_PCT,
 CAST( 1.000000/REC_CNT AS DECIMAL(18,6)) DV_ALLOCATION_PCT1
 FROM $$STGDB.WI_RTNR_SMC_ALLOCATION WI
 INNER JOIN WI_ZERO_SPLIT_LINES ZERO
 ON WI.SALES_ORDER_LINE_KEY = ZERO.SALES_ORDER_LINE_KEY
 WHERE WI.END_TV_DTM > CURRENT_TIMESTAMP(0)
 ) WI
 SET DV_ALLOCATION_PCT = WI.DV_ALLOCATION_PCT1
 WHERE MT.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY
 AND MT.SALES_MOTION_CD = WI.SALES_MOTION_CD
 AND MT.END_TV_DTM > CURRENT_TIMESTAMP(0)
 AND MT.DV_ALLOCATION_PCT <> WI.DV_ALLOCATION_PCT1 ;

CALL COLLECT_STATS_WRAP('$$STGDB','WI_RTNR_SMC_ALLOCATION','D');


Source4 Name : SQ_WI_XAAS_RTNR_SMC_ALLOCATION


Pre SQL : 



SQL Query : 
SELECT
SMC_FINAL.SALES_ORDER_LINE_KEY,
SMC_FINAL.SALES_MOTION_CD,
SMC_FINAL.DV_ALLOCATION_PCT/SMC_FINAL.SUM_SPLIT AS DV_ALLOCATION_PCT,
SMC_FINAL.DV_SERVICE_CATEGORY_CD,
SMC_FINAL.START_TV_DTM , 
SMC_FINAL.END_TV_DTM,
SMC_FINAL.SALES_MOTION_TIMING_CD SALES_MOTION_TIMING_CD,
SMC_FINAL.DV_SOURCE_TYPE DV_SOURCE_TYPE,
RENEWAL_GAP_DAYS
FROM (SELECT 
SMC.SALES_ORDER_LINE_KEY,
SMC.SALES_MOTION_CD,
SUM(SMC.DV_ALLOCATION_PCT ) AS DV_ALLOCATION_PCT,
SMC.SUM_SPLIT ,
smc.DV_SERVICE_CATEGORY_CD,
SMC.START_TV_DTM , 
SMC.END_TV_DTM,
coalesce(SMC.SALES_MOTION_TIMING_CD,'UNKNOWN') SALES_MOTION_TIMING_CD,
SMC.DV_SOURCE_TYPE DV_SOURCE_TYPE,/* DV SOURCE TYPE ADDITION to accommodate SQ */
RENEWAL_GAP_DAYS
FROM
(
SELECT 
SALES_ORDER_LINE_KEY,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
CASE WHEN SUM_SPLIT=0 THEN 1 ELSE SUM_SPLIT END AS SUM_SPLIT,
DV_SERVICE_CATEGORY_CD,
START_TV_DTM,
END_TV_DTM,
SALES_MOTION_TIMING_CD,
CAST( 'RTNR' AS VARCHAR(10)) AS DV_SOURCE_TYPE,
RENEWAL_GAP_DAYS
FROM 
(SELECT
    SALES_ORDER_LINE_KEY,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY SALES_ORDER_LINE_KEY) SUM_SPLIT,
DV_SERVICE_CATEGORY_CD,  
MAX(START_TV_DTM) OVER(PARTITION BY SALES_ORDER_LINE_KEY) START_TV_DTM, /* Changed logic as part of May 2nd release */
    MAX(END_TV_DTM) OVER(PARTITION BY SALES_ORDER_LINE_KEY) END_TV_DTM,
SALES_MOTION_TIMING_CD,
RENEWAL_GAP_DAYS
FROM $$STGDB.WI_MT_XAAS_SMC_ATTRIBUTION_INC INCR
) SMC1
) SMC
GROUP BY 1,2,4,5,6,7,8,9,10
) SMC_FINAL


Post SQL : 



Target4 Name : WI_XAAS_RTNR_SMC_ALLOCATION1


Pre SQL : 
DELETE FROM $$STGDB.WI_XAAS_RTNR_SMC_ALLOCATION ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_XAAS_RTNR_SMC_ALLOCATION','D');


Source5 Name : SQ_WI_RTNR_SMC_ALLOCATION


Pre SQL : 



SQL Query : 
SELECT
    SALES_ORDER_LINE_KEY          
     ,SALES_MOTION_CD               
     ,DV_ALLOCATION_PCT 
	 ,DV_SERVICE_CATEGORY_CD	
     ,START_TV_DTM
     ,END_TV_DTM
     ,EDW_CREATE_DTM                
     ,EDW_CREATE_USER               
     ,EDW_UPDATE_DTM                
     ,USER AS EDW_UPDATE_USER   
     ,SALES_MOTION_TIMING_CD	 
	 ,DV_SOURCE_TYPE 
	 ,DV_TRX_TYPE
	 ,SS_CODE
	 ,RENEWAL_GAP_DAYS
FROM (
SELECT 
      WI.SALES_ORDER_LINE_KEY          
     ,WI.SALES_MOTION_CD               
     ,WI.DV_ALLOCATION_PCT 
	 ,WI.DV_SERVICE_CATEGORY_CD	
     ,WI.START_TV_DTM
     ,WI.END_TV_DTM
     ,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM                
     ,USER AS EDW_CREATE_USER               
     ,CURRENT_TIMESTAMP(0) EDW_UPDATE_DTM                
     ,USER AS EDW_UPDATE_USER   
     ,WI.SALES_MOTION_TIMING_CD	 
	 ,WI.DV_SOURCE_TYPE 
	 ,CAST('ERP' AS VARCHAR(10)) AS DV_TRX_TYPE
	 ,NSOL.SS_CODE
	 ,RENEWAL_GAP_DAYS
 FROM $$STGDB.WI_RTNR_SMC_ALLOCATION WI 
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
 ON WI.SALES_ORDER_LINE_KEY=NSOL.SALES_ORDER_LINE_KEY
 WHERE NOT EXISTS ( SELECT 1 FROM $$SLSORDVWDB.MT_RTNR_SMC_ALLOCATION EL
                     WHERE EL.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY 
                       AND EL.START_TV_DTM = WI.START_TV_DTM
                        AND DV_TRX_TYPE='ERP')
UNION ALL
SELECT 
     WI.SALES_ORDER_LINE_KEY          
     ,WI.SALES_MOTION_CD               
     ,WI.DV_ALLOCATION_PCT 
	 ,WI.DV_SERVICE_CATEGORY_CD	
     ,WI.START_TV_DTM
     ,WI.END_TV_DTM
     ,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM                
     ,USER AS EDW_CREATE_USER               
     ,CURRENT_TIMESTAMP(0) EDW_UPDATE_DTM                
     ,USER AS EDW_UPDATE_USER   
     ,WI.SALES_MOTION_TIMING_CD	 
	 ,WI.DV_SOURCE_TYPE 
	 ,CAST('XAAS' AS VARCHAR(10)) AS DV_TRX_TYPE
	 ,NSOL.SS_CODE
	 ,RENEWAL_GAP_DAYS
 FROM $$STGDB.WI_XAAS_RTNR_SMC_ALLOCATION WI
 INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
 ON WI.SALES_ORDER_LINE_KEY=NSOL.SALES_ORDER_LINE_KEY
 WHERE NOT EXISTS ( SELECT 1 FROM $$SLSORDVWDB.MT_RTNR_SMC_ALLOCATION EL
                     WHERE EL.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY 
                       AND EL.START_TV_DTM = WI.START_TV_DTM
					   AND EL.DV_TRX_TYPE='XAAS')
					   )XAAS


Post SQL : 



Target5 Name : MT_RTNR_SMC_ALLOCATION


Pre SQL : 
UPDATE MT 
 FROM $$SLSORDVWDB.MT_RTNR_SMC_ALLOCATION MT,
 ( SELECT SALES_ORDER_LINE_KEY, MAX(START_TV_DTM) MAX_STRT_DTM
     FROM $$STGDB.WI_RTNR_SMC_ALLOCATION GROUP BY 1) WI
 SET END_TV_DTM = WI.MAX_STRT_DTM - INTERVAL '1' SECOND,
     EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0),
     EDW_UPDATE_USER = USER
 WHERE MT.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY
   AND MT.START_TV_DTM <> WI.MAX_STRT_DTM
   AND MT.DV_TRX_TYPE='ERP'
   AND MT.END_TV_DTM = '3500-01-01 00:00:00' ;

UPDATE MT 
 FROM $$SLSORDVWDB.MT_RTNR_SMC_ALLOCATION MT,
 ( SELECT SALES_ORDER_LINE_KEY, MAX(START_TV_DTM) MAX_STRT_DTM
     FROM $$STGDB.WI_XAAS_RTNR_SMC_ALLOCATION GROUP BY 1) WI
 SET END_TV_DTM = WI.MAX_STRT_DTM - INTERVAL '1' SECOND,
     EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0),
     EDW_UPDATE_USER = USER
 WHERE MT.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY
   AND MT.START_TV_DTM <> WI.MAX_STRT_DTM
   AND MT.DV_TRX_TYPE='XAAS'
   AND MT.END_TV_DTM = '3500-01-01 00:00:00' ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$SLSORDDB','MT_RTNR_SMC_ALLOCATION','D');