


Source1 Name : SQ_MT_SLS_ADJ_SLS_MOTION_ATTRIB


Pre SQL : 



SQL Query : 
SELECT
  MANUAL_TRX_KEY
     , MT.SALES_ORDER_LINE_KEY          
  , MT.DV_ENTERPRISE_INV_SKU_ID
  , MT.SALES_MOTION_CD               
  , MT.DV_ALLOCATION_PCT             
  , MT.DV_SERVICE_CATEGORY_CD        
  , MT.DV_OA_FLG                     
  , MT.START_TV_DTM                   
  , MT.END_TV_DTM               
   ,'SLS_ADJ' AS DV_TRX_TYPE      
  , MT.DV_SOURCE_TYPE 
      ,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM                
  ,USER AS EDW_CREATE_USER               
  ,CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM                
  ,USER AS EDW_UPDATE_USER
  ,MT.SALES_MOTION_TIMING_CD   
 FROM $$SLSORDVWDB.MT_SLS_ADJ_SLS_MOTION_ATTRIB MT
 WHERE MT.EDW_UPDATE_DTM > '$$LastExtractDate'
 AND MT.END_TV_DTM = '3500-01-01 00:00:00'


Post SQL : 



Target1 Name : WI_SLS_MOTION_ATTRIB_SLSADJ


Pre SQL : 
DELETE FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_SLS_MOTION_ATTRIB_SLSADJ','D');


Source2 Name : SQ_SM_BKG_SLS_MOTION_ATTRIBUTION


Pre SQL : 



SQL Query : 
SELECT
SM_MAX.MAX_SLS_MOTION_ATTRIB_KEY + ROW_NUMBER() OVER (ORDER BY DV_TRANSACTION_ID) AS 
SK_SALES_MOTION_ATTRIB_KEY 
,DV_TRANSACTION_ID          
,DV_TRX_TYPE                                   
,DV_ENTERPRISE_INV_SKU_ID
,SK_OFFER_ATTRIBUTION_ID_INT
,SALES_ORDER_LINE_KEY
,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM   
,USER AS EDW_CREATE_USER     
FROM
(
SELECT DISTINCT
MANUAL_TRX_KEY AS DV_TRANSACTION_ID
,'SLS_ADJ' AS DV_TRX_TYPE
,DV_ENTERPRISE_INV_SKU_ID
,-9999 AS SK_OFFER_ATTRIBUTION_ID_INT
,-7777 AS SALES_ORDER_LINE_KEY
FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
WHERE NOT EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 )  /* Added to separate AR rebates related SM generation in next pipeline */
) SRC
,(SELECT COALESCE(MAX(SK_SALES_MOTION_ATTRIB_KEY),0) MAX_SLS_MOTION_ATTRIB_KEY 
    FROM $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION) SM_MAX                  
WHERE NOT EXISTS( SELECT 1 FROM $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
	WHERE SRC.DV_TRANSACTION_ID = SM.DV_TRANSACTION_ID
	  AND SRC.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
	  AND SRC.DV_TRX_TYPE = SM.DV_TRX_TYPE
	  AND SRC.SK_OFFER_ATTRIBUTION_ID_INT = SM.SK_OFFER_ATTRIBUTION_ID_INT
	  AND SRC.SALES_ORDER_LINE_KEY = SM.SALES_ORDER_LINE_KEY)


Post SQL : 



Target2 Name : SM_BKG_SLS_MOTION_ATTRIBUTION1


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$TRANSLATIONDB','SM_BKG_SLS_MOTION_ATTRIBUTION','D');

DELETE FROM $$STGDB.WI_MT_BKG_SPLIT_CHECK WHERE DV_TRX_TYPE = 'SLS_ADJ' ;

INSERT INTO $$STGDB.WI_MT_BKG_SPLIT_CHECK
SELECT 
SM.SK_SALES_MOTION_ATTRIB_KEY SK_SALES_MOTION_ATTRIB_KEY,
WI.DV_TRX_TYPE,
SUM(DV_ALLOCATION_PCT) DV_ALLOCATION_PCT_SUM
FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
  ON WI.MANUAL_TRX_KEY = SM.DV_TRANSACTION_ID
  AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE= SM.DV_TRX_TYPE
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
  ON WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
  AND CAST(NSOL.END_TV_DATETIME AS DATE) =  CAST( '3500-01-01' AS DATE) 
  AND NSOL.SS_CODE = 'CG'
WHERE NOT EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 )  /* Added to separate AR rebates related SM generation in next pipeline */
GROUP BY 1,2 HAVING ROUND(SUM(DV_ALLOCATION_PCT),4) <> 1.0000 ;

COLLECT STATS ON $$STGDB.WI_MT_BKG_SPLIT_CHECK ;

DELETE FROM $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB EX
WHERE EXISTS ( SEL 1 FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
				WHERE WI.MANUAL_TRX_KEY = EX.DV_TRANSACTION_ID
					AND WI.DV_ENTERPRISE_INV_SKU_ID = EX.DV_ENTERPRISE_INV_SKU_ID
					AND WI.DV_TRX_TYPE= EX.DV_TRX_TYPE
			  ) ;

INSERT INTO $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB
SELECT
SM.SK_SALES_MOTION_ATTRIB_KEY    
, CASE WHEN WI.SALES_ORDER_LINE_KEY= -8888 THEN RANDOM(1005000,1006800)*-1 WHEN WI.SALES_ORDER_LINE_KEY= -9999 THEN RANDOM(1000000,1001800)*-1 WHEN WI.SALES_ORDER_LINE_KEY= -7777 THEN RANDOM(1010000,1011800)*-1 WHEN WI.SALES_ORDER_LINE_KEY=-6666 THEN RANDOM(1015000,1016800)*-1 ELSE WI.SALES_ORDER_LINE_KEY END SALES_ORDER_LINE_KEY                       
, WI.MANUAL_TRX_KEY AS DV_TRANSACTION_ID             
, SM.DV_TRX_TYPE                   
, WI.SALES_MOTION_CD               
, WI.START_TV_DTM                   
, WI.END_TV_DTM                     
, WI.DV_ENTERPRISE_INV_SKU_ID      
, WI.DV_ALLOCATION_PCT             
, WI.DV_SERVICE_CATEGORY_CD        
, WI.DV_OA_FLG      
, WI.DV_SOURCE_TYPE AS DV_SOURCE_TYPE  
, 'UNKNOWN' AS AS_ARCHITECTURE_NAME
, 'UNKNOWN' AS TECHNOLOGY_GROUP_ID
, 'UNKNOWN' AS ATTR_PRDT_OFFER_TYPE_NAME
, 'UNK' AS AS_TS_CODE
, -999 AS SK_RENEW_CONTRACT_LINE_ID  
, -999 AS SK_AS_PARENT_INVENTORY_ITEM_ID
, -9999 AS SK_OFFER_ATTRIBUTION_ID_INT   
, USER AS EDW_UPDATE_USER          
, CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM                
, CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM                
, USER AS EDW_CREATE_USER     
, COALESCE(CASE WHEN NSOL.SALES_ORDER_KEY= -8888 THEN RANDOM(1005000,1006800)*-1 WHEN NSOL.SALES_ORDER_KEY= -9999 THEN RANDOM(1000000,1001800)*-1 WHEN NSOL.SALES_ORDER_KEY= -7777 THEN RANDOM(1010000,1011800)*-1 WHEN NSOL.SALES_ORDER_KEY=-6666 THEN RANDOM(1015000,1016800)*-1 ELSE NSOL.SALES_ORDER_KEY  END, RANDOM(1010000,1011800)*-1) AS SALES_ORDER_KEY
,WI.DV_ENTERPRISE_INV_SKU_ID AS SRC_ENTERPRISE_INV_SKU_ID
, 'UNKNOWN' AS PRODUCT_CLASS
, -999 AS TRANSACTION_CR_PARTY_KEY
, -999 AS HQ_CR_PRTY_KEY
, 'UNKNOWN' AS RENEWAL_REF_ID
, 'UNKNOWN' AS RENEWAL_REF_CD
, 'UNKNOWN' AS SMR_TAGGING_FAILURE_RSN_CD
, WI.SALES_MOTION_TIMING_CD
,'UNKNOWN' AS MANUAL_OVERRIDE_ROLE
,-999 AS REQUESTING_CSCO_WRKR_PRTY_KEY
,'UNKNOWN' AS SLS_MTN_CORRECTION_CASE_NUM
,'UNKNOWN' AS SLS_MTN_CORRECTION_CMNT
FROM
$$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
  ON WI.MANUAL_TRX_KEY = SM.DV_TRANSACTION_ID
  AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE= SM.DV_TRX_TYPE
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
  ON WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
  AND CAST(NSOL.END_TV_DATETIME AS DATE) =  CAST( '3500-01-01' AS DATE) 
  AND NSOL.SS_CODE = 'CG'
WHERE NOT EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 )  /* Added to separate AR rebates related SM generation in next pipeline */
AND EXISTS ( SEL 1 FROM $$STGDB.WI_MT_BKG_SPLIT_CHECK CHK
                   WHERE SM.SK_SALES_MOTION_ATTRIB_KEY = CHK.SK_SALES_MOTION_ATTRIB_KEY 
			) ;

COLLECT STATS ON $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB;

DELETE FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
WHERE EXISTS ( SEL 1 FROM $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB EX
					WHERE WI.MANUAL_TRX_KEY = EX.DV_TRANSACTION_ID
					AND WI.DV_ENTERPRISE_INV_SKU_ID = EX.DV_ENTERPRISE_INV_SKU_ID
					AND WI.DV_TRX_TYPE= EX.DV_TRX_TYPE
             ) ;


Source3 Name : SQ_SM_BKG_SLS_MOTION_ATTRIBUTION1


Pre SQL : 



SQL Query : 
SELECT
SM_MAX.MAX_SLS_MOTION_ATTRIB_KEY + ROW_NUMBER() OVER (ORDER BY DV_TRANSACTION_ID) AS 
SK_SALES_MOTION_ATTRIB_KEY 
,DV_TRANSACTION_ID          
,DV_TRX_TYPE                                   
,DV_ENTERPRISE_INV_SKU_ID
,SK_OFFER_ATTRIBUTION_ID_INT
,SALES_ORDER_LINE_KEY
,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM
,USER AS EDW_CREATE_USER
FROM
(
SELECT DISTINCT
MANUAL_TRX_KEY AS DV_TRANSACTION_ID
,'SLS_ADJ' AS DV_TRX_TYPE
,DV_ENTERPRISE_INV_SKU_ID
,-9999 AS SK_OFFER_ATTRIBUTION_ID_INT
,SALES_ORDER_LINE_KEY
FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
WHERE EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 )  /* Added to separate AR rebates related SM generation HERE */
)SRC
,(SELECT COALESCE(MAX(SK_SALES_MOTION_ATTRIB_KEY),0) MAX_SLS_MOTION_ATTRIB_KEY 
    FROM $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION) SM_MAX                  
WHERE NOT EXISTS( SELECT 1 FROM $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
	WHERE SRC.DV_TRANSACTION_ID = SM.DV_TRANSACTION_ID
	  AND SRC.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
	  AND SRC.DV_TRX_TYPE = SM.DV_TRX_TYPE
	  AND SRC.SK_OFFER_ATTRIBUTION_ID_INT = SM.SK_OFFER_ATTRIBUTION_ID_INT
	  AND SRC.SALES_ORDER_LINE_KEY = SM.SALES_ORDER_LINE_KEY)


Post SQL : 



Target3 Name : SM_BKG_SLS_MOTION_ATTRIBUTION2


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$TRANSLATIONDB','SM_BKG_SLS_MOTION_ATTRIBUTION','D');

INSERT INTO $$STGDB.WI_MT_BKG_SPLIT_CHECK
SELECT 
SM.SK_SALES_MOTION_ATTRIB_KEY SK_SALES_MOTION_ATTRIB_KEY,
WI.DV_TRX_TYPE,
SUM(DV_ALLOCATION_PCT) DV_ALLOCATION_PCT_SUM
FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
  ON WI.MANUAL_TRX_KEY = SM.DV_TRANSACTION_ID
  AND WI.SALES_ORDER_LINE_KEY = SM.SALES_ORDER_LINE_KEY
  AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE= SM.DV_TRX_TYPE
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
  ON WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
  AND CAST(NSOL.END_TV_DATETIME AS DATE) =  CAST( '3500-01-01' AS DATE) 
  AND NSOL.SS_CODE = 'CG'
WHERE EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 ) /* Added condition to process AR rebates separately HERE*/ 
GROUP BY 1,2 HAVING ROUND(SUM(DV_ALLOCATION_PCT),4) <> 1.0000 ;

COLLECT STATS ON $$STGDB.WI_MT_BKG_SPLIT_CHECK ;

DELETE FROM $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB EX
WHERE EXISTS ( SEL 1 FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
				WHERE WI.MANUAL_TRX_KEY = EX.DV_TRANSACTION_ID
				AND WI.SALES_ORDER_LINE_KEY = EX.SALES_ORDER_LINE_KEY
				AND WI.DV_ENTERPRISE_INV_SKU_ID = EX.DV_ENTERPRISE_INV_SKU_ID
				AND WI.DV_TRX_TYPE= EX.DV_TRX_TYPE
			  ) ;

INSERT INTO $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB
SELECT
SM.SK_SALES_MOTION_ATTRIB_KEY    
, CASE WHEN WI.SALES_ORDER_LINE_KEY= -8888 THEN RANDOM(1005000,1006800)*-1 WHEN WI.SALES_ORDER_LINE_KEY= -9999 THEN RANDOM(1000000,1001800)*-1 WHEN WI.SALES_ORDER_LINE_KEY= -7777 THEN RANDOM(1010000,1011800)*-1 WHEN WI.SALES_ORDER_LINE_KEY=-6666 THEN RANDOM(1015000,1016800)*-1 ELSE WI.SALES_ORDER_LINE_KEY END SALES_ORDER_LINE_KEY      
, WI.MANUAL_TRX_KEY AS DV_TRANSACTION_ID             
, SM.DV_TRX_TYPE                   
, WI.SALES_MOTION_CD               
, WI.START_TV_DTM                   
, WI.END_TV_DTM                     
, WI.DV_ENTERPRISE_INV_SKU_ID      
, WI.DV_ALLOCATION_PCT             
, WI.DV_SERVICE_CATEGORY_CD        
, WI.DV_OA_FLG      
, WI.DV_SOURCE_TYPE AS DV_SOURCE_TYPE  
, 'UNKNOWN' AS AS_ARCHITECTURE_NAME
, 'UNKNOWN' AS TECHNOLOGY_GROUP_ID
, 'UNKNOWN' AS ATTR_PRDT_OFFER_TYPE_NAME
, 'UNK' AS AS_TS_CODE
, -999 AS SK_RENEW_CONTRACT_LINE_ID  
, -999 AS SK_AS_PARENT_INVENTORY_ITEM_ID
, -9999 AS SK_OFFER_ATTRIBUTION_ID_INT   
, USER AS EDW_UPDATE_USER          
, CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM                
, CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM                
, USER AS EDW_CREATE_USER     
, COALESCE(CASE WHEN NSOL.SALES_ORDER_KEY= -8888 THEN RANDOM(1005000,1006800)*-1 WHEN NSOL.SALES_ORDER_KEY= -9999 THEN RANDOM(1000000,1001800)*-1 WHEN NSOL.SALES_ORDER_KEY= -7777 THEN RANDOM(1010000,1011800)*-1 WHEN NSOL.SALES_ORDER_KEY=-6666 THEN RANDOM(1015000,1016800)*-1 ELSE NSOL.SALES_ORDER_KEY  END, RANDOM(1010000,1011800)*-1) AS SALES_ORDER_KEY
,WI.DV_ENTERPRISE_INV_SKU_ID AS SRC_ENTERPRISE_INV_SKU_ID
, 'UNKNOWN' AS PRODUCT_CLASS
, -999 AS TRANSACTION_CR_PARTY_KEY
, -999 AS HQ_CR_PRTY_KEY
, 'UNKNOWN' AS RENEWAL_REF_ID
, 'UNKNOWN' AS RENEWAL_REF_CD
, 'UNKNOWN' AS SMR_TAGGING_FAILURE_RSN_CD
, WI.SALES_MOTION_TIMING_CD
,'UNKNOWN' AS MANUAL_OVERRIDE_ROLE
,-999 AS REQUESTING_CSCO_WRKR_PRTY_KEY
,'UNKNOWN' AS SLS_MTN_CORRECTION_CASE_NUM
,'UNKNOWN' AS SLS_MTN_CORRECTION_CMNT
FROM
$$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
  ON WI.MANUAL_TRX_KEY = SM.DV_TRANSACTION_ID
  AND WI.SALES_ORDER_LINE_KEY = SM.SALES_ORDER_LINE_KEY
  AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE= SM.DV_TRX_TYPE
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
  ON WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
  AND CAST(NSOL.END_TV_DATETIME AS DATE) =  CAST( '3500-01-01' AS DATE) 
  AND NSOL.SS_CODE = 'CG'
WHERE EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 ) /* Added condition to process AR rebates separately HERE*/ 
AND EXISTS ( SEL 1 FROM $$STGDB.WI_MT_BKG_SPLIT_CHECK CHK
                   WHERE SM.SK_SALES_MOTION_ATTRIB_KEY = CHK.SK_SALES_MOTION_ATTRIB_KEY 
			) ;
			
COLLECT STATS ON $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB;

DELETE FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
WHERE EXISTS ( SEL 1 FROM $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB EX
				WHERE WI.MANUAL_TRX_KEY = EX.DV_TRANSACTION_ID
				AND WI.SALES_ORDER_LINE_KEY = EX.SALES_ORDER_LINE_KEY
				AND WI.DV_ENTERPRISE_INV_SKU_ID = EX.DV_ENTERPRISE_INV_SKU_ID
				AND WI.DV_TRX_TYPE= EX.DV_TRX_TYPE
             ) ;


Source4 Name : SQ_MT_SLS_MOTION_ATTRIBUTION


Pre SQL : 



SQL Query : 
SELECT
SM.SK_SALES_MOTION_ATTRIB_KEY    
, CASE WHEN WI.SALES_ORDER_LINE_KEY= -8888 THEN RANDOM(1005000,1006800)*-1 WHEN WI.SALES_ORDER_LINE_KEY= -9999 THEN RANDOM(1000000,1001800)*-1 WHEN WI.SALES_ORDER_LINE_KEY= -7777 THEN RANDOM(1010000,1011800)*-1 WHEN WI.SALES_ORDER_LINE_KEY=-6666 THEN RANDOM(1015000,1016800)*-1 ELSE WI.SALES_ORDER_LINE_KEY END SALES_ORDER_LINE_KEY                       
, WI.MANUAL_TRX_KEY AS DV_TRANSACTION_ID             
, SM.DV_TRX_TYPE                   
, WI.SALES_MOTION_CD               
, WI.START_TV_DTM                   
, WI.END_TV_DTM                     
, WI.DV_ENTERPRISE_INV_SKU_ID      
, WI.DV_ALLOCATION_PCT             
, WI.DV_SERVICE_CATEGORY_CD        
, WI.DV_OA_FLG      
, WI.DV_SOURCE_TYPE AS DV_SOURCE_TYPE  
, 'UNKNOWN' AS AS_ARCHITECTURE_NAME
, 'UNKNOWN' AS TECHNOLOGY_GROUP_ID
, 'UNKNOWN' AS ATTR_PRDT_OFFER_TYPE_NAME
, 'UNK' AS AS_TS_CODE
, -999 AS SK_RENEW_CONTRACT_LINE_ID  
, -999 AS SK_AS_PARENT_INVENTORY_ITEM_ID
, -9999 AS SK_OFFER_ATTRIBUTION_ID_INT   
, USER AS EDW_UPDATE_USER          
, CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM                
, CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM                
, USER AS EDW_CREATE_USER     
, COALESCE(CASE WHEN NSOL.SALES_ORDER_KEY= -8888 THEN RANDOM(1005000,1006800)*-1 WHEN NSOL.SALES_ORDER_KEY= -9999 THEN RANDOM(1000000,1001800)*-1 WHEN NSOL.SALES_ORDER_KEY= -7777 THEN RANDOM(1010000,1011800)*-1 WHEN NSOL.SALES_ORDER_KEY=-6666 THEN RANDOM(1015000,1016800)*-1 ELSE NSOL.SALES_ORDER_KEY  END, RANDOM(1010000,1011800)*-1) AS SALES_ORDER_KEY
,WI.DV_ENTERPRISE_INV_SKU_ID AS SRC_ENTERPRISE_INV_SKU_ID
, 'UNKNOWN' AS PRODUCT_CLASS
, -999 AS TRANSACTION_CR_PARTY_KEY
, -999 AS HQ_CR_PRTY_KEY
, 'UNKNOWN' AS RENEWAL_REF_ID
, 'UNKNOWN' AS RENEWAL_REF_CD
, 'UNKNOWN' AS SMR_TAGGING_FAILURE_RSN_CD
, WI.SALES_MOTION_TIMING_CD
FROM
$$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
  ON WI.MANUAL_TRX_KEY = SM.DV_TRANSACTION_ID
  AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE= SM.DV_TRX_TYPE
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
  ON WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
  AND CAST(NSOL.END_TV_DATETIME AS DATE) =  CAST( '3500-01-01' AS DATE) 
  AND NSOL.SS_CODE = 'CG'
WHERE NOT EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 )  /* Added to separate AR rebates related SM generation in next pipeline */
AND NOT EXISTS ( SELECT 1 FROM 
                $$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT
                WHERE MT.DV_TRANSACTION_ID = WI.MANUAL_TRX_KEY
                AND MT.DV_ENTERPRISE_INV_SKU_ID = WI.DV_ENTERPRISE_INV_SKU_ID
                AND MT.START_TV_DTM = WI.START_TV_DTM
                )


Post SQL : 



Target4 Name : MT_BKG_SLS_MOTION_ATTRIBUTION


Pre SQL : 
UPDATE MT_BKG
FROM $$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT_BKG,
     ( SELECT MANUAL_TRX_KEY, DV_ENTERPRISE_INV_SKU_ID , MAX(START_TV_DTM) AS START_TV_DTM
        FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
		WHERE NOT EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 ) /* Added condition to process AR rebates separately in next pipeline*/
       GROUP BY 1,2
      ) WI        
SET END_TV_DTM = WI.START_TV_DTM - INTERVAL '1' SECOND,
    EDW_UPDATE_USER = USER,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE WI.MANUAL_TRX_KEY = MT_BKG.DV_TRANSACTION_ID
  AND WI.DV_ENTERPRISE_INV_SKU_ID = MT_BKG.DV_ENTERPRISE_INV_SKU_ID 
  AND MT_BKG.DV_TRX_TYPE = 'SLS_ADJ' 
  AND WI.START_TV_DTM <> MT_BKG.START_TV_DTM   
  AND MT_BKG.END_TV_DTM = '3500-01-01 00:00:00'  ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$SLSORDDB','MT_BKG_SLS_MOTION_ATTRIBUTION','D');


Source5 Name : SQ_MT_BKG_SLS_MOTION_ATTRIBUTION


Pre SQL : 



SQL Query : 
SELECT
SM.SK_SALES_MOTION_ATTRIB_KEY    
, CASE WHEN WI.SALES_ORDER_LINE_KEY= -8888 THEN RANDOM(1005000,1006800)*-1 WHEN WI.SALES_ORDER_LINE_KEY= -9999 THEN RANDOM(1000000,1001800)*-1 WHEN WI.SALES_ORDER_LINE_KEY= -7777 THEN RANDOM(1010000,1011800)*-1 WHEN WI.SALES_ORDER_LINE_KEY=-6666 THEN RANDOM(1015000,1016800)*-1 ELSE WI.SALES_ORDER_LINE_KEY END SALES_ORDER_LINE_KEY      
, WI.MANUAL_TRX_KEY AS DV_TRANSACTION_ID             
, SM.DV_TRX_TYPE                   
, WI.SALES_MOTION_CD               
, WI.START_TV_DTM                   
, WI.END_TV_DTM                     
, WI.DV_ENTERPRISE_INV_SKU_ID      
, WI.DV_ALLOCATION_PCT             
, WI.DV_SERVICE_CATEGORY_CD        
, WI.DV_OA_FLG      
, WI.DV_SOURCE_TYPE AS DV_SOURCE_TYPE  
, 'UNKNOWN' AS AS_ARCHITECTURE_NAME
, 'UNKNOWN' AS TECHNOLOGY_GROUP_ID
, 'UNKNOWN' AS ATTR_PRDT_OFFER_TYPE_NAME
, 'UNK' AS AS_TS_CODE
, -999 AS SK_RENEW_CONTRACT_LINE_ID  
, -999 AS SK_AS_PARENT_INVENTORY_ITEM_ID
, -9999 AS SK_OFFER_ATTRIBUTION_ID_INT   
, USER AS EDW_UPDATE_USER          
, CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM                
, CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM                
, USER AS EDW_CREATE_USER     
, COALESCE(CASE WHEN NSOL.SALES_ORDER_KEY= -8888 THEN RANDOM(1005000,1006800)*-1 WHEN NSOL.SALES_ORDER_KEY= -9999 THEN RANDOM(1000000,1001800)*-1 WHEN NSOL.SALES_ORDER_KEY= -7777 THEN RANDOM(1010000,1011800)*-1 WHEN NSOL.SALES_ORDER_KEY=-6666 THEN RANDOM(1015000,1016800)*-1 ELSE NSOL.SALES_ORDER_KEY  END, RANDOM(1010000,1011800)*-1) AS SALES_ORDER_KEY
,WI.DV_ENTERPRISE_INV_SKU_ID AS SRC_ENTERPRISE_INV_SKU_ID
, 'UNKNOWN' AS PRODUCT_CLASS
, -999 AS TRANSACTION_CR_PARTY_KEY
, -999 AS HQ_CR_PRTY_KEY
, 'UNKNOWN' AS RENEWAL_REF_ID
, 'UNKNOWN' AS RENEWAL_REF_CD
, 'UNKNOWN' AS SMR_TAGGING_FAILURE_RSN_CD
, WI.SALES_MOTION_TIMING_CD
FROM
$$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
  ON WI.MANUAL_TRX_KEY = SM.DV_TRANSACTION_ID
  AND WI.SALES_ORDER_LINE_KEY = SM.SALES_ORDER_LINE_KEY
  AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE= SM.DV_TRX_TYPE
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
  ON WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
  AND CAST(NSOL.END_TV_DATETIME AS DATE) =  CAST( '3500-01-01' AS DATE) 
  AND NSOL.SS_CODE = 'CG'
WHERE EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 ) /* Added condition to process AR rebates separately HERE*/ 
AND NOT EXISTS ( SELECT 1 FROM 
                $$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT
                WHERE MT.DV_TRANSACTION_ID = WI.MANUAL_TRX_KEY
				--AND WI.SALES_ORDER_LINE_KEY = MT.SALES_ORDER_LINE_KEY /* Added condition to process AR rebates separately here */
				AND WI.SALES_ORDER_LINE_KEY = CASE WHEN MT.SALES_ORDER_LINE_KEY BETWEEN  -1006800 AND -1005000 THEN -8888 WHEN MT.SALES_ORDER_LINE_KEY BETWEEN -1001800 AND -1000000 THEN -9999 
WHEN MT.SALES_ORDER_LINE_KEY BETWEEN  -1011800 AND -1010000 THEN -7777 WHEN MT.SALES_ORDER_LINE_KEY BETWEEN  -1016800 AND -1015000 THEN -6666 ELSE MT.SALES_ORDER_LINE_KEY END 
                AND MT.DV_ENTERPRISE_INV_SKU_ID = WI.DV_ENTERPRISE_INV_SKU_ID
                AND MT.START_TV_DTM = WI.START_TV_DTM
                )


Post SQL : 



Target5 Name : MT_BKG_SLS_MOTION_ATTRIBUTION2


Pre SQL : 
UPDATE MT_BKG
FROM $$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT_BKG,
     ( SELECT MANUAL_TRX_KEY, SALES_ORDER_LINE_KEY, DV_ENTERPRISE_INV_SKU_ID , MAX(START_TV_DTM) AS START_TV_DTM
        FROM $$STGDB.WI_SLS_MOTION_ATTRIB_SLSADJ WI
		WHERE EXISTS ( SELECT 1 FROM $$NRTNCRVWDB.N_REBATE_ADJUSTMENT_LINE_NRT RB
			WHERE WI.MANUAL_TRX_KEY  = RB.MANUAL_TRX_KEY
			  AND RB.AR_TRX_LINE_KEY > 0 ) /* Added condition to process AR rebates separately HERE*/ 
       GROUP BY 1,2,3
      ) WI        
SET END_TV_DTM = WI.START_TV_DTM - INTERVAL '1' SECOND,
    EDW_UPDATE_USER = USER,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE WI.MANUAL_TRX_KEY = MT_BKG.DV_TRANSACTION_ID
  --AND MT_BKG.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY /* Added condition to process AR rebates separately here */
AND WI.SALES_ORDER_LINE_KEY = CASE WHEN MT_BKG.SALES_ORDER_LINE_KEY BETWEEN  -1006800 AND -1005000 THEN -8888 WHEN MT_BKG.SALES_ORDER_LINE_KEY BETWEEN -1001800 AND -1000000 THEN -9999 
WHEN MT_BKG.SALES_ORDER_LINE_KEY BETWEEN  -1011800 AND -1010000 THEN -7777 WHEN MT_BKG.SALES_ORDER_LINE_KEY BETWEEN  -1016800 AND -1015000 THEN -6666 ELSE MT_BKG.SALES_ORDER_LINE_KEY END  
  AND WI.DV_ENTERPRISE_INV_SKU_ID = MT_BKG.DV_ENTERPRISE_INV_SKU_ID 
  AND MT_BKG.DV_TRX_TYPE = 'SLS_ADJ' 
  AND WI.START_TV_DTM <> MT_BKG.START_TV_DTM   
  AND MT_BKG.END_TV_DTM = '3500-01-01 00:00:00'  ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$SLSORDDB','MT_BKG_SLS_MOTION_ATTRIBUTION','D');
/* Commented as SMT updates are taken care in wf_EL_SOL_SMT_SMC ETL as part of Aug 16th release */
/* UPDATE MT FROM
$$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT
, $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
SET SALES_MOTION_TIMING_CD = NSOL.SALES_MOTION_TIMING_NAME,
EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0),
EDW_UPDATE_USER = 'RETRO_TS_NSOL_SMT_UPD'
WHERE MT.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
AND MT.END_TV_DTM = '3500-01-01 00:00:00'
AND NSOL.SS_CODE = 'CG'
AND NSOL.SALES_ORDER_LINE_KEY > 0
AND NSOL.SALES_MOTION_CD = 'RENEW'
AND COALESCE( MT.SALES_MOTION_TIMING_CD, 'UNKNOWN')  <> COALESCE(NSOL.SALES_MOTION_TIMING_NAME, 'UNKNOWN') 
AND MT.SALES_MOTION_CD = 'RENEW'
AND MT.SALES_ORDER_LINE_KEY  IN ( SEL SALES_ORDER_LINE_KEY FROM $$STGDB.WI_TTS_SOWB_SOL_LINES ) ;
*/
/*Retro Update of SMT in MT tables due to the delay in RU_CISCO_BOOKED_DATETIME column population in N_SALES_ORDER*/
/* Commented as SMT updates are taken care in wf_EL_SOL_SMT_SMC ETL as part of Aug 16th release */
/* UPDATE MT_BKG
FROM $$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT_BKG,
 (SEL * FROM $$SLSORDVWDB.N_ATTR_PRDT_AS_NEW_OR_RNWL_TV O WHERE END_TV_DTM = '3500-01-01 00:00:00'
AND SALES_MOTION_CD = 'RENEW'
AND EXISTS (SEL 1 FROM $$SLSORDVWDB.N_ATTR_PRDT_AS_NEW_OR_RNWL_TV I WHERE I.START_TV_DTM > CURRENT_DATE-2 
     AND I.END_TV_DTM = '3500-01-01 00:00:00' 
	 AND I.SALES_MOTION_CD = 'RENEW'
	 AND I.SALES_ORDER_LINE_KEY = O.SALES_ORDER_LINE_KEY)
QUALIFY ROW_NUMBER()  OVER  (PARTITION BY  SALES_ORDER_LINE_KEY ORDER BY 
  ( CASE  WHEN  SALES_MOTION_TIMING_CD = 'ONTIME' THEN 6  WHEN SALES_MOTION_TIMING_CD= 'LATE IN QUARTER'  THEN 5  
  WHEN  SALES_MOTION_TIMING_CD = 'EARLY'  THEN 4 WHEN SALES_MOTION_TIMING_CD = 'LATE' THEN 3 
  WHEN SALES_MOTION_TIMING_CD= 'RECAPTURE'  THEN  2 WHEN SALES_MOTION_TIMING_CD= 'UNKNOWN'  THEN  1 END )
  DESC)= 1) NATTR
 SET SALES_MOTION_TIMING_CD = NATTR.SALES_MOTION_TIMING_CD
  WHERE MT_BKG.SALES_ORDER_LINE_KEY = NATTR.SALES_ORDER_LINE_KEY
  AND MT_BKG.SALES_MOTION_CD = NATTR.SALES_MOTION_CD
 AND MT_BKG.SALES_MOTION_CD = 'RENEW'
 AND NATTR.SALES_MOTION_CD = 'RENEW'
AND MT_BKG.END_TV_DTM = '3500-01-01 00:00:00'
AND COALESCE(MT_BKG.SALES_MOTION_TIMING_CD, 'UNKNOWN') <> COALESCE(NATTR.SALES_MOTION_TIMING_CD,'UNKNOWN');


UPDATE MT_ERP
FROM $$SLSORDVWDB.MT_SLS_MOTION_ATTRIBUTION MT_ERP,
 (SEL * FROM $$SLSORDVWDB.N_ATTR_PRDT_AS_NEW_OR_RNWL_TV O WHERE END_TV_DTM = '3500-01-01 00:00:00'
AND SALES_MOTION_CD = 'RENEW'
AND EXISTS (SEL 1 FROM $$SLSORDVWDB.N_ATTR_PRDT_AS_NEW_OR_RNWL_TV I WHERE I.START_TV_DTM > CURRENT_DATE-2 
     AND I.END_TV_DTM = '3500-01-01 00:00:00' 
	 AND I.SALES_MOTION_CD = 'RENEW'
	 AND I.SALES_ORDER_LINE_KEY = O.SALES_ORDER_LINE_KEY)
QUALIFY ROW_NUMBER()  OVER  (PARTITION BY  SALES_ORDER_LINE_KEY ORDER BY 
  ( CASE  WHEN  SALES_MOTION_TIMING_CD = 'ONTIME' THEN 6  WHEN SALES_MOTION_TIMING_CD= 'LATE IN QUARTER'  THEN 5  
  WHEN  SALES_MOTION_TIMING_CD = 'EARLY'  THEN 4 WHEN SALES_MOTION_TIMING_CD = 'LATE' THEN 3 
  WHEN SALES_MOTION_TIMING_CD= 'RECAPTURE'  THEN  2 WHEN SALES_MOTION_TIMING_CD= 'UNKNOWN'  THEN  1 END )
  DESC)= 1) NATTR
 SET SALES_MOTION_TIMING_CD = NATTR.SALES_MOTION_TIMING_CD
  WHERE MT_ERP.SALES_ORDER_LINE_KEY = NATTR.SALES_ORDER_LINE_KEY
AND MT_ERP.SALES_MOTION_CD = NATTR.SALES_MOTION_CD
 AND NATTR.SALES_MOTION_CD = 'RENEW'
AND MT_ERP.END_TV_DTM = '3500-01-01 00:00:00'
AND COALESCE(MT_ERP.SALES_MOTION_TIMING_CD, 'UNKNOWN') <> COALESCE(NATTR.SALES_MOTION_TIMING_CD, 'UNKNOWN');

 UPDATE RTNR
FROM $$SLSORDVWDB.MT_RTNR_SMC_ALLOCATION RTNR,
 (SEL * FROM $$SLSORDVWDB.N_ATTR_PRDT_AS_NEW_OR_RNWL_TV O WHERE END_TV_DTM = '3500-01-01 00:00:00'
AND SALES_MOTION_CD = 'RENEW'
AND EXISTS (SEL 1 FROM $$SLSORDVWDB.N_ATTR_PRDT_AS_NEW_OR_RNWL_TV I WHERE I.START_TV_DTM > CURRENT_DATE-2 
     AND I.END_TV_DTM = '3500-01-01 00:00:00' 
	 AND I.SALES_MOTION_CD = 'RENEW'
	 AND I.SALES_ORDER_LINE_KEY = O.SALES_ORDER_LINE_KEY)
QUALIFY ROW_NUMBER()  OVER  (PARTITION BY  SALES_ORDER_LINE_KEY ORDER BY 
  ( CASE  WHEN  SALES_MOTION_TIMING_CD = 'ONTIME' THEN 6  WHEN SALES_MOTION_TIMING_CD= 'LATE IN QUARTER'  THEN 5  
  WHEN  SALES_MOTION_TIMING_CD = 'EARLY'  THEN 4 WHEN SALES_MOTION_TIMING_CD = 'LATE' THEN 3 
  WHEN SALES_MOTION_TIMING_CD= 'RECAPTURE'  THEN  2 WHEN SALES_MOTION_TIMING_CD= 'UNKNOWN'  THEN  1 END )
  DESC)= 1) NATTR
 SET SALES_MOTION_TIMING_CD = NATTR.SALES_MOTION_TIMING_CD
  WHERE RTNR.SALES_ORDER_LINE_KEY = NATTR.SALES_ORDER_LINE_KEY
AND RTNR.SALES_MOTION_CD = NATTR.SALES_MOTION_CD
 AND NATTR.SALES_MOTION_CD = 'RENEW'
AND RTNR.END_TV_DTM = '3500-01-01 00:00:00'
AND COALESCE(RTNR.SALES_MOTION_TIMING_CD, 'UNKNOWN') <> COALESCE(NATTR.SALES_MOTION_TIMING_CD, 'UNKNOWN');
*/
/*
UPDATE MT FROM
$$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION  MT
,$$STGDB.SMT_RETRO_UPD SMTR
SET SALES_MOTION_TIMING_CD = SMTR.SALES_MOTION_TIMING_CD,
EDW_UPDATE_USER='CISCO_BOOKED_DATE_SMT_UPD'
WHERE MT.SALES_ORDER_LINE_KEY = SMTR.SALES_ORDER_LINE_KEY
AND MT.RENEWAL_REF_CD =    'Renew Covered Line ID'
AND MT.SALES_MOTION_CD = 'RENEW'
AND MT.SALES_MOTION_TIMING_CD='UNKNOWN'
AND MT.END_TV_DT= '3500-01-01'
AND COALESCE( MT.SALES_MOTION_TIMING_CD, 'UNKNOWN')  <> COALESCE(SMTR.SALES_MOTION_TIMING_CD, 'UNKNOWN');


UPDATE MT FROM
$$SLSORDVWDB.MT_SLS_MOTION_ATTRIBUTION  MT
,$$STGDB.SMT_RETRO_UPD SMTR
SET SALES_MOTION_TIMING_CD = SMTR.SALES_MOTION_TIMING_CD,
EDW_UPDATE_USER='CISCO_BOOKED_DATE_SMT_UPD'
WHERE MT.SALES_ORDER_LINE_KEY = SMTR.SALES_ORDER_LINE_KEY
AND MT.RENEWAL_REF_CD =    'Renew Covered Line ID'
AND MT.SALES_MOTION_CD = 'RENEW'
AND MT.SALES_MOTION_TIMING_CD='UNKNOWN'
AND MT.END_TV_DT= '3500-01-01'
AND COALESCE( MT.SALES_MOTION_TIMING_CD, 'UNKNOWN')  <> COALESCE(SMTR.SALES_MOTION_TIMING_CD, 'UNKNOWN') ;


UPDATE MT FROM
$$SLSORDVWDB.MT_RTNR_SMC_ALLOCATION  MT
,$$STGDB.SMT_RETRO_UPD SMTR
SET SALES_MOTION_TIMING_CD = SMTR.SALES_MOTION_TIMING_CD,
EDW_UPDATE_USER='CISCO_BOOKED_DATE_SMT_UPD'
WHERE MT.SALES_ORDER_LINE_KEY = SMTR.SALES_ORDER_LINE_KEY
AND MT.SALES_MOTION_CD = 'RENEW'
AND MT.SALES_MOTION_TIMING_CD='UNKNOWN'
AND MT.END_TV_DT= '3500-01-01'
AND COALESCE( MT.SALES_MOTION_TIMING_CD, 'UNKNOWN')  <> COALESCE(SMTR.SALES_MOTION_TIMING_CD, 'UNKNOWN') ;*/