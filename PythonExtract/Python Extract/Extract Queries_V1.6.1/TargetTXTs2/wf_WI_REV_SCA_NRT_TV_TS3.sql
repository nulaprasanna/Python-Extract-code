


Source1 Name : SQ_WI_REV_SCA_NRT_INCR1


Pre SQL : 
DELETE FROM $$STGDB.WI_REV_SCA_NRT_INCR ALL;

/* Commented all Summary quote load part as part of SQ integration into RTR and decommission of net change model as part of DAY1 FY21*/
/* Added as part of December RTNR release 
DELETE FROM $$STGDB.WI_AR_SUMMARY_QUOTE_SMC ALL;

INSERT INTO $$STGDB.WI_AR_SUMMARY_QUOTE_SMC
SELECT  
     SALES_ORDER_LINE_KEY, 
     DV_EFFECTIVE_DTM, 
     CASE WHEN SO_CNT > 1 THEN 'MIX' 
	      ELSE SALES_MOTION_CD 
	  END SALES_MOTION_CD, 
     USER EDW_CREATE_USER, 
     CURRENT_TIMESTAMP(0) EDW_CREATE_DTM 
FROM ( SELECT SALES_ORDER_LINE_KEY, 
	  SALES_MOTION_CD,
	  MAX(DV_EFFECTIVE_DTM) OVER(PARTITION BY SALES_ORDER_LINE_KEY) AS DV_EFFECTIVE_DTM, 
	  COUNT(*) OVER(PARTITION BY SALES_ORDER_LINE_KEY) SO_CNT,
	  SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY SALES_ORDER_LINE_KEY) DV_ALLOCATION_PCT 
         FROM (
		 SELECT
		 SALES_ORDER_LINE_KEY,
			SALES_MOTION_CD,
			DV_EFFECTIVE_DTM,
			EDW_UPDATE_DTM,
			SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY SALES_ORDER_LINE_KEY ) SUM_ALLOCATION_PCT,
			CAST( DV_ALLOCATION_PCT/SUM_ALLOCATION_PCT AS DECIMAL(18,6) ) AS DV_ALLOCATION_PCT /* Included inner query part to handle CS SQ scenario Sep 26 Q2FY20 Release 
			FROM
		 $$SLSORDVWDB.MT_SUMMARY_QUOTE_SOL_ALLOC 
         WHERE DV_EXPIRATION_DTM = '3500-01-01 00:00:00'  
           AND SALES_ORDER_LINE_KEY IN ( SELECT SALES_ORDER_LINE_KEY  
                                            FROM $$SLSORDVWDB.MT_SUMMARY_QUOTE_SOL_ALLOC  
                                           WHERE EDW_UPDATE_DTM > ( SELECT LAST_EXTRACT_DATE FROM $$ETLVWDB.CTL_ETL_LAST_EXTRACT_DATES WHERE JOB_STREAM_ID = 'wf_WI_REV_SCA_NRT_TV' AND TABLE_NAME = 'WI_AR_SUMMARY_QUOTE_SMC' ) 
                                         ) /* For identifying all open records for a particular allocation change
		) WI
) WI
WHERE ROUND(DV_ALLOCATION_PCT) = 1.00 
GROUP BY 1,2,3,4,5 ;


CALL COLLECT_STATS_WRAP('$$STGDB', 'WI_AR_SUMMARY_QUOTE_SMC', 'D') ;

UPDATE WI_AR
FROM $$STGDB.WI_AR_SALES_MOTION_CHANGE WI_AR, 
    ( SELECT SALES_ORDER_LINE_KEY, 
          SALES_MOTION_CD , 
          DV_EFFECTIVE_DTM 
    FROM $$STGDB.WI_AR_SUMMARY_QUOTE_SMC ) WI
SET SALES_MOTION_CD = WI.SALES_MOTION_CD , 
    SOURCE_COMMIT_TIME = WI.DV_EFFECTIVE_DTM,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)              
 WHERE WI_AR.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY 
   AND WI_AR.EDW_UPDATE_DTM < WI.DV_EFFECTIVE_DTM;

UPDATE EL 
FROM $$ETLVWDB.CTL_ETL_LAST_EXTRACT_DATES EL, 
	 ( SELECT MAX(EDW_UPDATE_DTM) MAX_UPD_DATE FROM $$SLSORDVWDB.MT_SUMMARY_QUOTE_SOL_ALLOC ) NSOL 
 SET LAST_EXTRACT_DATE = COALESCE(NSOL.MAX_UPD_DATE , EL.LAST_EXTRACT_DATE ) 
WHERE JOB_STREAM_ID = 'wf_WI_REV_SCA_NRT_TV'  
AND TABLE_NAME = 'WI_AR_SUMMARY_QUOTE_SMC';

/* Added as part of December RTNR release 

UPDATE WI 
FROM $$STGDB.WI_AR_SALES_MOTION_CHANGE WI , 
	( SELECT SALES_ORDER_LINE_KEY, 
			 SK_SALES_ORDER_LINE_ID_INT, 
			 SALES_MOTION_CD,
			 SOURCE_COMMIT_DTM 
	   FROM $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT_HIST_TV NSOL 
	   WHERE NSOL.END_TV_DTM = '3500-01-01 00:00:00'
         AND NSOL.SS_CD <> 'OPL'
		 AND NSOL.SALES_ORDER_LINE_KEY NOT IN ( SELECT 
												 SALES_ORDER_LINE_KEY 
												FROM 
					                            ( 
												SELECT
												 SALES_ORDER_LINE_KEY,
												 SALES_MOTION_CD,
												 DV_EFFECTIVE_DTM,
												 EDW_UPDATE_DTM,
												 SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY SALES_ORDER_LINE_KEY ) SUM_ALLOCATION_PCT,
												 CAST( DV_ALLOCATION_PCT/SUM_ALLOCATION_PCT AS DECIMAL(18,6) ) AS DV_ALLOCATION_PCT /* Included inner query part to handle CS SQ scenario Sep 26 Q2FY20 Release 
					                            FROM
					                            $$SLSORDVWDB.MT_SUMMARY_QUOTE_SOL_ALLOC 
					                            WHERE DV_EXPIRATION_DTM = '3500-01-01 00:00:00' 
					                            ) WI 
					                            GROUP BY 1 HAVING ROUND(SUM(DV_ALLOCATION_PCT)) = 1.00 )
												AND NSOL.EDW_UPDATE_DTM > CURRENT_DATE - 7
	) NSOL
SET SALES_MOTION_CD = NSOL.SALES_MOTION_CD , 
	SOURCE_COMMIT_TIME = NSOL.SOURCE_COMMIT_DTM,
	EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
  AND WI.SALES_MOTION_CD <> NSOL.SALES_MOTION_CD ; 

INSERT INTO $$STGDB.WI_AR_SALES_MOTION_CHANGE  
 SELECT SALES_ORDER_LINE_KEY, 
		SK_SALES_ORDER_LINE_ID_INT, 
		SALES_MOTION_CD,
		SOURCE_COMMIT_DTM ,
		CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM, 
		CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM
		FROM
		(
		SELECT
		SALES_ORDER_LINE_KEY, 
		SK_SALES_ORDER_LINE_ID_INT, 
		SALES_MOTION_CD,
		SOURCE_COMMIT_DTM 
		FROM $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT_HIST_TV NSOL 
		WHERE NSOL.END_TV_DTM = '3500-01-01 00:00:00' 
		AND NSOL.SS_CD <> 'OPL'
		AND NSOL.EDW_UPDATE_DTM > CURRENT_DATE - 7 
		AND NSOL.SALES_MOTION_CD <> 'UNKNOWN'
		UNION
		SELECT
		NSOL1.SALES_ORDER_LINE_KEY, 
		NSOL1.SK_SALES_ORDER_LINE_ID_INT, 
		NSOL1.SALES_MOTION_CD,
		NSOL1.SOURCE_COMMIT_DTM 
		FROM $$STGDB.WI_AR_SUMMARY_QUOTE_SMC SMC
		INNER JOIN $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT_HIST_TV NSOL1 
		ON SMC.SALES_ORDER_LINE_KEY = NSOL1.SALES_ORDER_LINE_KEY
		AND NSOL1.SS_CD <> 'OPL'
		AND NSOL1.END_TV_DTM = '3500-01-01 00:00:00' 
   ) WI
 WHERE NOT EXISTS ( SELECT 1 FROM $$STGDB.WI_AR_SALES_MOTION_CHANGE WI_AR 
                    WHERE WI_AR.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY ) ; 

COLLECT STATS ON $$STGDB.WI_AR_SALES_MOTION_CHANGE ;

*/


SQL Query : 
SELECT 
  APPL.SALES_CREDIT_ASSIGNMENT_KEY, 
  APPL.SCA_SOURCE_TYPE_CD, 
  APPL.SK_LINE_SEQ_ID_INT, 
  APPL.SS_CD, 
  APPL.EP_SOURCE_LINE_ID_INT, 
  APPL.EP_SK_SALESREP_ID_INT, 
  APPL.SCA_SALES_COMMISSION_PCT, 
  APPL.START_TV_DTM, 
  APPL.END_TV_DTM, 
  APPL.SCA_SOURCE_COMMIT_DTM, 
  APPL.EDW_CREATE_DTM, 
  APPL.EDW_UPDATE_DTM, 
  APPL.RU_SALES_ORDER_LINE_KEY, 
  APPL.RU_AR_TRANSACTION_LINE_KEY, 
  APPL.EP_SK_SALES_CREDIT_TYPE_ID_INT, 
  APPL.EP_SK_TERRITORY_ID_INT,  
  /* RCHETTRI : CHANGES FOR REBOK : CG1 TO PULL FROM 3NF AND BV/QTC TO COME FROM EL 
  ESCT.QUOTA_FLAG, 
  */
  CASE  WHEN APPL.SS_CD = 'CG' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG
   ELSE ESCT.QUOTA_FLAG
 END AS QUOTA_FLAG,  
  /* RCHETTRI : CHANGES FOR REBOK : CG1 TO PULL FROM NRT AND BV/QTC TO COME FROM EL 
  ESCT.NAME AS BK_SALES_CREDIT_TYPE_CODE, 
  */
  CASE  WHEN APPL.SS_CD = 'CG' THEN APPL.BK_SALES_CREDIT_TYPE_CODE      
   ELSE ESCT.NAME 
 END AS BK_SALES_CREDIT_TYPE_CODE, 
  /* NFISMN_SYS IS USEFUL WHEN NET CHANGE RUNS FOR CATCHUP DATA (OR BACKDATING AND RUNNING NET CHANGE PART) */
  CASE  WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100) 
   THEN NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT
   ELSE   NFISMN.BK_FISCAL_MONTH_NUMBER_INT
  END AS BK_FISCAL_MONTH_NUMBER_INT , 
  CASE  WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)
   THEN NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT
   ELSE   NFISMN.BK_FISCAL_YEAR_NUMBER_INT
  END AS BK_FISCAL_YEAR_NUMBER_INT ,
  CASE  WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)
   THEN (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)
   ELSE   ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  )
  END AS DV_FISCAL_YEAR_MONTH_NUM_INT , 
  NULL AS EVENT_TYPE ,
   /* RCHETTRI : CHANGES FOR REBOK : ADDED 2 COLUMNS */
  APPL.SALES_REP_NUMBER  , 
  APPL.SALES_TERRITORY_KEY  ,
  APPL.SK_SC_AGENT_ID_INT
 FROM
 (SELECT LAST_EXTRACT_DATE FROM $$ETLVWDB.DW_JOB_STREAMS WHERE JOB_STREAM_ID ='Wf_WI_REV_SCA_NRT_TV') X,
   ( SELECT BK_FISCAL_MONTH_NUMBER_INT, BK_FISCAL_YEAR_NUMBER_INT
   FROM $$COMREFVWDB.N_FISCAL_MONTH 
   WHERE CURRENT_DATE-1 BETWEEN FISCAL_MONTH_START_DATE AND FISCAL_MONTH_END_DATE
  ) NFISMN_SYS ,
  $$STGDB.WI_REV_SCA_NRT_SNAP_TV APPL
 INNER JOIN  $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
  ON APPL.SS_CD = NSSC.SOURCE_SYSTEM_CODE
  /* RCHETTRI : CHANGES FOR REBOK : CHANGE TO LEFT JOIN AS THIS IS APPLICABLE ONLY FOR BV/QTC DATA.
 INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
 */
 LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
  ON ESCT.SK_CREDIT_TYPE_ID = APPL.EP_SK_SALES_CREDIT_TYPE_ID_INT
  AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME
 /* RCHETTRI : CHANGES FOR REBOK : JOIN WITH 3NF TO GET QUOTA_FLAG FOR CG DATA */ 
 LEFT OUTER JOIN 
 ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
  FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
  QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
 ) NSCTT
  ON APPL.BK_SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE 
 INNER JOIN $$COMREFVWDB.N_FISCAL_MONTH NFISMN  
  ON  APPL.SCA_SOURCE_COMMIT_DTM BETWEEN NFISMN.FISCAL_MONTH_START_DATE AND NFISMN.FISCAL_MONTH_END_DATE
 WHERE  1=1 
 /* TO PULL INCREMENTALLY */ 
 AND APPL.EDW_UPDATE_DTM > X.LAST_EXTRACT_DATE
 AND  NOT  /* NOT TO TAKE RETRO UPDATES */
  (   APPL.EDW_CREATE_DTM <=  X.LAST_EXTRACT_DATE   /* OLD CREATED */ 
      AND END_TV_DTM =  '3500-01-01 00:00:00'    /* OPEN RECORD */
   )
   /*q1fy16 code changes starts here*/           
                AND EXISTS 
                (                       
                                /* case-1 - when a match is found in N_AR_BATCH_SOURCE - then it must NOT be XAAS related  - THIS SHOULD BE ALLOWED TO FLOW THROUGH */
                                SELECT 1 FROM $$FINLGLVWDB.N_AR_TRX_LINE NART
                                INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT ON NART.AR_TRX_KEY = NAT.AR_TRX_KEY
                                INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS ON NAT.AR_BATCH_SOURCE_KEY = NABS.AR_BATCH_SOURCE_KEY
                                WHERE  1=1
                                                AND NART.AR_TRX_LINE_KEY=APPL.RU_AR_TRANSACTION_LINE_KEY
                                                /*AND NABS.BK_BATCH_SOURCE_NAME NOT in ('WEBEX', 'SALES ADJUSTMENTS-WEBEX','ICMS-ADJ-WEBEX','XAAS','ICMS-XAAS')  */
      AND (NABS.BK_BATCH_SOURCE_NAME  NOT LIKE  ('%WEBEX%') 
	       AND ( ( NABS.BK_BATCH_SOURCE_NAME  NOT LIKE  ALL ('%XAAS%','CSP-MARKETPLACE')
                  OR ( NABS.BK_BATCH_SOURCE_NAME = 'ORDER MANAGEMENT'  AND NART.TRX_LINE_SRC_NAME  NOT IN ('XAAS'))
				  OR ( NABS.BK_BATCH_SOURCE_NAME = 'ICMS-ADJ'  AND NART.TRX_LINE_SRC_NAME  NOT IN ('XAAS'))
				  )	/*Added As part of TNC Feb 2020 Release*/ 	   
		          OR EXISTS (SELECT 1 FROM $$ETLVWDB.EL_XAAS_TRX_FROM_ERP_SC EL WHERE EL.AR_TRX_LINE_KEY = NART.AR_TRX_LINE_KEY)
				  /* Q2FY19 Dec Rel : Included above cond. to consider XAAS trx from ERP SC */
	            )	  
	       )
)


Post SQL : 



Target1 Name : WI_REV_SCA_NRT_INCR


Pre SQL : 
COLLECT  STATS $$STGDB.WI_REV_SCA_NRT_SNAP_TV COLUMN(EDW_UPDATE_DTM);


Post SQL : 
COLLECT STATS ON $$STGDB.WI_REV_SCA_NRT_INCR;


Source2 Name : SQ_WI_REV_SCA_NRT_TV2


Pre SQL : 
DELETE FROM $$STGDB.WI_REV_SCA_NRT_TV ALL;


SQL Query : 
SELECT 
  APPL.SALES_CREDIT_ASSIGNMENT_KEY, 
  APPL.SCA_SOURCE_TYPE_CD, 
  APPL.SK_LINE_SEQ_ID_INT, 
  APPL.SS_CD, 
  APPL.EP_SOURCE_LINE_ID_INT, 
  APPL.EP_SK_SALESREP_ID_INT, 
  APPL.SCA_SALES_COMMISSION_PCT, 
  APPL.START_TV_DTM, 
  APPL.END_TV_DTM, 
  APPL.SCA_SOURCE_COMMIT_DTM, 
  APPL.EDW_CREATE_DTM, 
  APPL.EDW_UPDATE_DTM, 
  APPL.RU_SALES_ORDER_LINE_KEY, 
  APPL.RU_AR_TRANSACTION_LINE_KEY, 
  APPL.EP_SK_SALES_CREDIT_TYPE_ID_INT, 
  APPL.EP_SK_TERRITORY_ID_INT, 
  APPL.QUOTA_FLAG, 
  APPL.BK_SALES_CREDIT_TYPE_CODE, 
  APPL.BK_FISCAL_MONTH_NUMBER_INT, 
  APPL.BK_FISCAL_YEAR_NUMBER_INT, 
  APPL.DV_FISCAL_YEAR_MONTH_NUM_INT, 
  APPL.EVENT_TYPE ,
  APPL.SALES_REP_NUMBER,
  APPL.SALES_TERRITORY_KEY,
  APPL.SK_SC_AGENT_ID_INT  
  FROM $$STGDB.WI_REV_SCA_NRT_INCR APPL
 WHERE
 EXISTS
  (SELECT 1 FROM $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_REV DRVD  
      INNER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE SOL
      /* OA Q3FY14 */
      ON DRVD.DV_SALES_ORDER_LINE_KEY       = SOL.SALES_ORDER_LINE_KEY
      WHERE SOL.SK_SO_LINE_ID_INT = APPL.EP_SOURCE_LINE_ID_INT  
     AND SOL.SS_CODE = APPL.SS_CD
     AND APPL.SCA_SOURCE_TYPE_CD   = 'O'
  )
 OR EXISTS
  (SELECT 1 FROM $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD  
      INNER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE SOL
	   /* OA Q3FY14 */
      ON DRVD.DV_SALES_ORDER_LINE_KEY        = SOL.SALES_ORDER_LINE_KEY
      WHERE SOL.SK_SO_LINE_ID_INT = APPL.EP_SOURCE_LINE_ID_INT  
     AND SOL.SS_CODE = APPL.SS_CD
     AND APPL.SCA_SOURCE_TYPE_CD   = 'O'  )
 OR EXISTS
  ( SELECT 1 
     FROM $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_REV DRVD
     INNER JOIN    $$FINLGLVWDB.N_AR_TRX_LINE NATL  
      ON DRVD.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
	  /* OA Q3FY14 */
	  LEFT OUTER JOIN (
	  SELECT NATIL.AR_TRX_LINE_KEY AS AR_TRX_LINE_KEY ,NATIL_PAR.AR_TRX_LINE_KEY  AS PARENT_AR_TRX_LINE_KEY , NATIL_PAR.SK_CUSTOMER_TRX_LINE_ID_LINT AS SK_CUSTOMER_TRX_LINE_ID_LINT
	  FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL  
	  INNER JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL_PAR  
      ON coalesce(NATIL.RU_PARENT_AR_TRX_LINE_KEY ,0) = NATIL_PAR.AR_TRX_LINE_KEY  ) DNATIL 
	 	ON DRVD.AR_TRX_LINE_KEY = DNATIL.AR_TRX_LINE_KEY  
     WHERE DNATIL.SK_CUSTOMER_TRX_LINE_ID_LINT = APPL.EP_SOURCE_LINE_ID_INT
     AND NATL.SS_CODE = APPL.SS_CD  
     AND  APPL.SCA_SOURCE_TYPE_CD   <>  'O'
    )
 OR EXISTS
  ( SELECT 1 
     FROM $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD
     INNER JOIN    $$FINLGLVWDB.N_AR_TRX_LINE NATL  
      ON DRVD.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
	  /* OA Q3FY14 */
	   LEFT OUTER JOIN (
	  SELECT NATIL.AR_TRX_LINE_KEY AS AR_TRX_LINE_KEY ,NATIL_PAR.AR_TRX_LINE_KEY  AS PARENT_AR_TRX_LINE_KEY , NATIL_PAR.SK_CUSTOMER_TRX_LINE_ID_LINT AS SK_CUSTOMER_TRX_LINE_ID_LINT
	  FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL  
	  INNER JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL_PAR  
      ON coalesce(NATIL.RU_PARENT_AR_TRX_LINE_KEY,0) = NATIL_PAR.AR_TRX_LINE_KEY  ) DNATIL 
	ON DRVD.AR_TRX_LINE_KEY = DNATIL.AR_TRX_LINE_KEY
	WHERE DNATIL.SK_CUSTOMER_TRX_LINE_ID_LINT = APPL.EP_SOURCE_LINE_ID_INT
     AND NATL.SS_CODE = APPL.SS_CD  
     AND  APPL.SCA_SOURCE_TYPE_CD   <>  'O'
    )


Post SQL : 



Target2 Name : WI_REV_SCA_NRT_TV


Pre SQL : 



Post SQL : 
COLLECT STATS $$STGDB.WI_REV_SCA_NRT_TV;
 
 DELETE FROM $$STGDB.WI_BKG_SCA_NRT_TV ALL;
 
 INSERT INTO $$STGDB.WI_BKG_SCA_NRT_TV
 (
       SALES_CREDIT_ASSIGNMENT_KEY ,
       SCA_SOURCE_TYPE_CD ,
       SK_LINE_SEQ_ID_INT ,
       SS_CD ,
       EP_SOURCE_LINE_ID_INT ,
       EP_SK_SALESREP_ID_INT ,
       SCA_SALES_COMMISSION_PCT ,
       START_TV_DTM ,
       END_TV_DTM ,
       SCA_SOURCE_COMMIT_DTM ,
       EDW_CREATE_DTM ,
       EDW_UPDATE_DTM ,
       RU_SALES_ORDER_LINE_KEY ,
       RU_AR_TRANSACTION_LINE_KEY ,
       EP_SK_SALES_CREDIT_TYPE_ID_INT ,
       EP_SK_TERRITORY_ID_INT ,
       QUOTA_FLAG ,
       BK_SALES_CREDIT_TYPE_CODE ,
       BK_FISCAL_MONTH_NUMBER_INT ,
       BK_FISCAL_YEAR_NUMBER_INT ,
       DV_FISCAL_YEAR_MONTH_NUM_INT ,
       EVENT_TYPE ,
    /* RCHETTRI : REBOK CHANGES : ADDED 2 COLUMNS */
       SALES_REP_NUMBER   ,
       SALES_TERRITORY_KEY ,
       SK_SC_AGENT_ID_INT,
       SALES_MOTION_CD	   
    )
 SELECT 
       WI.SALES_CREDIT_ASSIGNMENT_KEY ,
       WI.SCA_SOURCE_TYPE_CD ,
       WI.SK_LINE_SEQ_ID_INT ,
       WI.SS_CD ,
       WI.EP_SOURCE_LINE_ID_INT ,
       WI.EP_SK_SALESREP_ID_INT ,
       WI.SCA_SALES_COMMISSION_PCT ,
       WI.START_TV_DTM ,
       WI.END_TV_DTM ,
       WI.SCA_SOURCE_COMMIT_DTM ,
       WI.EDW_CREATE_DTM ,
       WI.EDW_UPDATE_DTM ,
       WI.RU_SALES_ORDER_LINE_KEY ,
       WI.RU_AR_TRANSACTION_LINE_KEY ,
       WI.EP_SK_SALES_CREDIT_TYPE_ID_INT ,
       WI.EP_SK_TERRITORY_ID_INT ,
       WI.QUOTA_FLAG ,
       WI.BK_SALES_CREDIT_TYPE_CODE ,
       WI.BK_FISCAL_MONTH_NUMBER_INT ,
       WI.BK_FISCAL_YEAR_NUMBER_INT ,
       WI.DV_FISCAL_YEAR_MONTH_NUM_INT ,
       WI.EVENT_TYPE ,
    /* RCHETTRI : REBOK CHANGES : ADDED 2 COLUMNS */
	   WI.SALES_REP_NUMBER   ,
       WI.SALES_TERRITORY_KEY ,
	   WI.SK_SC_AGENT_ID_INT ,
	   /*COALESCE(SMC.SALES_MOTION_CD , 'UNKNOWN' ) AS SALES_MOTION_CD */ /* Commented as part of SQ Net change removal - Day1 FY21 */
	   'UNKNOWN' AS SALES_MOTION_CD
 FROM $$STGDB.WI_REV_SCA_NRT_TV WI
 /* LEFT JOIN $$STGDB.WI_AR_SALES_MOTION_CHANGE SMC
   ON WI.RU_SALES_ORDER_LINE_KEY = SMC.SALES_ORDER_LINE_KEY */ /* Commented as part of SQ Net change removal - Day1 FY21 */
   ;
 
 COLLECT STATS $$STGDB.WI_BKG_SCA_NRT_TV;
 
 /* UPDATE SC_LAST_PROCESS_DATE TO MAKE IT READY FOR NEXT RUN */
 UPDATE EL FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE EL,
 (SELECT MAX(EDW_UPDATE_DTM) AS MAX_EDW_UPDATE_DTM  FROM  $$STGDB.WI_REV_SCA_NRT_TV ) WI_SCA
 SET SC_LAST_PROCESS_DATE = WI_SCA.MAX_EDW_UPDATE_DTM
 WHERE WI_SCA.MAX_EDW_UPDATE_DTM IS NOT NULL;
 
 /* UPDATE LAST_EXTRACT_DATE TO MAKE IT READY FOR NEXT RUN */
 UPDATE  JCT FROM $$ETLVWDB.DW_JOB_STREAMS JCT,
 (SELECT MAX(EDW_UPDATE_DTM) AS MAX_EDW_UPDATE_DTM FROM  $$STGDB.WI_REV_SCA_NRT_TV )WI_SCA
 SET LAST_EXTRACT_DATE = WI_SCA.MAX_EDW_UPDATE_DTM
 WHERE JCT.JOB_STREAM_ID = 'Wf_WI_REV_SCA_NRT_TV'
 AND WI_SCA.MAX_EDW_UPDATE_DTM IS NOT NULL;