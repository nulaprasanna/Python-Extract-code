


Source1 Name : SQ_WI_DRVD_NRT_BKG_TRX_INT


Pre SQL : 
DELETE FROM $$NRTSTGDB.WI_DRVD_NRT_BKG_TRX_INT;


SQL Query : 
SELECT
 WIDN.BOOKINGS_MEASURE_KEY          
,WIDN.SPLIT_PERCENTAGE              
,WIDN.FORWARD_REVERSE_CODE          
,WIDN.BOOKINGS_PERCENTAGE           
,WIDN.TRANSACTION_QUANTITY          
,WIDN.SALES_ORDER_KEY               
,WIDN.PRODUCT_KEY                   
,WIDN.SALES_TERRITORY_KEY           
,WSOA.UNIT_LIST_PRICE_USD_AMT AS UNIT_LIST_PRICE                       
,WIDN.DV_ATTRIBUTION_CD             
,WIDN.SK_OFFER_ATTRIBUTION_ID_INT   
,WIDN.DV_SALES_ORDER_LINE_KEY       
,WIDN.DV_PRODUCT_KEY                
,WIDN.ATTRIBUTION_PCT  
FROM         
(SEL * FROM $$NRTSTGDB.WI_DRVD_NRT_BKG_TRX WHERE DV_ATTRIBUTION_CD IN ('ATTRIBUTED','BIB','BIB OFFSET')) WIDN
LEFT JOIN (SELECT TOP_SKU_SALES_ORDER_LINE_KEY, SK_OFFER_ATTRIBUTION_ID_INT ,UNIT_LIST_PRICE_USD_AMT
FROM $$NRTNCRVWDB.N_SOL_OFFER_ATTRIBUTION_TV 
   WHERE CISCO_BOOKED_ATTRIBUTION_FLG='Y'
   AND END_TV_DTM = '3500-01-01 00:00:00' ) WSOA 
   ON WSOA.TOP_SKU_SALES_ORDER_LINE_KEY = WIDN.DV_SALES_ORDER_LINE_KEY   
   AND WSOA.SK_OFFER_ATTRIBUTION_ID_INT=WIDN.SK_OFFER_ATTRIBUTION_ID_INT


Post SQL : 



Target1 Name : WI_DRVD_NRT_BKG_TRX_INT1


Pre SQL : 



Post SQL : 
/*COLLECT STATS ON $$NRTSTGDB.WI_DRVD_NRT_BKG_TRX_INT;*/

CALL COLLECT_STATS_WRAP('$$NRTSTGDB','WI_DRVD_NRT_BKG_TRX_INT','D');


Target1-2 Name : WI_DRVD_NRT_BKG_TRX_COST


Pre SQL : 



Post SQL : 
/*COLLECT STATS  ON  $$NRTSTGDB.WI_DRVD_NRT_BKG_TRX_COST;*/

CALL COLLECT_STATS_WRAP('$$NRTSTGDB','WI_DRVD_NRT_BKG_TRX_COST','D');


Target1-3 Name : WI_DRVD_NRT_BKG_TRX_LIST_PRICE


Pre SQL : 



Post SQL : 
/*COLLECT STATS  
ON $$NRTSTGDB.WI_DRVD_NRT_BKG_TRX_LIST_PRICE; */

CALL COLLECT_STATS_WRAP('$$NRTSTGDB','WI_DRVD_NRT_BKG_TRX_LIST_PRICE','D');


Source2 Name : SQ_WI_DRVD_NRT_BKG_TRX


Pre SQL : 
DELETE FROM  $$NRTSTGDB.W_DRVD_NRT_BKG_TRX_INT;


SQL Query : 
SELECT	
	WDNBT.BOOKINGS_MEASURE_KEY	BOOKINGS_MEASURE_KEY,
	CAST(NPPT.LIST_PRICE_AMOUNT AS DECIMAL(18,6)) LIST_PRICE_AMOUNT
FROM	
	$$COMREFVWDB.N_PRODUCT_PRICE_TV NPPT
	LEFT OUTER JOIN
	$$NRTSTGDB.WI_DRVD_NRT_BKG_TRX WDNBT  
	ON (NPPT.ITEM_KEY =  WDNBT.PRODUCT_KEY)
WHERE	
	NPPT.BK_PRICE_LIST_NAME = 'Base Price List' 	
	AND  WDNBT.PRICING_DATE BETWEEN NPPT.START_TV_DATE AND NPPT.END_TV_DATE
	AND  WDNBT.DV_ATTRIBUTION_CD IN ('STANDALONE','BUNDLE','OFFSET')             
	
UNION ALL 
	
SELECT 
	WDNBT.BOOKINGS_MEASURE_KEY	BOOKINGS_MEASURE_KEY,
	NPPT.LIST_PRICE_AMOUNT*(WDNBT.ATTRIBUTION_PCT/100.00000000) LIST_PRICE_AMOUNT
FROM	
	$$COMREFVWDB.N_PRODUCT_PRICE_TV NPPT
	LEFT OUTER JOIN
	$$NRTSTGDB.WI_DRVD_NRT_BKG_TRX WDNBT  
	ON (NPPT.ITEM_KEY =  WDNBT.DV_PRODUCT_KEY)
WHERE	
	NPPT.BK_PRICE_LIST_NAME = 'Base Price List' 	
	AND   WDNBT.PRICING_DATE BETWEEN NPPT.START_TV_DATE AND NPPT.END_TV_DATE
	AND   WDNBT.DV_ATTRIBUTION_CD IN ('ATTRIBUTED', 'BIB', 'BIB OFFSET')


Post SQL : 



Target2 Name : W_DRVD_NRT_BKG_TRX_INT


Pre SQL : 



Post SQL : 
/*COLLECT STATS ON $$NRTSTGDB.W_DRVD_NRT_BKG_TRX_INT;*/

CALL COLLECT_STATS_WRAP('$$NRTSTGDB','W_DRVD_NRT_BKG_TRX_INT','D');


Source3 Name : SQ_W_DRVD_NRT_BKG_TRX_INT


Pre SQL : 
DELETE FROM  $$NRTSTGDB.W_DRVD_NRT_BKG_TRX


SQL Query : 
SELECT
  NRT.BOOKINGS_MEASURE_KEY          
  ,NRT.BK_FISCAL_MONTH_NUMBER_INT    
  ,NRT.DD_EXTENDED_HOLD_QUANTITY     
  ,NRT.CONVERSION_DT                 
  ,NRT.SALES_REP_NUMBER              
  ,NRT.TRANSACTION_DATETIME          
  ,NRT.TRANSACTION_SEQUENCE_ID_INT   
  ,NRT.SALES_CHANNEL_CODE            
  ,NRT.CDB_DATA_SOURCE_CODE          
  ,NRT.SPLIT_PERCENTAGE              
  ,NRT.BK_FISCAL_YEAR_NUMBER_INT     
  ,NRT.DD_SERVICE_FLAG               
  ,NRT.DD_CORP_BKG_FLAG              
  ,NRT.DD_COMP_US_NET_PRICE_AMOUNT   
  ,NRT.DD_COMP_US_HOLD_NET_PRICE_AMT 
  ,NRT.SOLD_TO_CUSTOMER_KEY          
  ,NRT.BILL_TO_CUSTOMER_KEY          
  ,NRT.SHIP_TO_CUSTOMER_KEY          
  ,NRT.CONVERSION_RT                 
  ,NRT.SALES_ORDER_LINE_KEY          
  ,NRT.BK_SO_NUMBER_INT              
  ,NRT.PURCHASE_ORDER_NUMBER         
  ,NRT.BK_SO_SRC_CRT_DATETIME        
  ,NRT.FORWARD_REVERSE_CODE          
  ,NRT.BOOKINGS_PERCENTAGE           
  ,NRT.NET_PRICE_AMOUNT              
  ,NRT.TRANSACTION_QUANTITY          
  ,NRT.PROCESS_DATE                  
  ,NRT.BK_ISO_CURRENCY_CODE          
  ,NRT.SALES_ORDER_KEY               
  ,NRT.DD_ITEM_TYPE_CODE_FLAG        
  ,NRT.DD_RMA_FLAG                   
  ,NRT.DD_INTERNATIONAL_DEMO_FLAG    
  ,NRT.DD_REPLACEMENT_DEMO_FLAG      
  ,NRT.DD_REVENUE_FLAG               
  ,NRT.DD_OVERLAY_FLAG               
  ,NRT.DD_SALESREP_FLAG              
  ,NRT.DD_IC_REVENUE_FLAG            
  ,NRT.DD_CHARGES_FLAG               
  ,NRT.DD_MISC_FLAG                  
  ,NRT.DD_ACQUISITION_FLAG           
  ,NRT.CORP_BKG_RECOMPUTE_FLAG       
  ,NRT.DD_COMP_US_LIST_PRICE_AMOUNT  
  ,NRT.DD_COMP_US_COST_AMOUNT        
  ,NRT.DD_EXTENDED_QUANTITY          
  ,NRT.DD_COMP_US_HOLD_LIST_PRICE_AMT
  ,NRT.DD_COMP_US_HOLD_COST_AMOUNT   
  ,NRT.ES_LINE_SEQ_ID_INT            
  ,NRT.ORDER_DTM                     
  ,NRT.CANCELLED_FLG                 
  ,NRT.RU_CISCO_BOOKED_DATETIME      
  ,NRT.SALES_ORDER_CATEGORY_TYPE     
  ,NRT.SOURCE_SYSTEM_CODE            
  ,NRT.DD_COMP_US_STANDARD_PRICE_AMT 
  ,NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT 
  ,NRT.SALES_ORDER_OPERATING_UNIT    
  ,NRT.PRODUCT_KEY                   
  ,NRT.SALES_TERRITORY_KEY           
  ,NRT.SALES_CREDIT_TYPE_CODE        
  ,NRT.EDW_CREATE_DTM                
  ,NRT.EDW_CREATE_USER               
  ,NRT.EDW_UPDATE_DTM                
  ,NRT.EDW_UPDATE_USER               
  ,NRT.DV_REVENUE_RECOGNITION_FLG    
  ,NRT.DV_NET_SPREAD_FLG             
  ,NRT.DV_ATTRIBUTION_CD             
  ,NRT.SK_OFFER_ATTRIBUTION_ID_INT   
  ,NRT.DV_SALES_ORDER_LINE_KEY       
  ,NRT.DV_PRODUCT_KEY     
  
  , CASE WHEN NRT.DD_SERVICE_FLAG = 'Y'  AND NRT.DD_COMP_US_NET_PRICE_AMOUNT <> 0 
     THEN
     CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
         THEN  
       CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT - (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT)*
         (CASE WHEN DOLLAR_ADJUSTABLE_FLG='Y' THEN NRT.DD_COMP_US_STANDARD_PRICE_AMT ELSE NRT.DD_COMP_US_LIST_PRICE_AMOUNT END)/100)    
        )  AS DECIMAL(18,6) )   
      WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
      THEN
       CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT *
        (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )  
      ELSE 0
     END 
    ELSE 0
    END DV_BKG_GROSS_MGN_AMT
     
    ,CASE WHEN NRT.DD_SERVICE_FLAG = 'Y'   AND NRT.DD_COMP_US_NET_PRICE_AMOUNT <> 0 AND MCR.SALES_TERRITORY_KEY IS NOT NULL
    THEN
     CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
      THEN  
       CAST( ( (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT)*
        (CASE WHEN DOLLAR_ADJUSTABLE_FLG='Y' THEN NRT.DD_COMP_US_STANDARD_PRICE_AMT ELSE NRT.DD_COMP_US_LIST_PRICE_AMOUNT END)/100)    
        )  AS DECIMAL(18,6) )   
      WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
      THEN
       CAST( 
    COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*NRT.DD_COMP_US_NET_PRICE_AMOUNT,0) *
        (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 AS DECIMAL(18,6) )  
      ELSE 0
     END 
    ELSE 0
    END DV_BGM_FX_COST_AMT 
   
   ,CASE WHEN (NRT.DD_SERVICE_FLAG = 'Y' AND NRT.DD_COMP_US_NET_PRICE_AMOUNT <> 0 AND 
   COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
   THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*NRT.DD_COMP_US_NET_PRICE_AMOUNT,0) 
   ELSE 0
   END AS DV_FX_NET_PRICE_AMT
   
   ,CASE WHEN NRT.DD_SERVICE_FLAG = 'Y'   AND NRT.DD_COMP_US_NET_PRICE_AMOUNT <> 0 
    THEN
     CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  THEN  
       COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY)
      WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
       COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
       ELSE -999 
     END 
   ELSE -999 END TSS_COUNTRY_FACTOR_KEY
  ,NRT.DV_LOCAL_EXTND_LIST_PRICE_AMT
   ,NRT.LOCAL_UNIT_LIST_PRICE_AMT
   ,NRT.DV_UNIT_LIST_PRICE_USD_AMT
  ,NRT.PURCHASE_ADJ_DISCOUNT_USD_AMT
 ,0 DV_BGM_NON_STANDARD_COST_AMT /*added as part product BGM - Q1FY18 release */
 /*REBATE BGM NET START */
,CASE WHEN NRT.DD_SERVICE_FLAG = 'Y' AND NRT.DD_COMP_US_NET_PRICE_AMOUNT <> 0 
 THEN
  CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
   THEN  
    CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT - (COALESCE(TSS.REBATE_FACTOR_PCT,TSS1.REBATE_FACTOR_PCT) * NRT.DD_COMP_US_NET_PRICE_AMOUNT /100)    
     )  AS DECIMAL(18,6) )   
   WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
   THEN
    CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT *
     (COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )  
   ELSE  NRT.DD_COMP_US_NET_PRICE_AMOUNT
  END 
 ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (NRT.DD_SERVICE_FLAG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT
/*REBATE BGM NET END */
 ,NRT.POB_TYPE_CD /* Added as part of NRS MPOB Changes*/
 ,NRT.NRS_TRANSITION_FLG /* Added as part of NRS PI3 Changes*/
 ,NRT.SALES_MOTION_CD 
                  
,NRT.RU_SERVICE_CONTRACT_START_DTM  
,NRT.RU_SERVICE_CONTRACT_END_DTM 
,NRT.DV_CONTRACT_DURATION
, NRT.DV_ANNUALIZED_FLG
, NRT.DV_ANNUALIZED_US_NET_AMT 
,NRT.DV_MULTIYEAR_US_NET_AMT 
,CAST( NRT.DD_COMP_US_ORIG_LIST_PRICE AS DECIMAL(26,7)) AS DD_COMP_US_ORIG_LIST_PRICE
,CAST( NRT.DD_COMP_US_ORIG_EXT_LIST_PRICE AS DECIMAL(26,7)) AS DD_COMP_US_ORIG_EXT_LIST_PRICE
,NRT.BOOKINGS_POLICY_CD
,NRT.SOURCE_REP_ANNUAL_USD_AMT
     FROM $$NRTSTGDB.W_DRVD_NRT_BKG_TRX_INT  NRT
  /* ADDED AS PART OF JUNE 2018 RELEASE AMY-NRT SCOPE*/
  LEFT JOIN  $$COMREFVWDB.N_PRODUCT NP
   ON NRT.PRODUCT_KEY=NP.ITEM_KEY
 /*  LEFT OUTER JOIN (SELECT 
     SKU,INVENTORY_ITEM_ID,DURATION,END_DATE,BIZ_DEF_TERM,VERSION_NUMBER FROM $$ETLVWDB.EL_CG1_XXCFIR_PROD_SUBSCR_SKU 
     GROUP BY 1,2,3,4,5,6
     QUALIFY RANK() OVER (PARTITION BY SKU,INVENTORY_ITEM_ID ORDER BY END_DATE,VERSION_NUMBER DESC)=1
    )EL
ON NP.BK_PRODUCT_ID=EL.SKU
  LEFT JOIN $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT SOL
  ON SOL.SALES_ORDER_LINE_KEY = NRT.DV_SALES_ORDER_LINE_KEY */
  LEFT JOIN $$SLSORDVWDB.N_SOL_END_CUSTOMER NSOE
  ON NSOE.SALES_ORDER_LINE_KEY=NRT.DV_SALES_ORDER_LINE_KEY
  LEFT JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ENDCUST
  ON NSOE.END_CUSTOMER_KEY=ENDCUST.END_CUSTOMER_KEY
  LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
  ON NRT.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY
   
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
ON TSS.PRODUCT_KEY                    = NRT.PRODUCT_KEY
AND TSS.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE ='ERP' 
AND TSS.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
AND TSS.COUNTRY_FLG='Y'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS1
ON TSS1.PRODUCT_KEY                    = NRT.PRODUCT_KEY
AND TSS1.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS1.BKGS_MEASURE_TRANS_TYPE_CODE ='ERP' 
AND TSS1.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND TSS1.COUNTRY_FLG='Y'

  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
  ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
  AND L4_TSD.COUNTRY_FLG='N'
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
  ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
  AND L3_TSD.COUNTRY_FLG='N'
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
  ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
  AND L2_TSD.COUNTRY_FLG='N'
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
  ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
  AND L1_TSD.COUNTRY_FLG='N'
  
    LEFT OUTER JOIN
   (
   SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
   FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
   $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
   (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
       CASE WHEN PDATE.FISCAL_MONTH_NUMBER_INT = 12 THEN (PDATE.FISCAL_YEAR_NUMBER_INT+1)*100+1 ELSE PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1  END AS END_DATE
    FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL  PDATE
    )PDATE
   WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
   AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE
   AND CR.BK_TO_CURRENCY_CD='USD'
   )MCR   
   ON NRT.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
   AND  NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT


Post SQL : 



Target3 Name : W_DRVD_NRT_BKG_TRX


Pre SQL : 



Post SQL : 
/* COMMENTED AS PART OF BGM OCT MONTHLY RELEASEDELETE FROM $$NRTSTGDB.WI_MT_DRVD_NRT_BKG_TRX_BGM ;
 
 INSERT INTO $$NRTSTGDB.WI_MT_DRVD_NRT_BKG_TRX_BGM
 SELECT 
  NRT.BOOKINGS_MEASURE_KEY ,     
  NRT.PROCESS_DATE,
  NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT ,
 
 CASE WHEN NBF.COST_FACTOR_PCT IS NULL 
 THEN 0
 ELSE CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT * (NBF.COST_FACTOR_PCT/100.0000) )  AS DECIMAL(18,6) )                                    
 END  BGM_NON_STANDARD_COST_AMT ,
 
 CASE WHEN NBF.COST_FACTOR_PCT IS NULL 
 THEN 0
 ELSE (DD_COMP_US_NET_PRICE_AMOUNT - DD_COMP_US_COST_AMOUNT) - BGM_NON_STANDARD_COST_AMT
 END DV_BKG_GROSS_MGN_AMT,
 
 COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*NRT.DD_COMP_US_NET_PRICE_AMOUNT,0) AS FX_NET_PRICE_AMT,
 
 CAST( (DD_COMP_US_COST_AMOUNT -
  (FX_NET_PRICE_AMT*(COALESCE(NBF.COST_FACTOR_PCT,0))/100.0000 ) )AS DECIMAL(18,6))  
 DV_BGM_FX_COST_AMT 
 
 FROM $$NRTNCRVWDB.MT_DRVD_NRT_BKG_TRX  NRT
 
 
 INNER JOIN (SELECT FISCAL_YEAR_MONTH_INT,FISCAL_YEAR_NUMBER_INT FROM $$COMREFVWDB.R_FISCAL_MONTH_TO_YEAR WHERE CURRENT_FISCAL_MONTH_FLAG = 'Y') RFM
 ON RFM.FISCAL_YEAR_MONTH_INT = NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT
 
 INNER JOIN  $$COMREFVWDB.R_PRODUCTS NP
 ON NRT.PRODUCT_KEY=NP.ITEM_KEY
 
 LEFT JOIN $$SLSORDVWDB.N_BOOKINGS_COST_FACTOR NBF
 ON NBF.BK_PRODUCT_FAMILY_ID = NP.RU_BK_PRODUCT_FAMILY_ID
 AND NBF.SALES_TERRITORY_KEY = NRT.SALES_TERRITORY_KEY
 AND NBF.BK_FISCAL_YEAR_NUM_INT = NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT/100
 
 
 LEFT OUTER JOIN
 (
 SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
 FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
 $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
 (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
     PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1 AS END_DATE
                     FROM $$ETLVWDB.MBR_PROCESS_DATE PDATE
                     )PDATE
 WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
 AND CR.BK_TO_CURRENCY_CD='USD' 
 AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE
 )MCR   
 ON NRT.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
 AND  NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT 
 
 WHERE
 1=1 
 AND DD_SERVICE_FLAG = 'N' AND DD_COMP_US_NET_PRICE_AMOUNT <> 0 ;
 
 
  
 UPDATE DRVD FROM
 $$NRTSTGDB.W_DRVD_NRT_BKG_TRX DRVD ,$$NRTSTGDB.WI_MT_DRVD_NRT_BKG_TRX_BGM BGM
 SET 
   DV_BKG_GROSS_MGN_AMT = BGM.DV_BKG_GROSS_MGN_AMOUNT
 , DV_BGM_FX_COST_AMT =BGM.DV_BGM_FX_COST_AMOUNT
 , DV_BGM_NON_STANDARD_COST_AMT =BGM.DV_BGM_NON_STANDARD_COST_AMT
 , DV_FX_NET_PRICE_AMT =BGM.DV_FX_NET_PRICE_AMT
 WHERE  DRVD.BOOKINGS_MEASURE_KEY =BGM.BOOKINGS_MEASURE_KEY
  AND DRVD.PROCESS_DATE = BGM.PROCESS_DATE
  AND DRVD.DV_FISCAL_YEAR_MTH_NUMBER_INT = BGM.DV_FISCAL_YEAR_MTH_NUMBER_INT
  AND DRVD.DV_FISCAL_YEAR_MTH_NUMBER_INT = (SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_MONTH_TO_YEAR WHERE CURRENT_FISCAL_MONTH_FLAG = 'Y') 
  ;
 */
 
CREATE VOLATILE TABLE W_DRVD_NRT_TSS_BGM_BKG_TRX  AS
(
SELECT
BOOKINGS_MEASURE_KEY,
PROCESS_DATE,
BGM_PERC
FROM
(
SELECT 
BOOKINGS_MEASURE_KEY,
PROCESS_DATE,
COALESCE(SUM(DV_BKG_GROSS_MGN_AMT*100)/ NULLIFZERO (SUM(DV_BKG_REBATE_AMT)) ,0)AS BGM_PERC
FROM $$NRTSTGDB.W_DRVD_NRT_BKG_TRX
WHERE DD_SERVICE_FLAG='Y'
GROUP BY 1,2
)BGM
WHERE (BGM_PERC >98 OR BGM_PERC <=0)
)
WITH DATA PRIMARY INDEX(BOOKINGS_MEASURE_KEY,PROCESS_DATE) ON COMMIT PRESERVE ROWS; 


UPDATE NBM FROM $$NRTSTGDB.W_DRVD_NRT_BKG_TRX NBM,
( SEL MIN(FISCAL_YEAR_MONTH_INT) START_MONTH,MAX(FISCAL_YEAR_MONTH_INT) END_MONTH
FROM $$COMREFVWDB.R_FISCAL_MONTH_TO_YEAR WHERE FISCAL_YEAR_AGE BETWEEN 0 AND 3 AND FISCAL_MONTH_AGE>=0 )RFM
SET TSS_COUNTRY_FACTOR_KEY = -888,
DV_BKG_GROSS_MGN_AMT = 0,
DV_BGM_FX_COST_AMT = 0,
DV_FX_NET_PRICE_AMT=0,
DV_BKG_REBATE_AMT=0,
DV_FX_REBATE_PRICE_AMT=0
WHERE NBM.DD_SERVICE_FLAG = 'Y' AND NBM.DD_COMP_US_NET_PRICE_AMOUNT <> 0
AND NBM.DV_FISCAL_YEAR_MTH_NUMBER_INT BETWEEN RFM.START_MONTH AND RFM.END_MONTH
AND (
NBM.BOOKINGS_MEASURE_KEY,
NBM.PROCESS_DATE
) IN (SELECT 
BOOKINGS_MEASURE_KEY,
PROCESS_DATE
FROM W_DRVD_NRT_TSS_BGM_BKG_TRX
);

UPDATE NRT  FROM  $$NRTSTGDB.W_DRVD_NRT_BKG_TRX NRT , 
(
SELECT NRT.BOOKINGS_MEASURE_KEY,
NRT.PROCESS_DATE, 
DV_FISCAL_YEAR_MTH_NUMBER_INT,
		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  THEN 	
				TSS.TSS_COUNTRY_FACTOR_KEY
			WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
				COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
				ELSE -999 
		END 
 TSS_COUNTRY_FACTOR_KEY,

CASE WHEN DD_SERVICE_FLAG = 'Y'  AND DD_COMP_US_NET_PRICE_AMOUNT <> 0 
	 THEN
		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
		    THEN 	
				CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT - (TSS.COST_FACTOR_PCT*
						(CASE WHEN DOLLAR_ADJUSTABLE_FLG='Y' THEN NRT.DD_COMP_US_STANDARD_PRICE_AMT ELSE NRT.DD_COMP_US_LIST_PRICE_AMOUNT END)/100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
			THEN
				CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT *
					(COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE 0
		END 
	ELSE 0
 END DV_BKG_GROSS_MGN_AMOUNT,
 
 
 CASE WHEN DD_SERVICE_FLAG = 'Y'   AND DD_COMP_US_NET_PRICE_AMOUNT <> 0 AND MCR.SALES_TERRITORY_KEY IS NOT NULL
	THEN
		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
			THEN 	
				CAST( ( (TSS.COST_FACTOR_PCT*
					(CASE WHEN DOLLAR_ADJUSTABLE_FLG='Y' THEN NRT.DD_COMP_US_STANDARD_PRICE_AMT ELSE NRT.DD_COMP_US_LIST_PRICE_AMOUNT END)/100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
			THEN
				CAST( COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*NRT.DD_COMP_US_NET_PRICE_AMOUNT,0) *
					(COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 AS DECIMAL(18,6) )		
			ELSE 0
		END 
	ELSE 0
 END DV_BGM_FX_COST_AMOUNT,


CASE WHEN (NRT.DD_SERVICE_FLAG = 'Y' AND NRT.DD_COMP_US_NET_PRICE_AMOUNT <> 0 AND 
COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY,L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*NRT.DD_COMP_US_NET_PRICE_AMOUNT,0) 
ELSE 0
END AS DV_FX_NET_PRICE_AMT,

CASE WHEN NRT.DD_SERVICE_FLAG = 'Y' AND NRT.DD_COMP_US_NET_PRICE_AMOUNT <> 0 
	THEN
		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
			THEN 	
				CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT - (TSS.REBATE_FACTOR_PCT * NRT.DD_COMP_US_NET_PRICE_AMOUNT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
			THEN
				CAST( (NRT.DD_COMP_US_NET_PRICE_AMOUNT *
					(COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE  NRT.DD_COMP_US_NET_PRICE_AMOUNT
		END 
	ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (NRT.DD_SERVICE_FLAG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY,L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT

FROM $$NRTSTGDB.W_DRVD_NRT_BKG_TRX  NRT
LEFT JOIN  $$COMREFVWDB.N_PRODUCT NP
ON NRT.PRODUCT_KEY=NP.ITEM_KEY

LEFT JOIN $$SLSORDVWDB.N_SOL_END_CUSTOMER NSOE
ON NSOE.SALES_ORDER_LINE_KEY=NRT.DV_SALES_ORDER_LINE_KEY

LEFT JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ENDCUST
ON NSOE.END_CUSTOMER_KEY=ENDCUST.END_CUSTOMER_KEY

LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
ON NRT.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
ON TSS.PRODUCT_KEY                    = NRT.PRODUCT_KEY
AND TSS.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS.SALES_TERRITORY_NAME=COALESCE(HIER.L2_SALES_TERRITORY_NAME_CODE,HIER.L1_SALES_TERRITORY_NAME_CODE)
AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE = 'ERP'
AND TSS.COUNTRY_FLG='X'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
AND L4_TSD.COUNTRY_FLG='N'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
AND L3_TSD.COUNTRY_FLG='N'


LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
AND L2_TSD.COUNTRY_FLG='N'
LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND L1_TSD.COUNTRY_FLG='N'

 LEFT OUTER JOIN
(
SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
$$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
(SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
    PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1 AS END_DATE
	FROM $$ETLVWDB.MBR_PROCESS_DATE PDATE
	)PDATE
WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
AND CR.BK_TO_CURRENCY_CD='USD'  
AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE
)MCR   
ON NRT.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
AND  NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT   


WHERE DD_SERVICE_FLAG = 'Y'  AND DD_COMP_US_NET_PRICE_AMOUNT <> 0 
) HIST
SET 
  TSS_COUNTRY_FACTOR_KEY =HIST.TSS_COUNTRY_FACTOR_KEY
, DV_BKG_GROSS_MGN_AMT		= HIST.DV_BKG_GROSS_MGN_AMOUNT          
, DV_BGM_FX_COST_AMT	=HIST.DV_BGM_FX_COST_AMOUNT
, DV_FX_NET_PRICE_AMT =HIST.DV_FX_NET_PRICE_AMT
, DV_BKG_REBATE_AMT =HIST.DV_BKG_REBATE
, DV_FX_REBATE_PRICE_AMT =HIST.DV_FX_REBATE_PRICE_AMT
WHERE NRT.BOOKINGS_MEASURE_KEY          =HIST.BOOKINGS_MEASURE_KEY          
AND NRT.PROCESS_DATE=HIST.PROCESS_DATE
AND NRT.TSS_COUNTRY_FACTOR_KEY=-888;

 /*COLLECT STATS ON $$NRTSTGDB.W_DRVD_NRT_BKG_TRX;*/

CALL COLLECT_STATS_WRAP('$$NRTSTGDB','W_DRVD_NRT_BKG_TRX','D');