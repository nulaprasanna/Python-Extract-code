


Source1 Name : SQ_WI_EL_AR_NAPLD_SMC_DENORM_INCR1


Pre SQL : 



SQL Query : 
SELECT
  EL.AR_TRX_LINE_KEY,
  DV_ENTERPRISE_INV_SKU_ID,
  EL.SALES_MOTION_CD,
  DV_ALLOCATION_PCT,
  EL.DV_SERVICE_CATEGORY_CD,
  DV_OA_FLG,
  START_TV_DTM,
  END_TV_DTM,
  DV_SOURCE_TYPE,
  SALES_MOTION_TIMING_CD,
  NSOL.PRODUCT_KEY ERP_PRODUCT_KEY,
  NATL_SFH.BK_SERVICE_CATEGORY_ID AR_SKU_SERVICE_CATEGORY_ID,
  NSOL_SFH.BK_SERVICE_CATEGORY_ID ERP_SKU_SERVICE_CATEGORY_ID
  FROM $$ETLVWDB.EL_AR_NAPLD_SMC_DENORM EL
	INNER JOIN $$STGDB.WI_SFH_RUP NATL_SFH
	 ON EL.DV_ENTERPRISE_INV_SKU_ID = NATL_SFH.ITEM_KEY
	INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
	 ON EL.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
	INNER JOIN $$STGDB.WI_SFH_RUP NSOL_SFH
	 ON NSOL.PRODUCT_KEY = NSOL_SFH.ITEM_KEY
	WHERE EL.END_TV_DTM = '3500-01-01 00:00:00'
	  AND EL.SALES_MOTION_CD <> 'UNKNOWN' /* To exclude UNK SMC as it is not required for Deal based SMC logic */
	  AND ( AR_TRX_LINE_KEY, DV_ENTERPRISE_INV_SKU_ID ) IN (
		SELECT AR_TRX_LINE_KEY, DV_ENTERPRISE_INV_SKU_ID
		FROM $$ETLVWDB.EL_AR_NAPLD_SMC_DENORM EL
	     WHERE EL.EDW_UPDATE_DTM >= '$$LastExtractDate' )


Post SQL : 



Target1 Name : WI_EL_AR_NAPLD_SMC_DENORM_INCR3


Pre SQL : 
DELETE FROM $$STGDB.WI_SFH_RUP ALL ;

INSERT INTO $$STGDB.WI_SFH_RUP
SELECT ITEM_KEY,
CASE WHEN ITEM_COUNT > 1 THEN 'COMBINED SERVICES'
ELSE BK_SERVICE_CATEGORY_ID END AS BK_SERVICE_CATEGORY_ID
FROM (
SEL  ITEM_KEY,
BK_SERVICE_CATEGORY_ID,
COUNT(*) OVER(PARTITION BY ITEM_KEY) ITEM_COUNT
FROM $$COMREFVWDB.MT_SVC_FINANCE_HIERARCHY
) WI
GROUP BY 1,2 ;

COLLECT STATS COLUMN ( ITEM_KEY ) ON $$STGDB.WI_SFH_RUP ;

DELETE FROM $$STGDB.WI_EL_AR_NAPLD_SMC_DENORM_INCR ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_EL_AR_NAPLD_SMC_DENORM_INCR','D');


Source2 Name : SQ_WI_AR_NAPLD_SLS_MOTION_ATTRIB


Pre SQL : 



SQL Query : 
SELECT 
  SMC.AR_TRX_LINE_KEY,
  SMC.DV_ENTERPRISE_INV_SKU_ID,
  SMC.SALES_MOTION_CD,
  CAST(SUM(CAST(SMC.DV_ALLOCATION_PCT AS DECIMAL(18,6))/SMC.SUM_SPLIT) AS DECIMAL(18,6)) DV_ALLOCATION_PCT,
  SMC.DV_SERVICE_CATEGORY_CD,
  SMC.DV_OA_FLG,
  SMC.START_TV_DTM ,
  SMC.END_TV_DTM,
  SMC.DV_SOURCE_TYPE,
  SMC.SALES_MOTION_TIMING_CD
 FROM
 (
 SELECT
  EL.AR_TRX_LINE_KEY,
  DV_ENTERPRISE_INV_SKU_ID,
  SALES_MOTION_CD,
  DV_ALLOCATION_PCT,
  DV_SERVICE_CATEGORY_CD,
  DV_OA_FLG,
  DV_SOURCE_TYPE,
  SALES_MOTION_TIMING_CD,
  SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) SUM_SPLIT, 
  MAX(START_TV_DTM) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) START_TV_DTM, /* Changed logic as part of May 2nd release */
     MAX(END_TV_DTM) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) END_TV_DTM
  FROM
  $$STGDB.WI_EL_AR_NAPLD_SMC_DENORM_INCR EL
  WHERE EL.AR_SKU_SERVICE_CATEGORY_ID = 'COMBINED SERVICES'
  
  UNION ALL
  
 SELECT
  EL.AR_TRX_LINE_KEY,
  DV_ENTERPRISE_INV_SKU_ID,
  SALES_MOTION_CD,
  DV_ALLOCATION_PCT,
  DV_SERVICE_CATEGORY_CD,
  DV_OA_FLG,
  DV_SOURCE_TYPE,
  SALES_MOTION_TIMING_CD,
  SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) SUM_SPLIT, 
  MAX(START_TV_DTM) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) START_TV_DTM, /* Changed logic as part of May 2nd release */
     MAX(END_TV_DTM) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) END_TV_DTM
  FROM
  $$STGDB.WI_EL_AR_NAPLD_SMC_DENORM_INCR EL
  WHERE EL.AR_SKU_SERVICE_CATEGORY_ID = 'TECHNICAL SUPPORT SERVICES'
    AND EL.ERP_SKU_SERVICE_CATEGORY_ID = 'TECHNICAL SUPPORT SERVICES'
   
  UNION ALL
  
   SELECT
  EL.AR_TRX_LINE_KEY,
  DV_ENTERPRISE_INV_SKU_ID,
  SALES_MOTION_CD,
  DV_ALLOCATION_PCT,
  DV_SERVICE_CATEGORY_CD,
  DV_OA_FLG,
  DV_SOURCE_TYPE,
  SALES_MOTION_TIMING_CD,
  SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) SUM_SPLIT, 
  MAX(START_TV_DTM) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) START_TV_DTM, /* Changed logic as part of May 2nd release */
     MAX(END_TV_DTM) OVER(PARTITION BY AR_TRX_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID) END_TV_DTM
  FROM
  $$STGDB.WI_EL_AR_NAPLD_SMC_DENORM_INCR EL
  WHERE EL.AR_SKU_SERVICE_CATEGORY_ID = 'ADVANCED SERVICES'
    AND EL.ERP_SKU_SERVICE_CATEGORY_ID = 'ADVANCED SERVICES'
	
 ) SMC
  GROUP BY 1,2,3,5,6,7,8,9,10


Post SQL : 



Target2 Name : WI_AR_NAPLD_SLS_MOTION_ATTRIB1


Pre SQL : 
DELETE FROM $$STGDB.WI_AR_NAPLD_SLS_MOTION_ATTRIB ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_AR_NAPLD_SLS_MOTION_ATTRIB','D');


Source3 Name : SQ_MT_AR_NAPLD_SLS_MOTION_ATTRIB


Pre SQL : 



SQL Query : 
SELECT 
  INCR.AR_TRX_LINE_KEY,
  INCR.DV_ENTERPRISE_INV_SKU_ID,
  INCR.SALES_MOTION_CD,
  INCR.DV_ALLOCATION_PCT,
  INCR.DV_SERVICE_CATEGORY_CD,
  INCR.DV_OA_FLG,
  INCR.START_TV_DTM ,
  INCR.END_TV_DTM,
  INCR.DV_SOURCE_TYPE,
  INCR.SALES_MOTION_TIMING_CD,
  CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM, 
  USER AS EDW_CREATE_USER, 
  CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM, 
  USER AS EDW_UPDATE_USER,
  'N' AS MANUAL_OVERRIDE_ROLE,
  -999 AS REQUESTING_CSCO_WRKR_PRTY_KEY,
  'UNKNOWN' AS SLS_MTN_CORRECTION_CASE_NUM,
  'UNKNOWN' AS SLS_MTN_CORRECTION_CMNT,
  'UNKNOWN' AS SLS_MTN_CORRECTION_REASON_DESC
 FROM
$$STGDB.WI_AR_NAPLD_SLS_MOTION_ATTRIB INCR
WHERE NOT EXISTS ( SELECT 1
				FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT
				  WHERE INCR.AR_TRX_LINE_KEY = MT.AR_TRX_LINE_KEY
				    AND INCR.DV_ENTERPRISE_INV_SKU_ID = MT.DV_ENTERPRISE_INV_SKU_ID
					AND INCR.START_TV_DTM = MT.START_TV_DTM 
				  )
AND NOT EXISTS (SELECT 1 FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT1
                                        WHERE  INCR.AR_TRX_LINE_KEY = MT1.AR_TRX_LINE_KEY
				              AND INCR.DV_ENTERPRISE_INV_SKU_ID = MT1.DV_ENTERPRISE_INV_SKU_ID
                                        AND MT1.MANUAL_OVERRIDE_ROLE = 'Y'
                                        AND MT1.END_TV_DTM = '3500-01-01 00:00:00')


Post SQL : 



Target3 Name : MT_AR_NAPLD_SLS_MOTION_ATTRIB1


Pre SQL : 
/* START: SMR Aug 16th changes - To prevent unnecessary changes going into MT table */
DELETE FROM $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK ;

INSERT INTO $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK
SELECT
	AR_TRX_LINE_KEY,
    DV_ENTERPRISE_INV_SKU_ID,
    SALES_MOTION_CD,
    DV_ALLOCATION_PCT,
    DV_SERVICE_CATEGORY_CD,
    DV_OA_FLG,
    START_TV_DTM ,
    END_TV_DTM,
    DV_SOURCE_TYPE,
    SALES_MOTION_TIMING_CD,
    'N' AS MANUAL_OVERRIDE_ROLE,
    -999 AS REQUESTING_CSCO_WRKR_PRTY_KEY,
    'UNKNOWN' AS SLS_MTN_CORRECTION_CASE_NUM,
    'UNKNOWN' AS SLS_MTN_CORRECTION_CMNT,
    'UNKNOWN' AS SLS_MTN_CORRECTION_REASON_DESC
FROM $$STGDB.WI_AR_NAPLD_SLS_MOTION_ATTRIB WI
 WHERE EXISTS ( SEL 1 
				FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT_AR_N
				WHERE MT_AR_N.END_TV_DTM = '3500-01-01 00:00:00'
				  AND WI.AR_TRX_LINE_KEY = MT_AR_N.AR_TRX_LINE_KEY
				  AND WI.DV_ENTERPRISE_INV_SKU_ID = MT_AR_N.DV_ENTERPRISE_INV_SKU_ID
				  AND WI.SALES_MOTION_CD = MT_AR_N.SALES_MOTION_CD
				  AND WI.DV_ALLOCATION_PCT = MT_AR_N.DV_ALLOCATION_PCT
				  AND WI.DV_SERVICE_CATEGORY_CD = MT_AR_N.DV_SERVICE_CATEGORY_CD
				  AND WI.DV_SOURCE_TYPE = MT_AR_N.DV_SOURCE_TYPE )
AND NOT EXISTS (SELECT 1 FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT1
                                        WHERE  WI.AR_TRX_LINE_KEY = MT1.AR_TRX_LINE_KEY
				                        AND WI.DV_ENTERPRISE_INV_SKU_ID = MT1.DV_ENTERPRISE_INV_SKU_ID
                                        AND MT1.MANUAL_OVERRIDE_ROLE = 'Y'
                                        AND MT1.END_TV_DTM = '3500-01-01 00:00:00') ;

COLLECT STATS ON $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK;

DELETE FROM $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK
WHERE ( AR_TRX_LINE_KEY, DV_ENTERPRISE_INV_SKU_ID ) IN
		( SEL AR_TRX_LINE_KEY, DV_ENTERPRISE_INV_SKU_ID
			FROM $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK
			GROUP BY 1,2 HAVING ROUND(SUM(DV_ALLOCATION_PCT),4) <> 1.0000		
		) ;

DELETE FROM $$STGDB.WI_AR_NAPLD_SLS_MOTION_ATTRIB WI
WHERE EXISTS ( SEL 1 
				FROM $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK NO_CHNG
				WHERE WI.AR_TRX_LINE_KEY = NO_CHNG.AR_TRX_LINE_KEY
				  AND WI.DV_ENTERPRISE_INV_SKU_ID = NO_CHNG.DV_ENTERPRISE_INV_SKU_ID
			  ) ;
/* END: SMR Aug 16th changes - To prevent unnecessary changes going into MT table */

UPDATE MT 
  FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT,
  ( SELECT AR_TRX_LINE_KEY ,DV_ENTERPRISE_INV_SKU_ID
    , MAX(START_TV_DTM) MAX_STRT_DTM
      FROM $$STGDB.WI_AR_NAPLD_SLS_MOTION_ATTRIB 
	 GROUP BY 1,2
   ) WI
SET END_TV_DTM = WI.MAX_STRT_DTM - INTERVAL '1' SECOND,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE MT.AR_TRX_LINE_KEY = WI.AR_TRX_LINE_KEY
  AND MT.DV_ENTERPRISE_INV_SKU_ID = WI.DV_ENTERPRISE_INV_SKU_ID
  AND MT.START_TV_DTM <> WI.MAX_STRT_DTM
  AND MT.END_TV_DTM = '3500-01-01 00:00:00' 
AND MT.MANUAL_OVERRIDE_ROLE = 'N';


Post SQL : 
CALL COLLECT_STATS_WRAP ( '$$SLSORDVWDB','MT_AR_NAPLD_SLS_MOTION_ATTRIB','D' ) ;