


Source1 Name : SQ_WI_MT_DRVD_NRT_POS_RETRO_2


Pre SQL : 



SQL Query : 
SELECT 
	POS_DETAIL.ALLOCATED_POS_ADJ_KEY,
      POS_DETAIL.BK_POS_TRANSACTION_ID_INT,
	POS_DETAIL.PROCESS_DATE,
	POS_TRANS.BK_END_USER_WIPS_SITE_USE_KEY,
	'POS' BKGS_MEASURE_TRANS_TYPE_CODE
FROM 	
$$SLSORDVWDB.N_POS_TRANSACTION_LINE POS_TRANS,
$$SLSORDVWDB.N_DRVD_SCA_POS_ADJ_DETAILS POS_DETAIL
WHERE 
	POS_DETAIL.BK_POS_TRANSACTION_ID_INT = POS_TRANS.BK_POS_TRANSACTION_ID_INT AND 
	POS_TRANS.EDW_UPDATE_DATETIME > '$$LastExtractDate'
AND POS_DETAIL.DSV_OR_POS_TYPE_CD ='POS'


Post SQL : 



Target1 Name : WI_MT_DRVD_NRT_POS_TRX_RETRO_POS


Pre SQL : 
DELETE FROM $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO ALL;


Post SQL : 



Source2 Name : SQ_WI_MT_DRVD_NRT_POS_TRX_RETRO_3


Pre SQL : 



SQL Query : 
SELECT 
	POS_DETAIL.ALLOCATED_POS_ADJ_KEY,
POS_DETAIL.BK_POS_TRANSACTION_ID_INT,
	POS_DETAIL.PROCESS_DATE,
	COALESCE (BKG_TRANS.BK_END_USER_WIPS_SITE_USE_KEY, CAST (-999 AS INTEGER)),
	COALESCE (BKG_TRANS.BK_BILL_TO_WIPS_SITE_USE_KEY, CAST (-999 AS INTEGER)),
	COALESCE (BKG_TRANS.BK_SHIP_TO_WIPS_SITE_USE_KEY, CAST (-999 AS INTEGER)),
	COALESCE (BKG_TRANS.BK_SOLD_TO_WIPS_SITE_USE_KEY, CAST (-999 AS INTEGER)),
	'POS' BKGS_MEASURE_TRANS_TYPE_CODE
FROM 	
$$SLSORDVWDB.N_BKG_POS_TRANSACTION_LINE BKG_TRANS ,
$$SLSORDVWDB.N_DRVD_SCA_POS_ADJ_DETAILS POS_DETAIL
WHERE 
	POS_DETAIL.BK_POS_TRANSACTION_ID_INT = BKG_TRANS.BK_POS_TRANSACTION_ID_INT AND 
	BKG_TRANS.EDW_UPDATE_DTM > '$$LastExtractDate'
AND  POS_DETAIL.DSV_OR_POS_TYPE_CD ='DSV_BKG'


Post SQL : 



Target2 Name : WI_MT_DRVD_NRT_POS_TRX_RETRO_BKG


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO;


Source3 Name : SQ_WI_DRVD_NRT_POS_TRX_1


Pre SQL : 
COLLECT STATISTICS COLUMN (EDW_UPDATE_DATETIME) ON $$SLSORDDB.N_DRVD_SCA_POS_ADJ_DETAILS;


SQL Query : 
SELECT    
   POS_DETAIL.ALLOCATED_POS_ADJ_KEY     ,
    COALESCE(POS_DETAIL.BK_SALES_REP_NUMBER ,'-999')     AS BK_SALES_REP_NUM  ,
   POS_DETAIL.SALES_CREDIT_TYPE_CODE       AS SALES_CREDIT_TYPE_CD  ,
   COALESCE(POS_DETAIL.SALES_COMMISSION_PERCENTAGE,CAST( 0.00 AS DECIMAL(18,6)))    AS  BOOKINGS_SPLIT_PCT  ,
   COALESCE(POS_DETAIL.EXTENDED_LIST_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6)))      AS DD_COMP_US_LIST_PRICE_AMOUNT  ,
   COALESCE(POS_DETAIL.EXTENDED_COST_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6)))    AS DD_COMP_US_COST_AMOUNT  ,
   COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6)))        AS DD_COMP_US_NET_PRICE_AMOUNT  ,
    COALESCE(POS_DETAIL.FORWARD_REVERSE_CODE  ,'=')            AS FORWARD_REVERSE_FLG  ,
   COALESCE(POS_DETAIL.BK_POS_TRANSACTION_ID_INT ,CAST(-9999 AS INTEGER))  AS BK_POS_TRANSACTION_ID_INT  ,
   COALESCE(POS_DETAIL.DISTRIBUTOR_OFFSET_FLAG  ,'=')      AS DISTRIBUTOR_OFFSET_FLG  ,
     COALESCE(POS_DETAIL.SALES_TERRITORY_KEY  ,CAST(-999 AS INTEGER))      AS SALES_TERRITORY_KEY  ,
   POS_DETAIL.ADJUSTMENT_CODE         AS ADJUSTMENT_CD  ,
    COALESCE(POS_DETAIL.DESCRIPTION ,'UNKNOWN')   AS DESCRIPTION,
   POS_DETAIL.SALES_CHANNEL_CODE        AS SALES_CHANNEL_CD  ,
     COALESCE(POS_DETAIL.SALES_ADJUSTMENT_DATETIME ,CURRENT_TIMESTAMP(0))      AS TRANSACTION_DTM  ,
   COALESCE(POS_DETAIL.SERVICE_BOOKING_FLAG ,'=')       AS SERVICE_FLG  ,
   COALESCE(POS_DETAIL.DV_FISCAL_YEAR_MTH_NUMBER_INT ,CAST(-999 AS INTEGER))    AS DV_FISCAL_YEAR_MTH_NUMBER_INT  ,
    COALESCE(POS_DETAIL.PRODUCT_KEY ,CAST(-999 AS INTEGER))       AS PRODUCT_KEY  ,
   POS_DETAIL.PROCESS_DATE  AS  BOOKINGS_PROCESS_DT  ,
   COALESCE(POS_DETAIL.DV_CORPORATE_BOOKING_FLG ,'=')    AS CORPORATE_BOOKINGS_FLG  ,
   COALESCE(POS_DETAIL.ADJUSTMENT_QTY ,CAST ( 0.00 AS DECIMAL(18,6)))      AS DD_EXTENDED_QTY,
   COALESCE(POS_DETAIL.BK_OFFER_ATTRIBUTION_ID_INT ,CAST(-9999 AS INTEGER ))   AS SK_OFFER_ATTRIBUTION_ID_INT,
   COALESCE(POS_DETAIL.TOP_SKU_ATTRIBUTED_PRODUCT_KEY ,CAST(-999 AS INTEGER)) AS DV_PRODUCT_KEY  ,
   COALESCE(POS_DETAIL.ATTRIBUTION_TYPE_CD ,'UNKNOWN')           AS DV_ATTRIBUTION_TYPE_CD,
   COALESCE(POS_TRANS.BK_WIPS_ORIGINATOR_ID_INT ,CAST(-999 AS INTEGER))   AS BK_WIPS_ORIGINATOR_ID_INT  ,
   COALESCE(POS_TRANS.BK_SHIP_TO_WIPS_SITE_USE_KEY,CAST(-999 AS INTEGER))  AS SHIP_TO_CUSTOMER_KEY  ,
   COALESCE(POS_TRANS.BK_BILL_TO_WIPS_SITE_USE_KEY,CAST(-999 AS INTEGER))  AS BILL_TO_CUSTOMER_KEY  ,
   COALESCE(POS_TRANS.BK_END_USER_WIPS_SITE_USE_KEY,CAST(-999 AS INTEGER))  AS END_CUSTOMER_KEY  ,
   COALESCE(POS_TRANS.BK_SOLD_TO_WIPS_SITE_USE_KEY,CAST(-999 AS INTEGER))  AS SOLD_TO_CUSTOMER_KEY  ,
    CASE    WHEN POS_DETAIL.DISTRIBUTOR_OFFSET_FLAG = 'Y' THEN CAST (-888 AS INTEGER) 
            ELSE COALESCE(POS_TRANS.BK_END_USER_WIPS_SITE_USE_KEY, CAST(-999 AS INTEGER))
    END AS DV_END_CUSTOMER_KEY  ,
   POS_DETAIL.DV_REVENUE_RECOGNITION_FLG  ,
   POS_DETAIL.DV_NET_SPREAD_FLG   ,
   CURRENT_TIMESTAMP(0)        AS EDW_CREATE_DTM  ,
    USER           AS EDW_CREATE_USER  ,
   CURRENT_TIMESTAMP(0)        AS EDW_UPDATE_DTM  ,
   USER           AS EDW_UPDATE_USER    ,
   /*ADDED AS PART OF DSV Q1FY16 */
   POS_DETAIL.DSV_OR_POS_TYPE_CD,
   POS_TRANS.RU_RSLR_TO_DISTI_PO_NUMBER,
   POS_TRANS.POS_TRX_LINE_POSTED_DATE,
   POS_TRANS.BK_DEAL_ID,
   POS_DETAIL.POS_RETURN_ROLE,
   POS_TRANS.BK_TOP_BKGS_POS_TRX_ID_INT,
   POS_TRANS.BK_BOOKING_POS_TRX_ID_INT AS BOOKING_POS_TRX_ID_INT,
   POS_DETAIL.CHANNEL_BOOKING_FLAG AS CHANNEL_BOOKING_FLG
   /*    BGM changes starts here*/
  
   ,CASE WHEN POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y'  AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0 
    THEN
     CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
      THEN  
       CAST( (COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) - (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT) * COALESCE(POS_DETAIL.EXTENDED_LIST_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) /100)    
        )  AS DECIMAL(18,6) )   
      WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
      THEN
       CAST( (COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) *
        (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )  
      ELSE 0
     END 
    ELSE 0
    END  DV_BKG_GROSS_MGN_AMOUNT
   
   ,
   CASE WHEN POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y'  AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0 AND MCR.SALES_TERRITORY_KEY IS NOT NULL
    THEN
     CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
      THEN  
       CAST( ( (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT)*COALESCE(POS_DETAIL.EXTENDED_LIST_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) /100)    
       )  AS DECIMAL(18,6) )   
      WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
      THEN
       CAST( COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) *
        (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 
       AS DECIMAL(18,6) )  
      ELSE 0
     END 
    ELSE 0
    END  DV_BGM_FX_COST_AMOUNT
    
    
   , CASE WHEN (POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y' AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0 AND 
   COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
   THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))),0) 
   ELSE 0
    END AS DV_FX_NET_PRICE_AMT
     ,
   CASE WHEN POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y'  AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0 
       THEN
           CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  THEN     
                   COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY)
               WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
                   COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
                   ELSE -999 
           END 
   ELSE -999 END TSS_COUNTRY_FACTOR_KEY,
    /*    BGM changes ends here*/
 COALESCE(POS_DETAIL.DV_EXTND_LIST_PRICE_LOCAL_AMT,CAST(0.0 AS DECIMAL(18,6)) )AS DV_LOCAL_EXTND_LIST_PRICE_AMT,
 COALESCE(POS_DETAIL.UNIT_LIST_PRICE_LOCAL_AMT,CAST(0.0 AS DECIMAL(18,6)) )AS LOCAL_UNIT_LIST_PRICE_AMT,
 COALESCE(POS_DETAIL.DV_UNIT_LIST_PRICE_USD_AMT,CAST(0.0 AS DECIMAL(18,6))) AS DV_UNIT_LIST_PRICE_USD_AMT,
 0 DV_BGM_NON_STANDARD_COST_AMT  /*added as part product BGM - Q1FY18 release */
/*REBATE BGM NET START */
,CASE WHEN POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y' AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0
	THEN
		CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
			THEN 	
				CAST( (COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) - (COALESCE(TSS.REBATE_FACTOR_PCT,TSS1.REBATE_FACTOR_PCT) * POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
			THEN
				CAST( (COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6)))*
					(COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE  POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT
		END 
	ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT
/*REBATE BGM NET END */
  ,POS_DETAIL.POB_TYPE_CD
  ,POS_DETAIL.RU_SERVICE_CONTRACT_START_DTM
  ,POS_DETAIL.RU_SERVICE_CONTRACT_END_DTM
  ,POS_DETAIL.DV_CONTRACT_DURATION
  ,POS_DETAIL.DV_ANNUALIZED_FLG
  ,POS_DETAIL.DV_ANNUALIZED_US_NET_AMT
  ,POS_DETAIL.DV_MULTI_YEAR_US_NET_AMT
  ,POS_DETAIL.POS_ANNUALIZED_BKG_TRX_KEY
,POS_DETAIL.TRANSACTIONAL_ACV_FLG
,POS_DETAIL.HISTORY_FLG
,POS_DETAIL.ANNUAL_FLG
,POS_DETAIL.ORIG_COMP_US_NET_PRICE_AMT
,POS_DETAIL.ORIG_ANNUALIZED_US_NET_AMT
,POS_DETAIL.ORIG_MULTIYEAR_US_NET_AMT
,POS_DETAIL.DV_RUNNING_TOTAL_USD_AMT
,POS_DETAIL.DV_ORDER_VALUE_USD_AMT AS DV_ORDER_VALUE_USD_AMOUNT
,POS_DETAIL.BOOKINGS_POLICY_CD
   FROM $$SLSORDVWDB.N_DRVD_SCA_POS_ADJ_DETAILS POS_DETAIL 
   LEFT OUTER JOIN $$SLSORDVWDB.N_POS_TRANSACTION_LINE POS_TRANS 
   ON POS_DETAIL.BK_POS_TRANSACTION_ID_INT = POS_TRANS.BK_POS_TRANSACTION_ID_INT
       /*    BGM changes starts here*/
   LEFT JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ENDCUST
   ON POS_TRANS.BK_END_USER_WIPS_SITE_USE_KEY=ENDCUST.END_CUSTOMER_KEY      
   
   LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
   ON POS_DETAIL.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY
   
LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
ON TSS.PRODUCT_KEY                    = POS_DETAIL.PRODUCT_KEY
AND TSS.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
AND TSS.COUNTRY_FLG='Y'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS1
ON TSS1.PRODUCT_KEY                    = POS_DETAIL.PRODUCT_KEY
AND TSS1.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS1.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS1.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND TSS1.COUNTRY_FLG='Y'
   
   LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
   ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
   AND L4_TSD.COUNTRY_FLG='N'
   
   LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
   ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
   AND L3_TSD.COUNTRY_FLG='N'
   
   
   LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
   ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
   AND L2_TSD.COUNTRY_FLG='N'
   
   LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
   ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
   AND L1_TSD.COUNTRY_FLG='N'
   
    LEFT OUTER JOIN
   (
   SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
   FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
   $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
   (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
       CASE WHEN PDATE.FISCAL_MONTH_NUMBER_INT = 12 THEN (PDATE.FISCAL_YEAR_NUMBER_INT+1)*100+1 ELSE PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1  END AS END_DATE
       FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL PDATE
       )PDATE
   WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
   AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE  AND CR.BK_TO_CURRENCY_CD='USD'
   )MCR   
   ON POS_DETAIL.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
   AND  POS_DETAIL.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT   
   /*    BGM changes ends here*/
   WHERE  POS_DETAIL.EDW_UPDATE_DATETIME > '$$LastExtractDate'
   AND POS_DETAIL.DSV_OR_POS_TYPE_CD ='POS' 
   
   /* Added this UNION as part of Q1FY15 DSV*/
   UNION 
   
   SELECT    
   POS_DETAIL.ALLOCATED_POS_ADJ_KEY     ,
    COALESCE(POS_DETAIL.BK_SALES_REP_NUMBER ,'-999')     AS BK_SALES_REP_NUM  ,
   POS_DETAIL.SALES_CREDIT_TYPE_CODE       AS SALES_CREDIT_TYPE_CODE  ,
   COALESCE(POS_DETAIL.SALES_COMMISSION_PERCENTAGE,CAST( 0.00 AS DECIMAL(18,6)))    AS  BOOKINGS_SPLIT_PCT  ,
   COALESCE(POS_DETAIL.EXTENDED_LIST_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6)))      AS DD_COMP_US_LIST_PRICE_AMOUNT  ,
   COALESCE(POS_DETAIL.EXTENDED_COST_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6)))    AS DD_COMP_US_COST_AMOUNT  ,
   COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6)))          AS DD_COMP_US_NET_PRICE_AMOUNT  ,
    COALESCE(POS_DETAIL.FORWARD_REVERSE_CODE  ,'=')            AS FORWARD_REVERSE_FLG  ,
   COALESCE(POS_DETAIL.BK_POS_TRANSACTION_ID_INT ,CAST(-9999 AS INTEGER))  AS BK_POS_TRANSACTION_ID_INT  ,
   COALESCE(POS_DETAIL.DISTRIBUTOR_OFFSET_FLAG  ,'=')      AS DISTRIBUTOR_OFFSET_FLG  ,
     COALESCE(POS_DETAIL.SALES_TERRITORY_KEY  ,CAST(-999 AS INTEGER))     AS SALES_TERRITORY_KEY  ,
   POS_DETAIL.ADJUSTMENT_CODE         AS ADJUSTMENT_CD  ,
    COALESCE(POS_DETAIL.DESCRIPTION ,'UNKNOWN')   AS DESCRIPTION,
   POS_DETAIL.SALES_CHANNEL_CODE        AS SALES_CHANNEL_CD  ,
     COALESCE(POS_DETAIL.SALES_ADJUSTMENT_DATETIME ,CURRENT_TIMESTAMP(0))      AS TRANSACTION_DTM  ,
   COALESCE(POS_DETAIL.SERVICE_BOOKING_FLAG ,'=')       AS SERVICE_FLG  ,
   COALESCE(POS_DETAIL.DV_FISCAL_YEAR_MTH_NUMBER_INT ,CAST(-999 AS INTEGER))    AS DV_FISCAL_YEAR_MTH_NUMBER_INT  ,
   COALESCE(POS_DETAIL.PRODUCT_KEY ,CAST(-999 AS INTEGER))       AS PRODUCT_KEY  ,
   POS_DETAIL.PROCESS_DATE  AS  BOOKINGS_PROCESS_DT  ,
   COALESCE(POS_DETAIL.DV_CORPORATE_BOOKING_FLG ,'=')    AS CORPORATE_BOOKINGS_FLG  ,
   COALESCE(POS_DETAIL.ADJUSTMENT_QTY ,CAST ( 0.00 AS DECIMAL(18,6)))      AS DD_EXTENDED_QTY,
   COALESCE(POS_DETAIL.BK_OFFER_ATTRIBUTION_ID_INT ,CAST(-9999 AS INTEGER ))   AS SK_OFFER_ATTRIBUTION_ID_INT,
   COALESCE(POS_DETAIL.TOP_SKU_ATTRIBUTED_PRODUCT_KEY ,CAST(-999 AS INTEGER)) AS DV_PRODUCT_KEY  ,
   COALESCE(POS_DETAIL.ATTRIBUTION_TYPE_CD ,'UNKNOWN')           AS DV_ATTRIBUTION_TYPE_CD,
   COALESCE(BKG_TRANS.BK_WIPS_ORIGINATOR_ID_INT ,CAST(-999 AS INTEGER))   AS BK_WIPS_ORIGINATOR_ID_INT  ,
   COALESCE(BKG_TRANS.BK_SHIP_TO_WIPS_SITE_USE_KEY,CAST(-999 AS INTEGER))  AS SHIP_TO_CUSTOMER_KEY  ,
   COALESCE(BKG_TRANS.BK_BILL_TO_WIPS_SITE_USE_KEY,CAST(-999 AS INTEGER))  AS BILL_TO_CUSTOMER_KEY  ,
   COALESCE(BKG_TRANS.BK_END_USER_WIPS_SITE_USE_KEY,CAST(-999 AS INTEGER))  AS END_CUSTOMER_KEY  ,
   COALESCE(BKG_TRANS.BK_SOLD_TO_WIPS_SITE_USE_KEY,CAST(-999 AS INTEGER))  AS SOLD_TO_CUSTOMER_KEY  ,
    CASE    WHEN POS_DETAIL.DISTRIBUTOR_OFFSET_FLAG = 'Y' THEN CAST (-888 AS INTEGER) 
            ELSE COALESCE(BKG_TRANS.BK_END_USER_WIPS_SITE_USE_KEY, CAST(-999 AS INTEGER))    
    END AS DV_END_CUSTOMER_KEY  ,
   POS_DETAIL.DV_REVENUE_RECOGNITION_FLG  ,
   POS_DETAIL.DV_NET_SPREAD_FLG   ,
   CURRENT_TIMESTAMP(0)        AS EDW_CREATE_DTM  ,
    USER           AS EDW_CREATE_USER  ,
   CURRENT_TIMESTAMP(0)        AS EDW_UPDATE_DTM  ,
   USER           AS EDW_UPDATE_USER  ,
   /*ADDED AS PART OF DSV Q1FY16 */
   POS_DETAIL.DSV_OR_POS_TYPE_CD,
   BKG_TRANS.RU_RSLR_TO_DISTI_PO_NUMBER,
   BKG_TRANS.POS_TRX_LINE_POSTED_DATE,
   BKG_TRANS.BK_DEAL_ID,
   POS_DETAIL.POS_RETURN_ROLE,
   BKG_TRANS.BK_TOP_BKGS_POS_TRX_ID_INT,
   -9999 AS BK_BOOKING_POS_TRX_ID_INT,
   POS_DETAIL.CHANNEL_BOOKING_FLAG AS CHANNEL_BOOKING_FLG
   /*    BGM changes starts here*/
   
   ,CASE WHEN POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y'  AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0 
    THEN
     CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
      THEN  
       CAST( (COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) - (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT) * COALESCE(POS_DETAIL.EXTENDED_LIST_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) /100)    
        )  AS DECIMAL(18,6) )   
      WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
      THEN
       CAST( (COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) *
        (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )  
      ELSE 0
     END 
    ELSE 0
    END DV_BKG_GROSS_MGN_AMOUNT
   
   ,
   CASE WHEN POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y'  AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0  AND MCR.SALES_TERRITORY_KEY IS NOT NULL
    THEN
     CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
      THEN  
       CAST( ( (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT)*COALESCE(POS_DETAIL.EXTENDED_LIST_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) /100)    
       )  AS DECIMAL(18,6) )   
      WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
      THEN
       CAST( COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) *
        (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 
       AS DECIMAL(18,6) )  
      ELSE 0
     END 
    ELSE 0
    END DV_BGM_FX_COST_AMOUNT
    
    
   ,CASE WHEN (POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y' AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0 AND 
   COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
   THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))),0) 
   ELSE 0
    END AS DV_FX_NET_PRICE_AMT
     ,
   CASE WHEN POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y'  AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0 
       THEN
           CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  THEN     
                   COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY)
               WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
                   COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
                   ELSE -999 
           END 
   ELSE -999 END  TSS_COUNTRY_FACTOR_KEY,
    /*    BGM changes ends here*/
   COALESCE(POS_DETAIL.DV_EXTND_LIST_PRICE_LOCAL_AMT,CAST(0.0 AS DECIMAL(18,6))) AS DV_LOCAL_EXTND_LIST_PRICE_AMT,
 COALESCE(POS_DETAIL.UNIT_LIST_PRICE_LOCAL_AMT,CAST(0.0 AS DECIMAL(18,6))) AS LOCAL_UNIT_LIST_PRICE_AMT,
 COALESCE(POS_DETAIL.DV_UNIT_LIST_PRICE_USD_AMT,CAST(0.0 AS DECIMAL(18,6))) AS DV_UNIT_LIST_PRICE_USD_AMT ,
 0 DV_BGM_NON_STANDARD_COST_AMT /*added as part product BGM - Q1FY18 release */
,/*REBATE BGM NET START */
CASE WHEN POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y' AND COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) <> 0
	THEN
		CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
			THEN 	
				CAST( (COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6))) - (COALESCE(TSS.REBATE_FACTOR_PCT,TSS1.REBATE_FACTOR_PCT) * POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
			THEN
				CAST( (COALESCE(POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT,CAST( 0.000000  AS DECIMAL(18,6)))*
					(COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE  POS_DETAIL.EXTENDED_NET_PRICE_USD_AMOUNT
		END 
	ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (POS_DETAIL.SERVICE_BOOKING_FLAG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT
/*REBATE BGM NET END */
,POS_DETAIL.POB_TYPE_CD
,POS_DETAIL.RU_SERVICE_CONTRACT_START_DTM
,POS_DETAIL.RU_SERVICE_CONTRACT_END_DTM
,POS_DETAIL.DV_CONTRACT_DURATION
,POS_DETAIL.DV_ANNUALIZED_FLG
,POS_DETAIL.DV_ANNUALIZED_US_NET_AMT
,POS_DETAIL.DV_MULTI_YEAR_US_NET_AMT
,POS_DETAIL.POS_ANNUALIZED_BKG_TRX_KEY
,POS_DETAIL.TRANSACTIONAL_ACV_FLG
,POS_DETAIL.HISTORY_FLG
,POS_DETAIL.ANNUAL_FLG
,POS_DETAIL.ORIG_COMP_US_NET_PRICE_AMT
,POS_DETAIL.ORIG_ANNUALIZED_US_NET_AMT
,POS_DETAIL.ORIG_MULTIYEAR_US_NET_AMT
,POS_DETAIL.DV_RUNNING_TOTAL_USD_AMT
,POS_DETAIL.DV_ORDER_VALUE_USD_AMT AS DV_ORDER_VALUE_USD_AMOUNT
,POS_DETAIL.BOOKINGS_POLICY_CD
   FROM $$SLSORDVWDB.N_DRVD_SCA_POS_ADJ_DETAILS POS_DETAIL 
   LEFT OUTER JOIN $$SLSORDVWDB.N_BKG_POS_TRANSACTION_LINE BKG_TRANS 
   ON POS_DETAIL.BK_POS_TRANSACTION_ID_INT = BKG_TRANS.BK_POS_TRANSACTION_ID_INT
       /*    BGM changes starts here*/
   LEFT JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ENDCUST
   ON BKG_TRANS.BK_END_USER_WIPS_SITE_USE_KEY=ENDCUST.END_CUSTOMER_KEY      
   
   LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
   ON POS_DETAIL.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY
   
LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
ON TSS.PRODUCT_KEY                    = POS_DETAIL.PRODUCT_KEY
AND TSS.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
AND TSS.COUNTRY_FLG='Y'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS1
ON TSS1.PRODUCT_KEY                    = POS_DETAIL.PRODUCT_KEY
AND TSS1.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS1.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS1.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND TSS1.COUNTRY_FLG='Y'
   
   LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
   ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
   AND L4_TSD.COUNTRY_FLG='N'
   
   LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
   ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
   AND L3_TSD.COUNTRY_FLG='N'
   
   
   LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
   ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
   AND L2_TSD.COUNTRY_FLG='N'
   
   LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
   ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
   AND L1_TSD.COUNTRY_FLG='N'
  
    LEFT OUTER JOIN
   (
   SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
   FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
   $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
   (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
       CASE WHEN PDATE.FISCAL_MONTH_NUMBER_INT = 12 THEN (PDATE.FISCAL_YEAR_NUMBER_INT+1)*100+1 ELSE PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1  END AS END_DATE
       FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL PDATE
       )PDATE
   WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
   AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE  AND CR.BK_TO_CURRENCY_CD='USD'
   )MCR   
   ON POS_DETAIL.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
   AND  POS_DETAIL.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT   
    /*    BGM changes ends here*/
   WHERE  POS_DETAIL.EDW_UPDATE_DATETIME > '$$LastExtractDate'
   AND POS_DETAIL.DSV_OR_POS_TYPE_CD ='DSV_BKG'


Post SQL : 



Target3 Name : WI_DRVD_NRT_POS_TRX


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NRT_POS_TRX  ALL;


Post SQL : 
/*COMMENTED AS PART OF BGM Oct Monthly Release
 
 DELETE FROM $$STGDB.WI_MT_DRVD_NRT_POS_TRX_BGM ;
 
 INSERT INTO $$STGDB.WI_MT_DRVD_NRT_POS_TRX_BGM 
 SELECT 
  NRT.ALLOCATED_POS_ADJ_KEY,
  NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT ,
 
 CASE WHEN NBF.COST_FACTOR_PCT IS NULL 
 THEN 0
 ELSE CAST( (NRT.DD_COMP_US_NET_PRICE_AMT * (NBF.COST_FACTOR_PCT/100.0000) )  AS DECIMAL(18,6) )                                    
 END  BGM_NON_STANDARD_COST_AMT ,
 
 CASE WHEN NBF.COST_FACTOR_PCT IS NULL 
 THEN 0
 ELSE (DD_COMP_US_NET_PRICE_AMT - DD_COMP_US_COST_AMT) - BGM_NON_STANDARD_COST_AMT 
 END DV_BKG_GROSS_MGN_AMT,
 
 COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*NRT.DD_COMP_US_NET_PRICE_AMT,0) AS FX_NET_PRICE_AMT,
 
 CAST( (DD_COMP_US_COST_AMT -(FX_NET_PRICE_AMT*(COALESCE(NBF.COST_FACTOR_PCT,0))/100.0000 ) )AS DECIMAL(18,6)) AS DV_BGM_FX_COST_AMT 
 
 FROM $$SLSORDVWDB.MT_DRVD_NRT_POS_TRX  NRT
 
 
 INNER JOIN (SELECT FISCAL_YEAR_MONTH_INT,FISCAL_YEAR_NUMBER_INT FROM $$COMREFVWDB.R_FISCAL_MONTH_TO_YEAR WHERE CURRENT_FISCAL_MONTH_FLAG = 'Y') RFM
 ON RFM.FISCAL_YEAR_MONTH_INT = NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT
 
 INNER JOIN  $$COMREFVWDB.R_PRODUCTS NP
 ON NRT.PRODUCT_KEY=NP.ITEM_KEY
 
 LEFT JOIN $$SLSORDVWDB.N_BOOKINGS_COST_FACTOR NBF
 ON NBF.BK_PRODUCT_FAMILY_ID = NP.RU_BK_PRODUCT_FAMILY_ID
 AND NBF.SALES_TERRITORY_KEY = NRT.SALES_TERRITORY_KEY
 AND NBF.BK_FISCAL_YEAR_NUM_INT = NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT/100
 
 LEFT OUTER JOIN
 (
 SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
 FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
 $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
 (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
     PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1 AS END_DATE
                     FROM $$ETLVWDB.MBR_PROCESS_DATE PDATE
                     )PDATE
 WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
 AND CR.BK_TO_CURRENCY_CD='USD' 
 AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE
 )MCR   
 ON NRT.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
 AND  NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT  
 
 WHERE
 1=1 
 AND NRT.SERVICE_FLG = 'N' AND DD_COMP_US_NET_PRICE_AMT <> 0 
 ;
 
 
 UPDATE NRT FROM
 $$STGDB.WI_DRVD_NRT_POS_TRX NRT ,$$STGDB.WI_MT_DRVD_NRT_POS_TRX_BGM BGM
 SET 
   DV_BKG_GROSS_MGN_AMOUNT = BGM.DV_BKG_GROSS_MGN_AMOUNT
 , DV_BGM_FX_COST_AMOUNT =BGM.DV_BGM_FX_COST_AMOUNT
 , DV_BGM_NON_STANDARD_COST_AMT =BGM.DV_BGM_NON_STANDARD_COST_AMT
 , DV_FX_NET_PRICE_AMT =BGM.DV_FX_NET_PRICE_AMT
 WHERE NRT.ALLOCATED_POS_ADJ_KEY          =BGM.ALLOCATED_POS_ADJ_KEY  
 AND NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT = BGM.DV_FISCAL_YEAR_MTH_NUMBER_INT
  AND NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT = (SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_MONTH_TO_YEAR WHERE CURRENT_FISCAL_MONTH_FLAG = 'Y') 
  ;
 
*/

COLLECT STATS ON $$STGDB.WI_DRVD_NRT_POS_TRX;


Source4 Name : SQ_WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM


Pre SQL : 



SQL Query : 
/*INSERT FOR CAPTURING  END CUSTOMER CHANGE RECORDS */
   SELECT POS_TRX.ALLOCATED_POS_ADJ_KEY
   ,POS_TRX.BK_POS_TRANSACTION_ID_INT
   ,POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT
   ,POS_TRX.BOOKINGS_PROCESS_DT
   ,POS_TRX.DSV_OR_POS_TYPE_CD  ,
  CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
      THEN
          CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  THEN     
                  COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY)
              WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
                  COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
                  ELSE -999 
          END 
  ELSE -999 END TSS_COUNTRY_FACTOR_KEY
  
  ,CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
   THEN
    CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
     THEN  
      CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT - (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT) * POS_TRX.DD_COMP_US_LIST_PRICE_AMT /100)    
       )  AS DECIMAL(18,6) )   
     WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
     THEN
      CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT *
       (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )  
     ELSE 0
    END 
   ELSE 0
   END  DV_BKG_GROSS_MGN_AMOUNT
  
  ,
  CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 AND MCR.SALES_TERRITORY_KEY IS NOT NULL
   THEN
    CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
     THEN  
      CAST( ( (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT)*POS_TRX.DD_COMP_US_LIST_PRICE_AMT /100)    
      )  AS DECIMAL(18,6) )   
     WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
     THEN
      CAST( 
     COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_TRX.DD_COMP_US_NET_PRICE_AMT,0) *
       (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 
      AS DECIMAL(18,6) )  
     ELSE 0
    END 
   ELSE 0
   END  DV_BGM_FX_COST_AMOUNT
   
   
  , CASE WHEN (POS_TRX.SERVICE_FLG = 'Y' AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 AND 
  COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
  THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_TRX.DD_COMP_US_NET_PRICE_AMT,0) 
  ELSE 0
   END AS DV_FX_NET_PRICE_AMT
, /*REBATE BGM NET START */
CASE WHEN POS_TRX.SERVICE_FLG = 'Y' AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
	THEN
		CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
			THEN 	
				CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT - (COALESCE(TSS.REBATE_FACTOR_PCT,TSS1.REBATE_FACTOR_PCT) * POS_TRX.DD_COMP_US_NET_PRICE_AMT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
			THEN
				CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT *
					(COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE  POS_TRX.DD_COMP_US_NET_PRICE_AMT
		END 
	ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (POS_TRX.SERVICE_FLG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT
/*REBATE BGM NET END */
   FROM
   $$SLSORDVWDB.MT_DRVD_NRT_POS_TRX POS_TRX
   INNER JOIN
 $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO WI
 ON POS_TRX.ALLOCATED_POS_ADJ_KEY=WI.ALLOCATED_POS_ADJ_KEY
  INNER JOIN (     
   SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR WHERE CURRENT_FISCAL_QTR_FLAG = 'Y'      
   UNION      
   SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR WHERE PREVIOUS_FISCAL_QTR_FLAG = 'Y'      
   AND 1 =( SELECT COUNT(*) FROM $$COMREFVWDB.R_FISCAL_QUARTER_TO_YEAR WHERE DATE= FISCAL_QUARTER_START_DATE AND CURRENT_FISCAL_QTR_FLAG ='Y')     
   ) FISC_MTH ON FISC_MTH.FISCAL_YEAR_MONTH_INT = POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT
   
   LEFT JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ENDCUST
  ON WI.END_CUSTOMER_KEY=ENDCUST.END_CUSTOMER_KEY      
  
  LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
  ON POS_TRX.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY
   
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
ON TSS.PRODUCT_KEY                    = POS_TRX.PRODUCT_KEY
AND TSS.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
AND TSS.COUNTRY_FLG='Y'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS1
ON TSS1.PRODUCT_KEY                    = POS_TRX.PRODUCT_KEY
AND TSS1.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS1.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS1.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND TSS1.COUNTRY_FLG='Y'

  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
  ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
  AND L4_TSD.COUNTRY_FLG='N'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
  ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
  AND L3_TSD.COUNTRY_FLG='N'
  
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
  ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
  AND L2_TSD.COUNTRY_FLG='N'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
  ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
  AND L1_TSD.COUNTRY_FLG='N'
  
   LEFT OUTER JOIN
  (
  SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
  FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
  $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
  (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
      CASE WHEN PDATE.FISCAL_MONTH_NUMBER_INT = 12 THEN (PDATE.FISCAL_YEAR_NUMBER_INT+1)*100+1 ELSE PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1  END AS END_DATE
      FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL PDATE
      )PDATE
  WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
  AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE  AND CR.BK_TO_CURRENCY_CD='USD'
  )MCR   
  ON POS_TRX.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
  AND  POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT
   WHERE POS_TRX.END_CUSTOMER_KEY <> WI.END_CUSTOMER_KEY


Post SQL : 



Target4 Name : WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM


Pre SQL : 
DELETE FROM $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM ALL;


Post SQL : 



Source5 Name : SQ_WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM1


Pre SQL : 



SQL Query : 
/*INSERT FOR CAPTURING  UPDATES FROM TSS TABLE CHANGES */
 
 SELECT POS_TRX.ALLOCATED_POS_ADJ_KEY
   ,POS_TRX.BK_POS_TRANSACTION_ID_INT
   ,POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT
   ,POS_TRX.BOOKINGS_PROCESS_DT
   ,POS_TRX.DSV_OR_POS_TYPE_CD  ,
  CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
      THEN
          CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  THEN     
                  COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY)
              WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
                  COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
                  ELSE -999 
          END 
  ELSE -999 END TSS_COUNTRY_FACTOR_KEY
  
  ,CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
   THEN
    CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
     THEN  
      CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT - (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT) * POS_TRX.DD_COMP_US_LIST_PRICE_AMT /100)    
       )  AS DECIMAL(18,6) )   
     WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
     THEN
      CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT *
       (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )  
     ELSE 0
    END 
   ELSE 0
   END  DV_BKG_GROSS_MGN_AMOUNT
  
  ,
  CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 AND MCR.SALES_TERRITORY_KEY IS NOT NULL
   THEN
    CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
     THEN  
      CAST( ( (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT)*POS_TRX.DD_COMP_US_LIST_PRICE_AMT /100)    
      )  AS DECIMAL(18,6) )   
     WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
     THEN
      CAST( COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_TRX.DD_COMP_US_NET_PRICE_AMT,0) *
       (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 
      AS DECIMAL(18,6) )  
     ELSE 0
    END 
   ELSE 0
   END  DV_BGM_FX_COST_AMOUNT
   
   
  , CASE WHEN (POS_TRX.SERVICE_FLG = 'Y' AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 AND 
  COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
  THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_TRX.DD_COMP_US_NET_PRICE_AMT,0) 
  ELSE 0
   END AS DV_FX_NET_PRICE_AMT
,/*REBATE BGM NET START */
CASE WHEN POS_TRX.SERVICE_FLG = 'Y' AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
	THEN
		CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
			THEN 	
				CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT - (COALESCE(TSS.REBATE_FACTOR_PCT,TSS1.REBATE_FACTOR_PCT) * POS_TRX.DD_COMP_US_NET_PRICE_AMT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
			THEN
				CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT *
					(COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE  POS_TRX.DD_COMP_US_NET_PRICE_AMT
		END 
	ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (POS_TRX.SERVICE_FLG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT
/*REBATE BGM NET END */
      FROM 
 $$SLSORDVWDB.MT_DRVD_NRT_POS_TRX POS_TRX
      INNER JOIN  $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  NTPCF ON NTPCF.TSS_COUNTRY_FACTOR_KEY = POS_TRX.TSS_COUNTRY_FACTOR_KEY  
  
   INNER JOIN (     
   SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR WHERE CURRENT_FISCAL_QTR_FLAG = 'Y'      
   UNION      
   SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR WHERE PREVIOUS_FISCAL_QTR_FLAG = 'Y'      
   AND 1 =( SELECT COUNT(*) FROM $$COMREFVWDB.R_FISCAL_QUARTER_TO_YEAR WHERE DATE= FISCAL_QUARTER_START_DATE AND CURRENT_FISCAL_QTR_FLAG ='Y')     
   ) FISC_MTH ON FISC_MTH.FISCAL_YEAR_MONTH_INT = POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT
    
      INNER JOIN $$STGDB.WI_PRDT_COST_FACT_EXTRT_DT  WIPCFED ON WIPCFED.JOB_STREAM_ID = 'wf_WI_DRVD_NRT_POS_TRX' 
      AND NTPCF.EDW_UPDATE_DTM > WIPCFED.LAST_EXTRACT_DATE  AND NTPCF.EDW_CREATE_DTM <=  WIPCFED.LAST_EXTRACT_DATE
       
   LEFT JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ENDCUST
  ON POS_TRX.END_CUSTOMER_KEY=ENDCUST.END_CUSTOMER_KEY      
  
  LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
  ON POS_TRX.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
ON TSS.PRODUCT_KEY                    = POS_TRX.PRODUCT_KEY
AND TSS.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
AND TSS.COUNTRY_FLG='Y'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS1
ON TSS1.PRODUCT_KEY                    = POS_TRX.PRODUCT_KEY
AND TSS1.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS1.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS1.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND TSS1.COUNTRY_FLG='Y'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
  ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
  AND L4_TSD.COUNTRY_FLG='N'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
  ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
  AND L3_TSD.COUNTRY_FLG='N'
  
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
  ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
  AND L2_TSD.COUNTRY_FLG='N'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
  ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
  AND L1_TSD.COUNTRY_FLG='N'
  
   LEFT OUTER JOIN
  (
  SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
  FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
  $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
  (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
      CASE WHEN PDATE.FISCAL_MONTH_NUMBER_INT = 12 THEN (PDATE.FISCAL_YEAR_NUMBER_INT+1)*100+1 ELSE PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1  END AS END_DATE
      FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL PDATE
      )PDATE
  WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
  AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE  AND CR.BK_TO_CURRENCY_CD='USD'
  )MCR   
  ON POS_TRX.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
  AND  POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT
  
      WHERE
      -- POS_TRX.BKGS_MEASURE_TRANS_TYPE_CODE = 'ERP'  AND 
      NOT EXISTS  (SELECT 1 FROM $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM WINBAR
      WHERE  POS_TRX.ALLOCATED_POS_ADJ_KEY = WINBAR.ALLOCATED_POS_ADJ_KEY AND
      POS_TRX.BOOKINGS_PROCESS_DT = WINBAR.BOOKINGS_PROCESS_DT 
     )


Post SQL : 
UPDATE $$STGDB.WI_PRDT_COST_FACT_EXTRT_DT 
 SET LAST_EXTRACT_DATE = (SELECT MAX(EDW_UPDATE_DTM) FROM $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR ) ,
         EDW_UPDATE_DATETIME = CURRENT_TIMESTAMP(0),
         EDW_UPDATE_USER = USER
 WHERE JOB_STREAM_ID = 'wf_WI_DRVD_NRT_POS_TRX' ;


Target5 Name : WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM1


Pre SQL : 



Post SQL : 



Source6 Name : SQ_WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM2


Pre SQL : 



SQL Query : 
/* INSERT FOR CAPTURING END COUNTRY CHANGES*/
 SELECT POS_TRX.ALLOCATED_POS_ADJ_KEY
   ,POS_TRX.BK_POS_TRANSACTION_ID_INT
   ,POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT
   ,POS_TRX.BOOKINGS_PROCESS_DT
   ,POS_TRX.DSV_OR_POS_TYPE_CD  ,
  CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
      THEN
          CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  THEN     
                  COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY)
              WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
                  COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
                  ELSE -999 
          END 
  ELSE -999 END TSS_COUNTRY_FACTOR_KEY
  
  ,CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
   THEN
    CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
     THEN  
      CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT - (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT) * POS_TRX.DD_COMP_US_LIST_PRICE_AMT /100)    
       )  AS DECIMAL(18,6) )   
     WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
     THEN
      CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT *
       (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )  
     ELSE 0
    END 
   ELSE 0
   END  DV_BKG_GROSS_MGN_AMOUNT
  
  ,
  CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 AND MCR.SALES_TERRITORY_KEY IS NOT NULL
   THEN
    CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
     THEN  
      CAST( ( (COALESCE(TSS.COST_FACTOR_PCT,TSS1.COST_FACTOR_PCT)*POS_TRX.DD_COMP_US_LIST_PRICE_AMT /100)    
      )  AS DECIMAL(18,6) )   
     WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
     THEN
      CAST( COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_TRX.DD_COMP_US_NET_PRICE_AMT,0) *
       (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 
      AS DECIMAL(18,6) )  
     ELSE 0
    END 
   ELSE 0
   END  DV_BGM_FX_COST_AMOUNT
   
   
  , CASE WHEN (POS_TRX.SERVICE_FLG = 'Y' AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 AND 
  COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
  THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_TRX.DD_COMP_US_NET_PRICE_AMT,0) 
  ELSE 0
   END AS DV_FX_NET_PRICE_AMT,
/*REBATE BGM NET START */
CASE WHEN POS_TRX.SERVICE_FLG = 'Y' AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
	THEN
		CASE WHEN COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL  
			THEN 	
				CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT - (COALESCE(TSS.REBATE_FACTOR_PCT,TSS1.REBATE_FACTOR_PCT) * POS_TRX.DD_COMP_US_NET_PRICE_AMT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
			THEN
				CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT *
					(COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE  POS_TRX.DD_COMP_US_NET_PRICE_AMT
		END 
	ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (POS_TRX.SERVICE_FLG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY, TSS1.TSS_COUNTRY_FACTOR_KEY),L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT
/*REBATE BGM NET END */
      FROM 
 $$SLSORDVWDB.MT_DRVD_NRT_POS_TRX POS_TRX
   INNER JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER END_CUST
  ON POS_TRX.END_CUSTOMER_KEY=END_CUST.END_CUSTOMER_KEY  
   INNER JOIN (     
   SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR WHERE CURRENT_FISCAL_QTR_FLAG = 'Y'      
   UNION      
   SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR WHERE PREVIOUS_FISCAL_QTR_FLAG = 'Y'      
   AND 1 =( SELECT COUNT(*) FROM $$COMREFVWDB.R_FISCAL_QUARTER_TO_YEAR WHERE DATE= FISCAL_QUARTER_START_DATE AND CURRENT_FISCAL_QTR_FLAG ='Y')     
   ) FISC_MTH ON FISC_MTH.FISCAL_YEAR_MONTH_INT = POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT
    
      INNER JOIN $$STGDB.WI_PRDT_COST_FACT_EXTRT_DT  WIPCFED ON WIPCFED.JOB_STREAM_ID = 'wf_MT_ENDCUST_CUSTOMER_PARTY_HIER' 
      AND END_CUST.EDW_UPDATE_DTM > WIPCFED.LAST_EXTRACT_DATE  AND END_CUST.EDW_CREATE_DTM <=  WIPCFED.LAST_EXTRACT_DATE
    
  
  LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
  ON POS_TRX.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
ON TSS.PRODUCT_KEY                    = POS_TRX.PRODUCT_KEY
AND TSS.BK_ISO_COUNTRY_CD = END_CUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
AND TSS.COUNTRY_FLG='Y'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS1
ON TSS1.PRODUCT_KEY                    = POS_TRX.PRODUCT_KEY
AND TSS1.BK_ISO_COUNTRY_CD = END_CUST.BRANCH_ISO_COUNTRY_CD                    
AND TSS1.BKGS_MEASURE_TRANS_TYPE_CODE ='POS' 
AND TSS1.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND TSS1.COUNTRY_FLG='Y'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
  ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
  AND L4_TSD.COUNTRY_FLG='N'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
  ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
  AND L3_TSD.COUNTRY_FLG='N'
  
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
  ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
  AND L2_TSD.COUNTRY_FLG='N'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
  ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
  AND L1_TSD.COUNTRY_FLG='N'
  
   LEFT OUTER JOIN
  (
  SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
  FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
  $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
  (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
      CASE WHEN PDATE.FISCAL_MONTH_NUMBER_INT = 12 THEN (PDATE.FISCAL_YEAR_NUMBER_INT+1)*100+1 ELSE PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1  END AS END_DATE
      FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL PDATE
      )PDATE
  WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
  AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE  AND CR.BK_TO_CURRENCY_CD='USD'
  )MCR   
  ON POS_TRX.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
  AND  POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT
  
      WHERE
      -- POS_TRX.BKGS_MEASURE_TRANS_TYPE_CODE = 'ERP'  AND 
      NOT EXISTS  (SELECT 1 FROM $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM WINBAR
      WHERE  POS_TRX.ALLOCATED_POS_ADJ_KEY = WINBAR.ALLOCATED_POS_ADJ_KEY AND
      POS_TRX.BOOKINGS_PROCESS_DT = WINBAR.BOOKINGS_PROCESS_DT 
     )


Post SQL : 
UPDATE $$STGDB.WI_PRDT_COST_FACT_EXTRT_DT 
 SET LAST_EXTRACT_DATE = (SELECT MAX(EDW_UPDATE_DTM) FROM $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ) ,
         EDW_UPDATE_DATETIME = CURRENT_TIMESTAMP(0),
         EDW_UPDATE_USER = USER
 WHERE JOB_STREAM_ID = 'wf_MT_ENDCUST_CUSTOMER_PARTY_HIER' ;


Target6 Name : WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM2


Pre SQL : 



Post SQL : 
/*WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM POPULATE*/
CREATE VOLATILE TABLE WI_DRVD_NRT_TSS_RETRO_BGM  AS
(
SELECT
ALLOCATED_POS_ADJ_KEY,
PROCESS_DATE,
BGM_PERC
FROM
(
SELECT 
ALLOCATED_POS_ADJ_KEY,
BOOKINGS_PROCESS_DT AS PROCESS_DATE,
COALESCE(SUM(DV_BKG_GROSS_MGN_AMOUNT*100)/ NULLIFZERO (SUM(DV_BKG_REBATE_AMT)) ,0)AS BGM_PERC
FROM $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM
GROUP BY 1,2
)BGM
WHERE (BGM_PERC >98 OR BGM_PERC <=0)
)
WITH DATA PRIMARY INDEX(ALLOCATED_POS_ADJ_KEY) ON COMMIT PRESERVE ROWS; 

DELETE FROM $$STGDB.WI_DRVD_NRT_POS_RETRO_TSS_BGM;

INSERT INTO $$STGDB.WI_DRVD_NRT_POS_RETRO_TSS_BGM
(
ALLOCATED_POS_ADJ_KEY, 
BK_POS_TRANSACTION_ID_INT, 
DV_FISCAL_YEAR_MTH_NUMBER_INT, 
BOOKINGS_PROCESS_DT, 
DSV_OR_POS_TYPE_CD, 
TSS_COUNTRY_FACTOR_KEY, 
DV_BKG_GROSS_MGN_AMOUNT, 
DV_BGM_FX_COST_AMOUNT, 
DV_FX_NET_PRICE_AMT, 
DV_BKG_REBATE_AMT, 
DV_FX_REBATE_PRICE_AMT
)
SELECT POS_TRX.ALLOCATED_POS_ADJ_KEY
,POS_TRX.BK_POS_TRANSACTION_ID_INT
,POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT
,POS_TRX.BOOKINGS_PROCESS_DT
,POS_TRX.DSV_OR_POS_TYPE_CD  ,
  CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
      THEN
          CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  THEN     
                  TSS.TSS_COUNTRY_FACTOR_KEY
              WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
                  COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
                  ELSE -999 
          END 
  ELSE -999 END TSS_COUNTRY_FACTOR_KEY
  
  ,CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
   THEN
    CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
     THEN  
      CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT - (TSS.COST_FACTOR_PCT * POS_TRX.DD_COMP_US_LIST_PRICE_AMT /100)    
       )  AS DECIMAL(18,6) )   
     WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
     THEN
      CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT *
       (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )  
     ELSE 0
    END 
   ELSE 0
   END  DV_BKG_GROSS_MGN_AMOUNT ,
   
  CASE WHEN POS_TRX.SERVICE_FLG = 'Y'  AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 AND MCR.SALES_TERRITORY_KEY IS NOT NULL
   THEN
    CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
     THEN  
      CAST( ( (TSS.COST_FACTOR_PCT*POS_TRX.DD_COMP_US_LIST_PRICE_AMT /100)    
      )  AS DECIMAL(18,6) )   
     WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
     THEN
      CAST( 
     COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_TRX.DD_COMP_US_NET_PRICE_AMT,0) *
       (COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 
      AS DECIMAL(18,6) )  
     ELSE 0
    END 
   ELSE 0
   END  DV_BGM_FX_COST_AMOUNT
   
  , CASE WHEN (POS_TRX.SERVICE_FLG = 'Y' AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 AND 
  COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY,L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
  THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*POS_TRX.DD_COMP_US_NET_PRICE_AMT,0) 
  ELSE 0
   END AS DV_FX_NET_PRICE_AMT
, /*REBATE BGM NET START */
CASE WHEN POS_TRX.SERVICE_FLG = 'Y' AND POS_TRX.DD_COMP_US_NET_PRICE_AMT <> 0 
	THEN
		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
			THEN 	
				CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT - (TSS.REBATE_FACTOR_PCT * POS_TRX.DD_COMP_US_NET_PRICE_AMT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
			THEN
				CAST( (POS_TRX.DD_COMP_US_NET_PRICE_AMT *
					(COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE  POS_TRX.DD_COMP_US_NET_PRICE_AMT
		END 
	ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (POS_TRX.SERVICE_FLG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY,L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT
/*REBATE BGM NET END */
   FROM
   $$SLSORDVWDB.MT_DRVD_NRT_POS_TRX POS_TRX
   INNER JOIN
 $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO WI
 ON POS_TRX.ALLOCATED_POS_ADJ_KEY=WI.ALLOCATED_POS_ADJ_KEY
 AND POS_TRX.SERVICE_FLG = 'Y'
 AND POS_TRX.ALLOCATED_POS_ADJ_KEY   IN(SELECT ALLOCATED_POS_ADJ_KEY FROM WI_DRVD_NRT_TSS_RETRO_BGM)
  INNER JOIN (     
   SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR WHERE CURRENT_FISCAL_QTR_FLAG = 'Y'      
   UNION      
   SELECT FISCAL_YEAR_MONTH_INT FROM $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR WHERE PREVIOUS_FISCAL_QTR_FLAG = 'Y'      
   AND 1 =( SELECT COUNT(*) FROM $$COMREFVWDB.R_FISCAL_QUARTER_TO_YEAR WHERE DATE= FISCAL_QUARTER_START_DATE AND CURRENT_FISCAL_QTR_FLAG ='Y')     
   ) FISC_MTH ON FISC_MTH.FISCAL_YEAR_MONTH_INT = POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT
   
   LEFT JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ENDCUST
  ON WI.END_CUSTOMER_KEY=ENDCUST.END_CUSTOMER_KEY      
  
  LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
  ON POS_TRX.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
  ON TSS.PRODUCT_KEY                    = POS_TRX.PRODUCT_KEY
  AND TSS.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
  --AND TSS.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
  AND TSS.SALES_TERRITORY_NAME=COALESCE(HIER.L2_SALES_TERRITORY_NAME_CODE,HIER.L1_SALES_TERRITORY_NAME_CODE)
  AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE = 'POS'
  AND TSS.COUNTRY_FLG='X'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
  ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
  AND L4_TSD.COUNTRY_FLG='N'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
  ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
  AND L3_TSD.COUNTRY_FLG='N'
  
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
  ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
  AND L2_TSD.COUNTRY_FLG='N'
  
  LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
  ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
  AND L1_TSD.COUNTRY_FLG='N'
  
   LEFT OUTER JOIN
  (
  SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
  FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
  $$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
  (SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
      CASE WHEN PDATE.FISCAL_MONTH_NUMBER_INT = 12 THEN (PDATE.FISCAL_YEAR_NUMBER_INT+1)*100+1 ELSE PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1  END AS END_DATE
      FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL PDATE
      )PDATE
  WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
  AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE  AND CR.BK_TO_CURRENCY_CD='USD'
  )MCR   
  ON POS_TRX.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
  AND  POS_TRX.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT
  WHERE POS_TRX.END_CUSTOMER_KEY = WI.END_CUSTOMER_KEY ;

COLLECT STATS ON $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM;
  
UPDATE MT 
FROM 
$$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM MT,
$$STGDB.WI_DRVD_NRT_POS_RETRO_TSS_BGM WI
SET 
TSS_COUNTRY_FACTOR_KEY=WI.TSS_COUNTRY_FACTOR_KEY,
DV_BKG_GROSS_MGN_AMOUNT=WI.DV_BKG_GROSS_MGN_AMOUNT,
DV_BGM_FX_COST_AMOUNT=WI.DV_BGM_FX_COST_AMOUNT,
DV_FX_NET_PRICE_AMT=WI.DV_FX_NET_PRICE_AMT,
DV_BKG_REBATE_AMT = WI.DV_BKG_REBATE_AMT,             
DV_FX_REBATE_PRICE_AMT = WI.DV_FX_REBATE_PRICE_AMT            
WHERE MT.BK_POS_TRANSACTION_ID_INT = WI.BK_POS_TRANSACTION_ID_INT
AND MT.ALLOCATED_POS_ADJ_KEY=WI.ALLOCATED_POS_ADJ_KEY
AND MT.DSV_OR_POS_TYPE_CD = 'POS';

/* WI_DRVD_NRT_POS_TRX POPULTAE */
CREATE VOLATILE TABLE WI_DRVD_NRT_TSS_BGM AS
(
SELECT
ALLOCATED_POS_ADJ_KEY,
PROCESS_DATE,
BGM_PERC
FROM
(
SELECT 
ALLOCATED_POS_ADJ_KEY,
BOOKINGS_PROCESS_DT AS PROCESS_DATE,
COALESCE(SUM(DV_BKG_GROSS_MGN_AMOUNT*100)/ NULLIFZERO (SUM(DV_BKG_REBATE_AMT)) ,0)AS BGM_PERC
FROM $$STGDB.WI_DRVD_NRT_POS_TRX
WHERE SERVICE_FLG='Y'
GROUP BY 1,2
)BGM
WHERE (BGM_PERC >98 OR BGM_PERC <=0)
)
WITH DATA PRIMARY INDEX(ALLOCATED_POS_ADJ_KEY) ON COMMIT PRESERVE ROWS;

UPDATE NRT FROM $$STGDB.WI_DRVD_NRT_POS_TRX NRT 
SET TSS_COUNTRY_FACTOR_KEY = -888,
DV_BKG_GROSS_MGN_AMOUNT= 0,
DV_BGM_FX_COST_AMOUNT= 0,
DV_FX_NET_PRICE_AMT=0,
DV_BKG_REBATE_AMT=0,
DV_FX_REBATE_PRICE_AMT=0
WHERE 1=1
AND NRT.SERVICE_FLG = 'Y' AND NRT.DD_COMP_US_NET_PRICE_AMT <> 0
AND NRT.ALLOCATED_POS_ADJ_KEY IN (SELECT ALLOCATED_POS_ADJ_KEY FROM WI_DRVD_NRT_TSS_BGM);


UPDATE NRT  FROM  $$STGDB.WI_DRVD_NRT_POS_TRX NRT , 
(SELECT 
NRT.ALLOCATED_POS_ADJ_KEY,
NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT,

		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  THEN 	
				TSS.TSS_COUNTRY_FACTOR_KEY
			WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL THEN
				COALESCE(L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY,-999) 
ELSE -999 END TSS_COUNTRY_FACTOR_KEY,

CASE WHEN SERVICE_FLG = 'Y' AND DD_COMP_US_NET_PRICE_AMT <> 0 
	THEN
		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
			THEN 	
				CAST( (NRT.DD_COMP_US_NET_PRICE_AMT - (TSS.COST_FACTOR_PCT * NRT.DD_COMP_US_LIST_PRICE_AMT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
			THEN
				CAST( (NRT.DD_COMP_US_NET_PRICE_AMT *
					(COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE 0
		END 
	ELSE 0
 END DV_BKG_GROSS_MGN_AMOUNT,

CASE WHEN SERVICE_FLG = 'Y' AND DD_COMP_US_NET_PRICE_AMT <> 0 AND MCR.SALES_TERRITORY_KEY IS NOT NULL
	THEN
		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
			THEN 	
				CAST( ( (TSS.COST_FACTOR_PCT*NRT.DD_COMP_US_LIST_PRICE_AMT /100)    
				)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT) IS NOT NULL 
			THEN
				CAST( COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*NRT.DD_COMP_US_NET_PRICE_AMT,0) *
					(COALESCE(L4_TSD.COST_FACTOR_PCT,L3_TSD.COST_FACTOR_PCT,L2_TSD.COST_FACTOR_PCT,L1_TSD.COST_FACTOR_PCT))/100 
				AS DECIMAL(18,6) )		
			ELSE 0
		END 
	ELSE 0
 END DV_BGM_FX_COST_AMOUNT,


CASE WHEN (NRT.SERVICE_FLG = 'Y' AND NRT.DD_COMP_US_NET_PRICE_AMT <> 0 AND 
COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY,L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*NRT.DD_COMP_US_NET_PRICE_AMT,0) 
ELSE 0
END AS DV_FX_NET_PRICE_AMT,

/*REBATE BGM NET START */
CASE WHEN NRT.SERVICE_FLG = 'Y' AND NRT.DD_COMP_US_NET_PRICE_AMT <> 0 
	THEN
		CASE WHEN TSS.TSS_COUNTRY_FACTOR_KEY IS NOT NULL  
			THEN 	
				CAST( (NRT.DD_COMP_US_NET_PRICE_AMT - (TSS.REBATE_FACTOR_PCT * NRT.DD_COMP_US_NET_PRICE_AMT /100)    
					)  AS DECIMAL(18,6) )   
			WHEN COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT,0) <> 0
			THEN
				CAST( (NRT.DD_COMP_US_NET_PRICE_AMT *
					(COALESCE(L4_TSD.REBATE_FACTOR_PCT,L3_TSD.REBATE_FACTOR_PCT,L2_TSD.REBATE_FACTOR_PCT,L1_TSD.REBATE_FACTOR_PCT)/100) )  AS DECIMAL(18,6) )		
			ELSE  NRT.DD_COMP_US_NET_PRICE_AMT
		END 
	ELSE  0
 END DV_BKG_REBATE,

CASE WHEN (NRT.SERVICE_FLG = 'Y' AND DV_BKG_REBATE <> 0 AND 
COALESCE(TSS.TSS_COUNTRY_FACTOR_KEY,L4_TSD.TSS_COUNTRY_FACTOR_KEY,L3_TSD.TSS_COUNTRY_FACTOR_KEY,L2_TSD.TSS_COUNTRY_FACTOR_KEY,L1_TSD.TSS_COUNTRY_FACTOR_KEY) IS NOT NULL )
THEN COALESCE((COALESCE(MCR.ANNUAL_BUDGET_CONV_RT,0)/NULLIF(MCR.PL_CONVERSION_RT,0))*DV_BKG_REBATE,0) 
ELSE 0
END AS DV_FX_REBATE_PRICE_AMT
/*REBATE BGM NET END */

FROM $$STGDB.WI_DRVD_NRT_POS_TRX   NRT

LEFT JOIN $$COMREFVWDB.MT_ENDCUST_CUSTOMER_PARTY_HIER ENDCUST
ON NRT.END_CUSTOMER_KEY=ENDCUST.END_CUSTOMER_KEY

LEFT JOIN $$COMREFVWDB.R_SALES_HIERARCHY HIER
ON NRT.SALES_TERRITORY_KEY=HIER.SALES_TERRITORY_KEY

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR TSS
ON TSS.PRODUCT_KEY                    = NRT.PRODUCT_KEY
AND TSS.BK_ISO_COUNTRY_CD = ENDCUST.BRANCH_ISO_COUNTRY_CD                    
--AND TSS.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND TSS.SALES_TERRITORY_NAME=COALESCE(HIER.L2_SALES_TERRITORY_NAME_CODE,HIER.L1_SALES_TERRITORY_NAME_CODE)
AND TSS.BKGS_MEASURE_TRANS_TYPE_CODE = 'POS'
AND TSS.COUNTRY_FLG='X'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L4_TSD
ON L4_TSD.SALES_TERRITORY_NAME=HIER.L4_SALES_TERRITORY_NAME_CODE
AND L4_TSD.COUNTRY_FLG='N'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L3_TSD
ON L3_TSD.SALES_TERRITORY_NAME=HIER.L3_SALES_TERRITORY_NAME_CODE
AND L3_TSD.COUNTRY_FLG='N'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L2_TSD
ON L2_TSD.SALES_TERRITORY_NAME=HIER.L2_SALES_TERRITORY_NAME_CODE
AND L2_TSD.COUNTRY_FLG='N'

LEFT JOIN $$SLSORDVWDB.N_TSS_PRODUCT_COST_FACTOR  L1_TSD
ON L1_TSD.SALES_TERRITORY_NAME=HIER.L1_SALES_TERRITORY_NAME_CODE
AND L1_TSD.COUNTRY_FLG='N'

 LEFT OUTER JOIN
(
SELECT CR.PL_CONVERSION_RT,CR.ANNUAL_BUDGET_CONV_RT,CR.FISCAL_YEAR_MONTH_NUM_INT,FX.SALES_TERRITORY_KEY
FROM $$FINLGLVWDB.MT_MONTHLY_CONVERSION_RATE CR,
$$SLSORDVWDB.MT_PROFITABILITY_FX_NORM FX,
(SELECT (PDATE.FISCAL_YEAR_NUMBER_INT-5)*100+PDATE.FISCAL_MONTH_NUMBER_INT AS START_DATE,       
    PDATE.FISCAL_YEAR_MTH_NUMBER_INT+1 AS END_DATE
	FROM $$ETLVWDB.MBR_PROCESS_DATE PDATE
	)PDATE
WHERE  CR.BK_FROM_CURRENCY_CD=FX.BK_CURRENCY_CD
AND CR.BK_TO_CURRENCY_CD='USD'  
AND CR.FISCAL_YEAR_MONTH_NUM_INT   BETWEEN PDATE.START_DATE AND PDATE.END_DATE
)MCR   
ON NRT.SALES_TERRITORY_KEY=MCR.SALES_TERRITORY_KEY
AND  NRT.DV_FISCAL_YEAR_MTH_NUMBER_INT=MCR.FISCAL_YEAR_MONTH_NUM_INT   

WHERE 1=1
AND SERVICE_FLG = 'Y' AND DD_COMP_US_NET_PRICE_AMT <> 0 
) HIST
SET 
  TSS_COUNTRY_FACTOR_KEY =HIST.TSS_COUNTRY_FACTOR_KEY
, DV_BKG_GROSS_MGN_AMOUNT		= HIST.DV_BKG_GROSS_MGN_AMOUNT          
, DV_BGM_FX_COST_AMOUNT	=HIST.DV_BGM_FX_COST_AMOUNT
, DV_FX_NET_PRICE_AMT =HIST.DV_FX_NET_PRICE_AMT
,DV_BKG_REBATE_AMT= HIST.DV_BKG_REBATE
 ,DV_FX_REBATE_PRICE_AMT= HIST.DV_FX_REBATE_PRICE_AMT
WHERE NRT.ALLOCATED_POS_ADJ_KEY          =HIST.ALLOCATED_POS_ADJ_KEY
AND SERVICE_FLG='Y'
AND NRT.TSS_COUNTRY_FACTOR_KEY=-888;

COLLECT STATS ON $$STGDB.WI_MT_DRVD_NRT_POS_TRX_RETRO_BGM;