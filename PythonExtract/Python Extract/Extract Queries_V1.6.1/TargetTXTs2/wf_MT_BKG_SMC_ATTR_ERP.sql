


Source1 Name : SQ_MT_SLS_MOTION_ATTRIBUTION1


Pre SQL : 



SQL Query : 
SELECT
      MT1.SALES_ORDER_LINE_KEY          
    , MT1.DV_ENTERPRISE_INV_SKU_ID
    , MT1.SALES_MOTION_CD               
    , MT1.DV_ALLOCATION_PCT             
    , MT1.DV_SERVICE_CATEGORY_CD        
    , MT1.DV_OA_FLG                     
    , MT1.START_TV_DTM                   
    , MT1.END_TV_DTM                
    , 'ERP' AS DV_TRX_TYPE     
    , MT1.DV_SOURCE_TYPE 
    ,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM                
    ,USER AS EDW_CREATE_USER               
    ,CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM                
    ,USER AS EDW_UPDATE_USER 
    ,MT1.AS_ARCHITECTURE_NAME
    ,MT1.TECHNOLOGY_GROUP_ID
    ,MT1.ATTR_PRDT_OFFER_TYPE_NAME
    ,MT1.AS_TS_CODE
    ,MT1.SK_RENEW_CONTRACT_LINE_ID
    ,MT1.SK_AS_PARENT_INVENTORY_ITEM_ID
    ,MT1.SK_OFFER_ATTRIBUTION_ID_INT
    ,MT1.SRC_ENTERPRISE_INV_SKU_ID
    ,MT1.PRODUCT_CLASS
,MT1.TRANSACTION_CR_PARTY_KEY,
MT1.HQ_CR_PRTY_KEY,
MT1.RENEWAL_REF_ID,
MT1.RENEWAL_REF_CD,
MT1.SMR_TAGGING_FAILURE_RSN_CD,
MT1.SALES_MOTION_TIMING_CD,
MT1.MANUAL_OVERRIDE_ROLE,
MT1.REQUESTING_CSCO_WRKR_PRTY_KEY,
MT1.SLS_MTN_CORRECTION_CASE_NUM,
MT1.SLS_MTN_CORRECTION_CMNT
FROM $$SLSORDVWDB.MT_SLS_MOTION_ATTRIBUTION MT1
WHERE MT1.EDW_UPDATE_DTM > '$$LastExtractDate'
AND MT1.END_TV_DTM = '3500-01-01 00:00:00'


Post SQL : 



Target1 Name : WI_SLS_MOTION_ATTRIB_ERP


Pre SQL : 
DELETE FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_SLS_MOTION_ATTRIB_ERP','D');


Source2 Name : SQ_SM_BKG_SLS_MOTION_ATTRIBUTION


Pre SQL : 



SQL Query : 
SELECT
	 SM_MAX.MAX_SALES_ORDER_LINE_KEY + ROW_NUMBER() OVER (ORDER BY DV_TRANSACTION_ID) AS 
	 SK_SALES_MOTION_ATTRIB_KEY 
	,DV_TRANSACTION_ID          
	,DV_TRX_TYPE                                   
	,DV_ENTERPRISE_INV_SKU_ID
	,SK_OFFER_ATTRIBUTION_ID_INT
	,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM  
      ,USER AS EDW_CREATE_USER
FROM
(
	SELECT SALES_ORDER_LINE_KEY AS DV_TRANSACTION_ID
		  ,DV_TRX_TYPE
		  ,DV_ENTERPRISE_INV_SKU_ID
		  ,SK_OFFER_ATTRIBUTION_ID_INT
	  FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP   
	GROUP BY 1,2,3,4
)SRC
,( SELECT COALESCE(MAX(SK_SALES_MOTION_ATTRIB_KEY),0) MAX_SALES_ORDER_LINE_KEY 
     FROM $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION ) SM_MAX                  
    WHERE NOT EXISTS( SELECT 1 FROM $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
						WHERE SRC.DV_TRANSACTION_ID = SM.DV_TRANSACTION_ID
						  AND SRC.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
						  AND SRC.DV_TRX_TYPE = SM.DV_TRX_TYPE
                          AND SRC.SK_OFFER_ATTRIBUTION_ID_INT = SM.SK_OFFER_ATTRIBUTION_ID_INT 
					)


Post SQL : 



Target2 Name : SM_BKG_SLS_MOTION_ATTRIBUTION


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$TRANSLATIONDB','SM_BKG_SLS_MOTION_ATTRIBUTION','D');

/* Adding below code as part of SMR Aug 16th release to prevent split issue records loading into MT BKG table */
DELETE FROM $$STGDB.WI_MT_BKG_SPLIT_CHECK WHERE DV_TRX_TYPE = 'ERP' ;

INSERT INTO $$STGDB.WI_MT_BKG_SPLIT_CHECK
SELECT 
SM.SK_SALES_MOTION_ATTRIB_KEY SK_SALES_MOTION_ATTRIB_KEY,
WI.DV_TRX_TYPE,
SUM(DV_ALLOCATION_PCT) DV_ALLOCATION_PCT_SUM
FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
   ON WI.SALES_ORDER_LINE_KEY = SM.DV_TRANSACTION_ID
    AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE = SM.DV_TRX_TYPE 
	AND WI.SK_OFFER_ATTRIBUTION_ID_INT = SM.SK_OFFER_ATTRIBUTION_ID_INT
GROUP BY 1,2 HAVING ROUND(SUM(DV_ALLOCATION_PCT),4) NOT IN ( 1.0000, 0.0000 ) ;

COLLECT STATS ON $$STGDB.WI_MT_BKG_SPLIT_CHECK ;

DELETE FROM $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB EX
WHERE EXISTS ( SEL 1 FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP WI
					WHERE WI.SALES_ORDER_LINE_KEY = EX.DV_TRANSACTION_ID
				  AND WI.DV_ENTERPRISE_INV_SKU_ID = EX.DV_ENTERPRISE_INV_SKU_ID
				  AND WI.DV_TRX_TYPE= EX.DV_TRX_TYPE
				  AND WI.SK_OFFER_ATTRIBUTION_ID_INT = EX.SK_OFFER_ATTRIBUTION_ID_INT) ;

INSERT INTO $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB
SELECT
      SM.SK_SALES_MOTION_ATTRIB_KEY    
    , WI.SALES_ORDER_LINE_KEY          
    , WI.SALES_ORDER_LINE_KEY AS DV_TRANSACTION_ID             
    , SM.DV_TRX_TYPE                   
    , WI.SALES_MOTION_CD               
    , WI.START_TV_DTM                   
    , WI.END_TV_DTM                     
    , WI.DV_ENTERPRISE_INV_SKU_ID      
    , WI.DV_ALLOCATION_PCT             
    , WI.DV_SERVICE_CATEGORY_CD        
    , WI.DV_OA_FLG        
	, WI.DV_SOURCE_TYPE
     ,WI.AS_ARCHITECTURE_NAME
     ,WI.TECHNOLOGY_GROUP_ID
     ,WI.ATTR_PRDT_OFFER_TYPE_NAME
     ,WI.AS_TS_CODE  
	,WI.SK_RENEW_CONTRACT_LINE_ID
	,SK_AS_PARENT_INVENTORY_ITEM_ID
	,WI.SK_OFFER_ATTRIBUTION_ID_INT
	,USER AS EDW_UPDATE_USER
	,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM
	,CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM 	 
    ,USER AS EDW_CREATE_USER               
    ,COALESCE(NSOL.SALES_ORDER_KEY, -7777) AS SALES_ORDER_KEY
    ,WI.SRC_ENTERPRISE_INV_SKU_ID
    ,WI.PRODUCT_CLASS,
WI.TRANSACTION_CR_PARTY_KEY,
WI.HQ_CR_PRTY_KEY,
WI.RENEWAL_REF_ID,
WI.RENEWAL_REF_CD,
WI.SMR_TAGGING_FAILURE_RSN_CD,
WI.SALES_MOTION_TIMING_CD,
WI.MANUAL_OVERRIDE_ROLE,
WI.REQUESTING_CSCO_WRKR_PRTY_KEY,
WI.SLS_MTN_CORRECTION_CASE_NUM,
WI.SLS_MTN_CORRECTION_CMNT
FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
    ON WI.SALES_ORDER_LINE_KEY = SM.DV_TRANSACTION_ID
    AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE = SM.DV_TRX_TYPE 
	AND WI.SK_OFFER_ATTRIBUTION_ID_INT = SM.SK_OFFER_ATTRIBUTION_ID_INT
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
    ON WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
    AND CAST(NSOL.END_TV_DATETIME AS DATE) =  CAST( '3500-01-01' AS DATE) 
   AND NSOL.SS_CODE = 'CG'
AND EXISTS ( SEL 1 FROM $$STGDB.WI_MT_BKG_SPLIT_CHECK CHK
				WHERE SM.SK_SALES_MOTION_ATTRIB_KEY = CHK.SK_SALES_MOTION_ATTRIB_KEY
				  AND CHK.DV_TRX_TYPE = 'ERP' ) ;

COLLECT STATS ON $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB;

DELETE FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP WI
WHERE EXISTS ( SEL 1 FROM $$EXCEPDB.EX_MT_BKG_SLS_MOTION_ATTRIB EX
				WHERE WI.SALES_ORDER_LINE_KEY = EX.DV_TRANSACTION_ID
				  AND WI.DV_ENTERPRISE_INV_SKU_ID = EX.DV_ENTERPRISE_INV_SKU_ID
				  AND WI.DV_TRX_TYPE= EX.DV_TRX_TYPE
				  AND WI.SK_OFFER_ATTRIBUTION_ID_INT = EX.SK_OFFER_ATTRIBUTION_ID_INT
			  ) ;


Source3 Name : SQ_MT_SLS_MOTION_ATTRIBUTION


Pre SQL : 



SQL Query : 
SELECT
      SM.SK_SALES_MOTION_ATTRIB_KEY    
    , WI.SALES_ORDER_LINE_KEY          
    , WI.SALES_ORDER_LINE_KEY AS DV_TRANSACTION_ID             
    , SM.DV_TRX_TYPE                   
    , WI.SALES_MOTION_CD               
    , WI.START_TV_DTM                   
    , WI.END_TV_DTM                     
    , WI.DV_ENTERPRISE_INV_SKU_ID      
    , WI.DV_ALLOCATION_PCT             
    , WI.DV_SERVICE_CATEGORY_CD        
    , WI.DV_OA_FLG        
	, WI.DV_SOURCE_TYPE
     ,WI.AS_ARCHITECTURE_NAME
     ,WI.TECHNOLOGY_GROUP_ID
     ,WI.ATTR_PRDT_OFFER_TYPE_NAME
     ,WI.AS_TS_CODE  
	,WI.SK_RENEW_CONTRACT_LINE_ID
	,SK_AS_PARENT_INVENTORY_ITEM_ID
	,WI.SK_OFFER_ATTRIBUTION_ID_INT
	,USER AS EDW_UPDATE_USER
	,CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM
	,CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM 	 
    ,USER AS EDW_CREATE_USER               
    ,COALESCE(NSOL.SALES_ORDER_KEY, -7777) AS SALES_ORDER_KEY
    ,WI.SRC_ENTERPRISE_INV_SKU_ID
    ,WI.PRODUCT_CLASS,
WI.TRANSACTION_CR_PARTY_KEY,
WI.HQ_CR_PRTY_KEY,
WI.RENEWAL_REF_ID,
WI.RENEWAL_REF_CD,
WI.SMR_TAGGING_FAILURE_RSN_CD,
WI.SALES_MOTION_TIMING_CD,
WI.MANUAL_OVERRIDE_ROLE,
WI.REQUESTING_CSCO_WRKR_PRTY_KEY,
WI.SLS_MTN_CORRECTION_CASE_NUM,
WI.SLS_MTN_CORRECTION_CMNT
FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP WI
INNER JOIN $$ETLVWDB.SM_BKG_SLS_MOTION_ATTRIBUTION SM
    ON WI.SALES_ORDER_LINE_KEY = SM.DV_TRANSACTION_ID
    AND WI.DV_ENTERPRISE_INV_SKU_ID = SM.DV_ENTERPRISE_INV_SKU_ID
    AND WI.DV_TRX_TYPE = SM.DV_TRX_TYPE 
	AND WI.SK_OFFER_ATTRIBUTION_ID_INT = SM.SK_OFFER_ATTRIBUTION_ID_INT
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
    ON WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
    AND CAST(NSOL.END_TV_DATETIME AS DATE) =  CAST( '3500-01-01' AS DATE) 
   AND NSOL.SS_CODE = 'CG'
WHERE NOT EXISTS ( SELECT 1 FROM $$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT
                    WHERE MT.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY
                     AND MT.DV_ENTERPRISE_INV_SKU_ID = WI.DV_ENTERPRISE_INV_SKU_ID 
                     AND MT.START_TV_DTM = WI.START_TV_DTM
                     AND MT.DV_TRX_TYPE = 'ERP' 
                 )


Post SQL : 



Target3 Name : MT_BKG_SLS_MOTION_ATTRIBUTION


Pre SQL : 
UPDATE MT_BKG
FROM $$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT_BKG,
     ( SELECT SALES_ORDER_LINE_KEY ,DV_ENTERPRISE_INV_SKU_ID
	     ,MAX(START_TV_DTM) AS START_TV_DTM
        FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP WI
       GROUP BY 1,2
      ) WI        
SET END_TV_DTM = WI.START_TV_DTM - INTERVAL '1' SECOND,
    EDW_UPDATE_USER = USER,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE WI.SALES_ORDER_LINE_KEY = MT_BKG.DV_TRANSACTION_ID
  AND WI.DV_ENTERPRISE_INV_SKU_ID = MT_BKG.DV_ENTERPRISE_INV_SKU_ID 
  AND MT_BKG.DV_TRX_TYPE = 'ERP' 
  AND WI.START_TV_DTM <> MT_BKG.START_TV_DTM 
  AND MT_BKG.END_TV_DTM = '3500-01-01 00:00:00' ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$SLSORDDB','MT_BKG_SLS_MOTION_ATTRIBUTION','D');
/*
UPDATE MT_BKG
FROM $$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT_BKG,
     ( SELECT SALES_ORDER_LINE_KEY,DV_ENTERPRISE_INV_SKU_ID,MAX(END_TV_DTM) AS MAX_END_TV_DTM
        FROM $$SLSORDVWDB.MT_SLS_MOTION_ATTRIBUTION MT1
		WHERE MT1.EDW_UPDATE_DTM > '$$LastExtractDate'
          AND MT1.END_TV_DTM <> '3500-01-01 00:00:00'
		  AND ( MT1.SALES_ORDER_LINE_KEY, MT1.DV_ENTERPRISE_INV_SKU_ID ) NOT IN ( SELECT SALES_ORDER_LINE_KEY, DV_ENTERPRISE_INV_SKU_ID FROM $$STGDB.WI_SLS_MOTION_ATTRIB_ERP )
       GROUP BY 1,2
      ) WI        
SET END_TV_DTM = WI.MAX_END_TV_DTM,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE WI.SALES_ORDER_LINE_KEY = MT_BKG.DV_TRANSACTION_ID
  AND WI.DV_ENTERPRISE_INV_SKU_ID = MT_BKG.DV_ENTERPRISE_INV_SKU_ID 
  AND MT_BKG.DV_TRX_TYPE = 'ERP' 
  AND MT_BKG.END_TV_DTM = '3500-01-01 00:00:00' ;
*/ 
/*
CREATE VOLATILE TABLE TS_SOWB_LINES AS ( SELECT 
	NSOL.SALES_ORDER_LINE_KEY 	
FROM $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL 
  WHERE NSOL.SS_CODE = 'CG' 
   AND NOT EXISTS ( SELECT 1 FROM $$SLSORDVWDB.N_ATTR_PRDT_AS_NEW_OR_RNWL ATT WHERE ATT.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY )
   AND ( EXISTS (
    SELECT 1 FROM (SELECT 
       P.ITEM_KEY
       FROM
       $$COMREFVWDB.N_PRODUCT P
       INNER JOIN 
       $$COMREFVWDB.MT_SVC_FINANCE_HIERARCHY SFH ON P.ITEM_KEY = SFH.ITEM_KEY
       WHERE P.PRDT_SETUP_CLASSIFICATION_CD <> 'SOFTWARE' --EXCLUDE SW
       AND SFH.BK_SERVICE_CATEGORY_ID = 'TECHNICAL SUPPORT SERVICES' 
       AND SFH.BK_ALLOCATED_SERVC_GROUP_ID NOT IN
       ( 'AS CORE' ,  'AS SUBSCRIPTION' , 'FOCUSED TECHNICAL SUPPORT SERVICES' , 'CLOUD MANAGED SERVICES' )--EXCLUDE FTS,CMS,AS
       AND RU_BK_SERVICE_PROD_SUBGROUP_ID NOT IN (SELECT BK_PRDT_SUBGROUP_ID FROM ( SELECT * FROM $$SERVICEVWDB.N_GENERIC_SVC_PRDT_ATTR WHERE BK_GSP_ATTR_NAME = 'SW SERVICE CATEGORY' ) WI ) --EXCLUDE SWSS
       ) WI
     WHERE NSOL.PRODUCT_KEY = WI.ITEM_KEY
   )
   OR (NSOL.BK_SO_SRC_NAME IN ('Manual', 'Copy' ) AND NSOL.PRODUCT_KEY NOT IN ( SELECT P.ITEM_KEY FROM
      $$COMREFVWDB.N_PRODUCT P
      INNER JOIN 
      $$COMREFVWDB.MT_SVC_FINANCE_HIERARCHY SFH ON P.ITEM_KEY = SFH.ITEM_KEY
      AND SFH.BK_ALLOCATED_SERVC_GROUP_ID  IN ( 'AS FIXED', 'AS TRANSACTION' )
     )
                 )
   )
GROUP BY 1 ) WITH DATA 
  PRIMARY INDEX (SALES_ORDER_LINE_KEY)
  ON COMMIT PRESERVE ROWS ;
*/  

/*Commented as part of TTS Removal*/  
/*
UPDATE MT FROM
$$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT
, $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
SET SALES_MOTION_CD = NSOL.SALES_MOTION_CD,
EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0),
EDW_UPDATE_USER = 'RETRO_TS_NSOL_SMC_UPD'
WHERE MT.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
AND MT.END_TV_DT = '3500-01-01'
AND NSOL.SS_CODE = 'CG'
AND MT.DV_TRX_TYPE IN ('ERP','AR')
AND NSOL.SALES_ORDER_LINE_KEY > 0
AND MT.DV_SOURCE_TYPE = 'NON-RTNR'
AND MT.SALES_MOTION_CD <> NSOL.SALES_MOTION_CD
AND MT.SALES_ORDER_LINE_KEY  IN ( SEL * FROM TS_SOWB_LINES ) ;
*/

/*
UPDATE MT FROM
$$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION MT
, $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
SET SALES_MOTION_TIMING_CD = NSOL.SALES_MOTION_TIMING_NAME,
EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0),
EDW_UPDATE_USER = 'RETRO_TS_NSOL_SMT_UPD'
WHERE MT.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
AND MT.END_TV_DT = '3500-01-01'
AND NSOL.SS_CODE = 'CG'
AND NSOL.SALES_ORDER_LINE_KEY > 0
AND NSOL.SALES_MOTION_CD = 'RENEW'
AND COALESCE( MT.SALES_MOTION_TIMING_CD, 'UNKNOWN')  <> COALESCE(NSOL.SALES_MOTION_TIMING_NAME, 'UNKNOWN') 
AND MT.SALES_MOTION_CD = 'RENEW'
AND MT.SALES_ORDER_LINE_KEY  IN ( SEL * FROM TS_SOWB_LINES ) ;

*/
CALL COLLECT_STATS_WRAP('$$SLSORDDB','MT_BKG_SLS_MOTION_ATTRIBUTION','D');