


Source1 Name : SQ_WI_EL_AR_NAPLD_SMC_DENORM_INCR1


Pre SQL : 



SQL Query : 
SELECT
  EL.AR_TRX_KEY,
  EL.SALES_MOTION_CD,
  DV_ALLOCATION_PCT,
  EL.DV_SERVICE_CATEGORY_CD,
  DV_OA_FLG,
  START_TV_DTM,
  END_TV_DTM,
  DV_SOURCE_TYPE,
  SALES_MOTION_TIMING_CD,
  NSOL.PRODUCT_KEY ERP_PRODUCT_KEY,
  NATL_SFH.BK_SERVICE_CATEGORY_ID AR_SKU_SERVICE_CATEGORY_ID,
  NSOL_SFH.BK_SERVICE_CATEGORY_ID ERP_SKU_SERVICE_CATEGORY_ID
  FROM $$ETLVWDB.EL_AR_NAPLD_SMC_DENORM EL
  
INNER JOIN ( SEL AR_TRX_KEY, AR_TRX_LINE_KEY FROM $$FINLGLVWDB.N_AR_TRX_LINE GROUP BY 1,2 ) NATL
ON EL.AR_TRX_KEY = NATL.AR_TRX_KEY
INNER JOIN ( SEL AR_TRX_LINE_KEY, PRODUCT_KEY  FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE GROUP BY 1,2 ) NATIL
ON NATL.AR_TRX_LINE_KEY = NATIL.AR_TRX_LINE_KEY
  
	INNER JOIN $$STGDB.WI_SFH_RUP NATL_SFH
	 ON NATIL.PRODUCT_KEY = NATL_SFH.ITEM_KEY
	INNER JOIN ( SEL SALES_ORDER_LINE_KEY, PRODUCT_KEY FROM $$SLSORDVWDB.N_SALES_ORDER_LINE GROUP BY 1,2 ) NSOL
	 ON EL.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
	INNER JOIN $$STGDB.WI_SFH_RUP NSOL_SFH
	 ON NSOL.PRODUCT_KEY = NSOL_SFH.ITEM_KEY
	WHERE EL.END_TV_DTM = '3500-01-01 00:00:00'
	  AND EL.SALES_MOTION_CD <> 'UNKNOWN' /* To exclude UNK SMC as it is not required for Deal based SMC logic */
	  AND EL.AR_TRX_KEY IN ( SELECT AR_TRX_KEY FROM $$ETLVWDB.EL_AR_NAPLD_SMC_DENORM EL
	     WHERE EL.EDW_UPDATE_DTM >= '$$LastExtractDate' GROUP BY 1)


Post SQL : 



Target1 Name : WI_EL_AR_NAPLD_SMC_DENORM_INCR3


Pre SQL : 
DELETE FROM $$STGDB.WI_SFH_RUP ALL ;

INSERT INTO $$STGDB.WI_SFH_RUP
SELECT ITEM_KEY,
CASE WHEN ITEM_COUNT > 1 THEN 'COMBINED SERVICES'
ELSE BK_SERVICE_CATEGORY_ID END AS BK_SERVICE_CATEGORY_ID
FROM (
SEL  ITEM_KEY,
BK_SERVICE_CATEGORY_ID,
COUNT(*) OVER(PARTITION BY ITEM_KEY) ITEM_COUNT
FROM $$COMREFVWDB.MT_SVC_FINANCE_HIERARCHY
) WI
GROUP BY 1,2 ;

COLLECT STATS COLUMN ( ITEM_KEY ) ON $$STGDB.WI_SFH_RUP ;

DELETE FROM $$STGDB.WI_EL_AR_NAPLD_SMC_DENORM_INCR ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_EL_AR_NAPLD_SMC_DENORM_INCR','D');


Source2 Name : SQ_WI_AR_NAPLD_SLS_MOTION_ATTRIB


Pre SQL : 



SQL Query : 
SELECT
  SMC_FINAL.AR_TRX_KEY,
  SMC_FINAL.SALES_MOTION_CD,
  SMC_FINAL.DV_ALLOCATION_PCT/SMC_FINAL.SUM_SPLIT AS DV_ALLOCATION_PCT,
  SMC_FINAL.DV_SERVICE_CATEGORY_CD,
  SMC_FINAL.DV_OA_FLG,
  SMC_FINAL.START_TV_DTM ,
  SMC_FINAL.END_TV_DTM,
  SMC_FINAL.DV_SOURCE_TYPE,
  SMC_FINAL.SALES_MOTION_TIMING_CD
FROM 
( 
SELECT 
  SMC.AR_TRX_KEY,
  SMC.SALES_MOTION_CD,
  SUM(SMC.DV_ALLOCATION_PCT ) DV_ALLOCATION_PCT,
  SMC.SUM_SPLIT,
  SMC.DV_SERVICE_CATEGORY_CD,
  SMC.DV_OA_FLG,
  SMC.START_TV_DTM ,
  SMC.END_TV_DTM,
  SMC.DV_SOURCE_TYPE,
  SMC.SALES_MOTION_TIMING_CD
 FROM
 (
 SELECT
  EL.AR_TRX_KEY,
  SALES_MOTION_CD,
  DV_ALLOCATION_PCT,
  DV_SERVICE_CATEGORY_CD,
  DV_OA_FLG,
  DV_SOURCE_TYPE,
  SALES_MOTION_TIMING_CD,
  SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY AR_TRX_KEY) SUM_SPLIT, 
  MAX(START_TV_DTM) OVER(PARTITION BY AR_TRX_KEY) START_TV_DTM, /* Changed logic as part of May 2nd release */
     MAX(END_TV_DTM) OVER(PARTITION BY AR_TRX_KEY) END_TV_DTM
  FROM
  $$STGDB.WI_EL_AR_NAPLD_SMC_DENORM_INCR EL
  WHERE EL.AR_SKU_SERVICE_CATEGORY_ID = 'COMBINED SERVICES'
  
  UNION ALL
  
 SELECT
  EL.AR_TRX_KEY,
  SALES_MOTION_CD,
  DV_ALLOCATION_PCT,
  DV_SERVICE_CATEGORY_CD,
  DV_OA_FLG,
  DV_SOURCE_TYPE,
  SALES_MOTION_TIMING_CD,
  SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY AR_TRX_KEY) SUM_SPLIT, 
  MAX(START_TV_DTM) OVER(PARTITION BY AR_TRX_KEY) START_TV_DTM, /* Changed logic as part of May 2nd release */
     MAX(END_TV_DTM) OVER(PARTITION BY AR_TRX_KEY) END_TV_DTM
  FROM
  $$STGDB.WI_EL_AR_NAPLD_SMC_DENORM_INCR EL
  WHERE EL.AR_SKU_SERVICE_CATEGORY_ID = 'TECHNICAL SUPPORT SERVICES'
    AND EL.ERP_SKU_SERVICE_CATEGORY_ID = 'TECHNICAL SUPPORT SERVICES'
   
  UNION ALL
  
   SELECT
  EL.AR_TRX_KEY,
  SALES_MOTION_CD,
  DV_ALLOCATION_PCT,
  DV_SERVICE_CATEGORY_CD,
  DV_OA_FLG,
  DV_SOURCE_TYPE,
  SALES_MOTION_TIMING_CD,
  SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY AR_TRX_KEY) SUM_SPLIT, 
  MAX(START_TV_DTM) OVER(PARTITION BY AR_TRX_KEY) START_TV_DTM, /* Changed logic as part of May 2nd release */
     MAX(END_TV_DTM) OVER(PARTITION BY AR_TRX_KEY) END_TV_DTM
  FROM
  $$STGDB.WI_EL_AR_NAPLD_SMC_DENORM_INCR EL
  WHERE EL.AR_SKU_SERVICE_CATEGORY_ID = 'ADVANCED SERVICES'
    AND EL.ERP_SKU_SERVICE_CATEGORY_ID = 'ADVANCED SERVICES'
	
 ) SMC
  GROUP BY 1,2,4,5,6,7,8,9,10
) SMC_FINAL


Post SQL : 



Target2 Name : WI_AR_NAPLD_SLS_MOTION_ATTRIB1


Pre SQL : 
DELETE FROM $$STGDB.WI_AR_NAPLD_SLS_MOTION_ATTRIB ;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_AR_NAPLD_SLS_MOTION_ATTRIB','D');

DELETE FROM $$STGDB.WI_AR_NAPLD_TRX_LINE_KEY_INCR;

INSERT INTO $$STGDB.WI_AR_NAPLD_TRX_LINE_KEY_INCR
SELECT
AR_TRX_LINE_KEY,
DV_ENTERPRISE_INV_SKU_ID,
SALES_MOTION_CD,
C.DV_ALLOCATION_PCT/C.SUM_SPLIT AS DV_ALLOCATION_PCT,
DV_SERVICE_CATEGORY_CD,
DV_OA_FLG,
START_TV_DTM,
END_TV_DTM,
DV_SOURCE_TYPE,
SALES_MOTION_TIMING_CD
FROM 
(SELECT 
AR_TRX_LINE_KEY,
DV_ENTERPRISE_INV_SKU_ID,
SALES_MOTION_CD,
SUM(DV_ALLOCATION_PCT ) AS DV_ALLOCATION_PCT,
DV_SERVICE_CATEGORY_CD,
DV_OA_FLG,
DV_SOURCE_TYPE,
SALES_MOTION_TIMING_CD,
START_TV_DTM,
END_TV_DTM,
SUM_SPLIT
FROM
(
SELECT 
AR_TRX_LINE_KEY,
DV_ENTERPRISE_INV_SKU_ID,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
DV_SERVICE_CATEGORY_CD,
DV_OA_FLG,
DV_SOURCE_TYPE,
SALES_MOTION_TIMING_CD,
START_TV_DTM,
END_TV_DTM,
CASE WHEN SUM_SPLIT=0 THEN 1 ELSE SUM_SPLIT END AS SUM_SPLIT
FROM 
(SELECT
NATIL.AR_TRX_LINE_KEY,
NATIL.PRODUCT_KEY AS DV_ENTERPRISE_INV_SKU_ID,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
DV_SERVICE_CATEGORY_CD,
DV_OA_FLG,
DV_SOURCE_TYPE,
SALES_MOTION_TIMING_CD,
SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY NATL.AR_TRX_LINE_KEY, NATIL.PRODUCT_KEY) SUM_SPLIT,
MAX(START_TV_DTM) OVER(PARTITION BY NATL.AR_TRX_LINE_KEY, NATIL.PRODUCT_KEY) START_TV_DTM,
MAX(END_TV_DTM) OVER(PARTITION BY NATL.AR_TRX_LINE_KEY, NATIL.PRODUCT_KEY) END_TV_DTM
FROM
$$STGDB.WI_AR_NAPLD_SLS_MOTION_ATTRIB ST
INNER JOIN ( SEL AR_TRX_KEY, AR_TRX_LINE_KEY FROM $$FINLGLVWDB.N_AR_TRX_LINE GROUP BY 1,2 ) NATL
ON ST.AR_TRX_KEY = NATL.AR_TRX_KEY
INNER JOIN ( SEL AR_TRX_LINE_KEY, PRODUCT_KEY  FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE GROUP BY 1,2 ) NATIL
ON NATL.AR_TRX_LINE_KEY = NATIL.AR_TRX_LINE_KEY
) A
) B
GROUP BY 1,2,3,5,6,7,8,9,10,11
) C ;

CALL COLLECT_STATS_WRAP('$$STGDB','WI_AR_NAPLD_TRX_LINE_KEY_INCR','D');


Source3 Name : SQ_WI_SW_AR_NAPLD_ALLOC_DATA


Pre SQL : 



SQL Query : 
SELECT DV_PRODUCT_KEY,L1_SALES_TERRITORY_DESCR,BK_BUSINESS_ENTITY_NAME,BK_SUB_BUSINESS_ENTITY_NAME,SALES_MOTION_CD,
((case when BOOK_NET=0 then 1 else BOOK_NET end)/(case when SUM_BOOK_NET=0 then 1 else SUM_BOOK_NET end)) DV_ALLOCATION_PCT
FROM
(
SELECT
BKG.DV_PRODUCT_KEY DV_PRODUCT_KEY,
L1_SALES_TERRITORY_DESCR ,
PFA.BK_BUSINESS_ENTITY_NAME BK_BUSINESS_ENTITY_NAME ,
PFA.BK_SUB_BUSINESS_ENTITY_NAME BK_SUB_BUSINESS_ENTITY_NAME ,
SM.SALES_MOTION_CD SALES_MOTION_CD,
SUM(BKG.DD_COMP_US_NET_PRICE_AMOUNT*PRDT_FAMILY_ALLOCATION_PCT) BOOK_NET,
SUM(BOOK_NET) 
OVER(PARTITION BY BKG.DV_PRODUCT_KEY,L1_SALES_TERRITORY_DESCR,PFA.BK_BUSINESS_ENTITY_NAME,PFA.BK_SUB_BUSINESS_ENTITY_NAME) SUM_BOOK_NET
FROM
$$SLSORDVWDB.N_BOOKINGS_MEASURE BKG
INNER JOIN
$$SLSORDVWDB.MT_BKG_SLS_MOTION_ATTRIBUTION SM
ON SM.SK_SALES_MOTION_ATTRIB_KEY=BKG.SK_SALES_MOTION_ATTRIB_KEY
INNER JOIN $$COMREFVWDB.R_SALES_HIERARCHY RSH
ON RSH.SALES_TERRITORY_KEY = BKG.SALES_TERRITORY_KEY
INNER JOIN $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR BV_FISCAL_DAY_TO_YEAR
ON BKG.BOOKINGS_PROCESS_DATE=BV_FISCAL_DAY_TO_YEAR.CALENDAR_DATE
INNER JOIN $$COMREFVWDB.N_PRODUCT BP1
ON (BP1.ITEM_KEY = BKG.DV_PRODUCT_KEY)
INNER JOIN $$COMREFVWDB.MT_BE_HIER_PRDT_FAMILY_ALLOC PFA
ON (PFA.ITEM_KEY = BP1.ITEM_KEY
AND
PFA.DV_FISCAL_QUARTER_ID = BV_FISCAL_DAY_TO_YEAR.DV_FISCAL_QUARTER_ID)
WHERE BKG.CORPORATE_BOOKINGS_FLG IN ( 'Y' )
AND BKG.BKGS_MEASURE_TRANS_TYPE_CODE IN ('AR' )
AND BV_FISCAL_DAY_TO_YEAR.FISCAL_MONTH_AGE BETWEEN 0 AND 6
AND BP1.MONETIZATION_TYPE_CD IN ('TERM')
AND BP1.PRDT_SETUP_CLASSIFICATION_CD IN ('SOFTWARE')
AND BK_BUSINESS_ENTITY_TYPE_CD= 'I'
AND SM.SALES_MOTION_CD<>'UNKNOWN'
and BKG.DV_SALES_ORDER_LINE_KEY<0
GROUP BY 1,2,3,4,5
) SW_SMC


Post SQL : 



Target3 Name : WI_SW_AR_NAPLD_ALLOC_DATA1


Pre SQL : 
DELETE FROM $$STGDB.WI_SW_AR_NAPLD_ALLOC_DATA ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_SW_AR_NAPLD_ALLOC_DATA','D');


Source4 Name : SQ_WI_SW_AR_NAPLD_DATA_INCR


Pre SQL : 



SQL Query : 
SELECT DRVD.DV_AR_TRX_LINE_KEY,DRVD.DV_PRODUCT_KEY,RSH.L1_SALES_TERRITORY_DESCR,BK_BUSINESS_ENTITY_NAME,BK_SUB_BUSINESS_ENTITY_NAME
 FROM $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD
 INNER JOIN $$COMREFVWDB.R_SALES_HIERARCHY RSH
ON DRVD.PD_SALES_TERRITORY_KEY = RSH.SALES_TERRITORY_KEY
INNER JOIN $$COMREFVWDB.R_FISCAL_DAY_TO_YEAR RFDTY
ON RFDTY.CALENDAR_DATE=DRVD.PROCESS_DATE
INNER JOIN $$COMREFVWDB.N_PRODUCT BP1
ON (BP1.ITEM_KEY = DRVD.DV_PRODUCT_KEY)
INNER JOIN $$COMREFVWDB.MT_BE_HIER_PRDT_FAMILY_ALLOC PFA
ON (PFA.ITEM_KEY = BP1.ITEM_KEY
AND
PFA.DV_FISCAL_QUARTER_ID = RFDTY.DV_FISCAL_QUARTER_ID)
WHERE DRVD.SOURCE_SYSTEM_CODE = 'CG'
 /*AND DRVD.LAST_RECORD_FLAG = 'Y'*/ /*Commenting to avoid missing AR Trx Keys*/
 AND DRVD.DV_SALES_ORDER_LINE_KEY<0
 AND BP1.MONETIZATION_TYPE_CD IN ('TERM')
AND BP1.PRDT_SETUP_CLASSIFICATION_CD IN ('SOFTWARE')
AND BK_BUSINESS_ENTITY_TYPE_CD= 'I'
AND DRVD.DV_AR_TRX_LINE_KEY>0
AND DRVD.EDW_UPDATE_DATETIME>'$$LastExtractDate'
AND DRVD.DV_AR_TRX_LINE_KEY NOT IN (SEL AR_TRX_LINE_KEY FROM $$STGDB.WI_AR_NAPLD_TRX_LINE_KEY_INCR GROUP BY 1)
GROUP BY 1,2,3,4,5


Post SQL : 



Target4 Name : WI_SW_AR_NAPLD_DATA_INCR


Pre SQL : 
DELETE FROM $$STGDB.WI_SW_AR_NAPLD_DATA_INCR ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_SW_AR_NAPLD_DATA_INCR','D');

DELETE FROM $$STGDB.WI_SW_AR_NAPLD_SM_TAG ALL;

INSERT INTO $$STGDB.WI_SW_AR_NAPLD_SM_TAG
SELECT
   DRVD.DV_AR_TRX_LINE_KEY
  ,DRVD.DV_PRODUCT_KEY AS ENTERPRISE_OR_INVOICE_SKU
  ,case when SW_AR_ALLOC.SALES_MOTION_CD is null then 'NEW' else SW_AR_ALLOC.SALES_MOTION_CD END as SALES_MOTION_CD
  ,case when SW_AR_ALLOC.DV_ALLOCATION_PCT is null then 1 else SW_AR_ALLOC.DV_ALLOCATION_PCT END as DV_ALLOCATION_PCT
  ,CASE WHEN SW_AR_ALLOC.SALES_MOTION_CD is null then 'SW DEFAULT TAGGING' ELSE 'SW BE ALLOC TAGGING' END AS REASON_CD
 FROM $$STGDB.WI_SW_AR_NAPLD_DATA_INCR DRVD
 LEFT JOIN $$STGDB.WI_SW_AR_NAPLD_ALLOC_DATA SW_AR_ALLOC
  ON SW_AR_ALLOC.DV_PRODUCT_KEY = DRVD.DV_PRODUCT_KEY
  AND SW_AR_ALLOC.L1_SALES_TERRITORY_DESCR=DRVD.L1_SALES_TERRITORY_DESCR
  AND SW_AR_ALLOC.BK_BUSINESS_ENTITY_NAME=DRVD.BK_BUSINESS_ENTITY_NAME
  AND SW_AR_ALLOC.BK_SUB_BUSINESS_ENTITY_NAME=DRVD.BK_SUB_BUSINESS_ENTITY_NAME;

CALL COLLECT_STATS_WRAP('$$STGDB','WI_SW_AR_NAPLD_SM_TAG','D');


Source5 Name : SQ_WI_SW_AR_NAPLD_SMR_ROLLUP


Pre SQL : 



SQL Query : 
SELECT
SMC_FINAL.DV_AR_TRX_LINE_KEY,
SMC_FINAL.ENTERPRISE_OR_INVOICE_SKU,
SMC_FINAL.SALES_MOTION_CD,
SMC_FINAL.DV_ALLOCATION_PCT/SMC_FINAL.SUM_SPLIT AS DV_ALLOCATION_PCT,
CURRENT_TIMESTAMP(0) AS START_TV_DTM,
'3500-01-01 00:00:00' AS END_TV_DTM,
SMC_FINAL.REASON_CD
FROM (SELECT 
SMC.DV_AR_TRX_LINE_KEY,
SMC.ENTERPRISE_OR_INVOICE_SKU,
SMC.SALES_MOTION_CD,
SUM(SMC.DV_ALLOCATION_PCT ) AS DV_ALLOCATION_PCT,
SMC.SUM_SPLIT ,
SMC.REASON_CD
FROM
(
SELECT 
DV_AR_TRX_LINE_KEY,
ENTERPRISE_OR_INVOICE_SKU,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
CASE WHEN SUM_SPLIT=0 THEN 1 ELSE SUM_SPLIT END AS SUM_SPLIT,
REASON_CD
FROM 
(SELECT
    DV_AR_TRX_LINE_KEY,
	ENTERPRISE_OR_INVOICE_SKU,
SALES_MOTION_CD,
DV_ALLOCATION_PCT,
SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY DV_AR_TRX_LINE_KEY,ENTERPRISE_OR_INVOICE_SKU) SUM_SPLIT,
REASON_CD
FROM
$$STGDB.WI_SW_AR_NAPLD_SM_TAG INCR
) SMC1
) SMC
GROUP BY 1,2,3,5,6
) SMC_FINAL


Post SQL : 



Target5 Name : WI_SW_AR_NAPLD_SMR_ROLLUP


Pre SQL : 
DELETE FROM $$STGDB.WI_SW_AR_NAPLD_SMR_ROLLUP ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_SW_AR_NAPLD_SMR_ROLLUP','D');


Source6 Name : SQ_MT_AR_NAPLD_SLS_MOTION_ATTRIB


Pre SQL : 



SQL Query : 
SELECT 
  INCR.AR_TRX_LINE_KEY,
  INCR.DV_ENTERPRISE_INV_SKU_ID,
  INCR.SALES_MOTION_CD,
  INCR.DV_ALLOCATION_PCT,
  INCR.DV_SERVICE_CATEGORY_CD,
  INCR.DV_OA_FLG,
  INCR.START_TV_DTM ,
  INCR.END_TV_DTM,
  INCR.DV_SOURCE_TYPE,
  INCR.SALES_MOTION_TIMING_CD,
  CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM, 
  USER AS EDW_CREATE_USER, 
  CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM, 
  USER AS EDW_UPDATE_USER,
  'N' AS MANUAL_OVERRIDE_ROLE,
  -999 AS REQUESTING_CSCO_WRKR_PRTY_KEY,
  'UNKNOWN' AS SLS_MTN_CORRECTION_CASE_NUM,
  'UNKNOWN' AS SLS_MTN_CORRECTION_CMNT,
  CAST('UNKNOWN' AS VARCHAR(50)) AS SLS_MTN_CORRECTION_REASON_DESC
,-9999 AS SK_OFFER_ATTRIBUTION_ID_INT
 FROM
$$STGDB.WI_AR_NAPLD_TRX_LINE_KEY_INCR INCR
WHERE NOT EXISTS ( SELECT 1
				FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT
				  WHERE INCR.AR_TRX_LINE_KEY = MT.AR_TRX_LINE_KEY
				    AND INCR.DV_ENTERPRISE_INV_SKU_ID = MT.DV_ENTERPRISE_INV_SKU_ID
					AND INCR.START_TV_DTM = MT.START_TV_DTM 
				  )
AND NOT EXISTS (SELECT 1 FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT1
                                        WHERE  INCR.AR_TRX_LINE_KEY = MT1.AR_TRX_LINE_KEY
				              AND INCR.DV_ENTERPRISE_INV_SKU_ID = MT1.DV_ENTERPRISE_INV_SKU_ID  
                                        AND MT1.MANUAL_OVERRIDE_ROLE = 'Y'
                                        AND MT1.END_TV_DTM = '3500-01-01 00:00:00')
 UNION ALL
 
 SELECT 
  INCR.DV_AR_TRX_LINE_KEY AS AR_TRX_LINE_KEY,
  INCR.ENTERPRISE_OR_INVOICE_SKU,
  INCR.SALES_MOTION_CD,
  INCR.DV_ALLOCATION_PCT,
  'SOFTWARE' AS SERVICE_CATEGORY_CD,
  'N' AS OA_FLG,
  INCR.START_TV_DTM ,
  INCR.END_TV_DTM,
  'NON-RTNR' AS SOURCE_TYPE,
  'UNKNOWN' AS SALES_MOTION_TIMING_CD,
  CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM, 
  USER AS EDW_CREATE_USER, 
  CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM, 
  USER AS EDW_UPDATE_USER,
  'N' AS MANUAL_OVERRIDE_ROLE,
  -999 AS REQUESTING_CSCO_WRKR_PRTY_KEY,
  'UNKNOWN' AS SLS_MTN_CORRECTION_CASE_NUM,
  'UNKNOWN' AS SLS_MTN_CORRECTION_CMNT,
  CASE WHEN  INCR.REASON_CD IS NOT NULL  THEN INCR.REASON_CD ELSE 'NRTR TAGGING' END  AS SLS_MTN_CORRECTION_REASON_DESC,
 -9999 AS SK_OFFER_ATTRIBUTION_ID_INT
 FROM
$$STGDB.WI_SW_AR_NAPLD_SMR_ROLLUP INCR
WHERE NOT EXISTS ( SELECT 1
				FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT
				  WHERE INCR.DV_AR_TRX_LINE_KEY = MT.AR_TRX_LINE_KEY
				    AND INCR.ENTERPRISE_OR_INVOICE_SKU = MT.DV_ENTERPRISE_INV_SKU_ID
					AND INCR.START_TV_DTM = MT.START_TV_DTM 
				  )
AND NOT EXISTS (SELECT 1 FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT1
                                        WHERE  INCR.DV_AR_TRX_LINE_KEY = MT1.AR_TRX_LINE_KEY
				              AND INCR.ENTERPRISE_OR_INVOICE_SKU = MT1.DV_ENTERPRISE_INV_SKU_ID
                                        AND MT1.MANUAL_OVERRIDE_ROLE = 'Y'
                                        AND MT1.END_TV_DTM = '3500-01-01 00:00:00')


Post SQL : 



Target6 Name : MT_AR_NAPLD_SLS_MOTION_ATTRIB1


Pre SQL : 
/* START: SMR Aug 16th changes - To prevent unnecessary changes going into MT table */
DELETE FROM $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK ;

INSERT INTO $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK
SELECT
	AR_TRX_LINE_KEY,
    DV_ENTERPRISE_INV_SKU_ID,
    SALES_MOTION_CD,
    DV_ALLOCATION_PCT,
    DV_SERVICE_CATEGORY_CD,
    DV_OA_FLG,
    START_TV_DTM ,
    END_TV_DTM,
    DV_SOURCE_TYPE,
    SALES_MOTION_TIMING_CD,
    'N' AS MANUAL_OVERRIDE_ROLE,
    -999 AS REQUESTING_CSCO_WRKR_PRTY_KEY,
    'UNKNOWN' AS SLS_MTN_CORRECTION_CASE_NUM,
    'UNKNOWN' AS SLS_MTN_CORRECTION_CMNT,
    'UNKNOWN' AS SLS_MTN_CORRECTION_REASON_DESC
FROM $$STGDB.WI_AR_NAPLD_TRX_LINE_KEY_INCR WI
 WHERE EXISTS ( SEL 1 
				FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT_AR_N
				WHERE MT_AR_N.END_TV_DTM = '3500-01-01 00:00:00'
				  AND WI.AR_TRX_LINE_KEY = MT_AR_N.AR_TRX_LINE_KEY
				  AND WI.DV_ENTERPRISE_INV_SKU_ID = MT_AR_N.DV_ENTERPRISE_INV_SKU_ID
				  AND WI.SALES_MOTION_CD = MT_AR_N.SALES_MOTION_CD
				  AND WI.DV_ALLOCATION_PCT = MT_AR_N.DV_ALLOCATION_PCT
				  AND WI.DV_SERVICE_CATEGORY_CD = MT_AR_N.DV_SERVICE_CATEGORY_CD
				  AND WI.DV_SOURCE_TYPE = MT_AR_N.DV_SOURCE_TYPE )
AND NOT EXISTS (SELECT 1 FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT1
                                        WHERE  WI.AR_TRX_LINE_KEY = MT1.AR_TRX_LINE_KEY
				                        AND WI.DV_ENTERPRISE_INV_SKU_ID = MT1.DV_ENTERPRISE_INV_SKU_ID
                                        AND MT1.MANUAL_OVERRIDE_ROLE = 'Y'
                                        AND MT1.END_TV_DTM = '3500-01-01 00:00:00') ;

COLLECT STATS ON $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK;

DELETE FROM $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK
WHERE ( AR_TRX_LINE_KEY, DV_ENTERPRISE_INV_SKU_ID ) IN
		( SEL AR_TRX_LINE_KEY, DV_ENTERPRISE_INV_SKU_ID
			FROM $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK
			GROUP BY 1,2 HAVING ROUND(SUM(DV_ALLOCATION_PCT),4) <> 1.0000		
		) ;

DELETE FROM $$STGDB.WI_AR_NAPLD_TRX_LINE_KEY_INCR WI
WHERE EXISTS ( SEL 1 
				FROM $$STGDB.WI_AR_N_SMC_ATTRIB_CHNG_CHK NO_CHNG
				WHERE WI.AR_TRX_LINE_KEY = NO_CHNG.AR_TRX_LINE_KEY
				  AND WI.DV_ENTERPRISE_INV_SKU_ID = NO_CHNG.DV_ENTERPRISE_INV_SKU_ID
			  ) ;
/* END: SMR Aug 16th changes - To prevent unnecessary changes going into MT table */

UPDATE MT 
  FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT,
  ( SELECT AR_TRX_LINE_KEY ,DV_ENTERPRISE_INV_SKU_ID
    , MAX(START_TV_DTM) MAX_STRT_DTM
      FROM $$STGDB.WI_AR_NAPLD_TRX_LINE_KEY_INCR 
	 GROUP BY 1,2
   ) WI
SET END_TV_DTM = WI.MAX_STRT_DTM - INTERVAL '1' SECOND,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE MT.AR_TRX_LINE_KEY = WI.AR_TRX_LINE_KEY
  AND MT.DV_ENTERPRISE_INV_SKU_ID = WI.DV_ENTERPRISE_INV_SKU_ID
  AND MT.START_TV_DTM <> WI.MAX_STRT_DTM
  AND MT.END_TV_DTM = '3500-01-01 00:00:00' 
AND MT.MANUAL_OVERRIDE_ROLE = 'N';

/* Software Unreference Data -- To prevent unnecessary changes going into MT table*/

UPDATE MT 
  FROM $$SLSORDVWDB.MT_AR_NAPLD_SLS_MOTION_ATTRIB MT,
  ( SELECT DV_AR_TRX_LINE_KEY ,ENTERPRISE_OR_INVOICE_SKU
    , MAX(START_TV_DTM) MAX_STRT_DTM
      FROM $$STGDB.WI_SW_AR_NAPLD_SMR_ROLLUP 
	 GROUP BY 1,2
   ) WI
SET END_TV_DTM = WI.MAX_STRT_DTM - INTERVAL '1' SECOND,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE MT.AR_TRX_LINE_KEY = WI.DV_AR_TRX_LINE_KEY
  AND MT.DV_ENTERPRISE_INV_SKU_ID = WI.ENTERPRISE_OR_INVOICE_SKU
  AND MT.START_TV_DTM <> WI.MAX_STRT_DTM
  AND MT.END_TV_DTM = '3500-01-01 00:00:00' 
AND MT.MANUAL_OVERRIDE_ROLE = 'N';


Post SQL : 
CALL COLLECT_STATS_WRAP ( '$$SLSORDVWDB','MT_AR_NAPLD_SLS_MOTION_ATTRIB','D' ) ;