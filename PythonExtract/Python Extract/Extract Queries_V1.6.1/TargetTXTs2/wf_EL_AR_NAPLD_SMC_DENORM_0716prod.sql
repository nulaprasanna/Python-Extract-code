


Source1 Name : SQ_WI_N_AR_TRX_INCR


Pre SQL : 



SQL Query : 
SELECT
AR_TRX_KEY,
AR.SS_CODE,
--ICMS_DEAL_ID_INFO_TXT,
CASE WHEN (ICMS_DEAL_ID_INFO_TXT IS NULL) THEN NSO.BK_DEAL_ID ELSE REGEXP_REPLACE(REGEXP_REPLACE(TRIM(ICMS_DEAL_ID_INFO_TXT),'[^0-9 /&,A-Za-z]','',1,0,'i'),'[&/]',',',1,0,'i') END AS DEAL_ID, /* US523085 SMR May 2021 release */
AR.EDW_UPDATE_DATETIME
FROM $$FINLGLVWDB.N_AR_TRX AR
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO /* Added NSO join as part of US523085 SMR May 2021 release */
ON AR.SALES_ORDER_KEY=NSO.SALES_ORDER_KEY
WHERE /* AR_TRX_REASON_CODE IN (
'ACCRUED REBATES',
'ACCRUED REBATES (SPECIFIC)',
'REBATE',
'REBATES'
)
AND */ /* Commented as part of SMR Aug 16th release to allow all kinds of deals from n ar trx */
DEAL_ID IS NOT NULL
AND AR.EDW_UPDATE_DATETIME > '$$LastExtractDate'


Post SQL : 



Target1 Name : WI_N_AR_TRX_INCR


Pre SQL : 
DELETE FROM $$STGDB.WI_N_AR_TRX_INCR ;


Post SQL : 
CALL COLLECT_STATS_WRAP ( '$$STGDB','WI_N_AR_TRX_INCR','D' );

INSERT INTO $$STGDB.WI_N_AR_TRX_INCR
SELECT
EX.AR_TRX_KEY,
EX.SS_CODE,
CASE WHEN (EX.ICMS_DEAL_ID_INFO_TXT IS NULL) THEN NSO.BK_DEAL_ID ELSE REGEXP_REPLACE(REGEXP_REPLACE(TRIM(EX.ICMS_DEAL_ID_INFO_TXT),'[^0-9 /&,A-Za-z]','',1,0,'i'),'[&/]',',',1,0,'i') END AS DEAL_ID,
EX.EDW_UPDATE_DATETIME
FROM $$EXCEPDB.EX_N_AR_TRX_INCR EX
INNER JOIN $$FINLGLVWDB.N_AR_TRX AR
ON EX.AR_TRX_KEY = AR.AR_TRX_KEY
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
ON AR.SALES_ORDER_KEY=NSO.SALES_ORDER_KEY
WHERE DEAL_ID IS NOT NULL
AND NOT EXISTS (SELECT 1 FROM $$STGDB.WI_N_AR_TRX_INCR WI
WHERE EX.AR_TRX_KEY=WI.AR_TRX_KEY);

INSERT INTO $$EXCEPDB.EX_N_AR_TRX_INCR
SELECT
AR_TRX_KEY,
AR.SS_CODE,
REGEXP_REPLACE(REGEXP_REPLACE(TRIM(ICMS_DEAL_ID_INFO_TXT),'[^0-9 /&,A-Za-z]','',1,0,'i'),'[&/]',',',1,0,'i'),
AR.EDW_UPDATE_DATETIME
FROM $$FINLGLVWDB.N_AR_TRX AR
WHERE
AR.EDW_UPDATE_DATETIME > '$$LastExtractDate'
AND NOT EXISTS (SELECT 1 FROM $$STGDB.WI_N_AR_TRX_INCR WI
WHERE AR.AR_TRX_KEY=WI.AR_TRX_KEY)
AND NOT EXISTS ( SELECT 1 FROM $$EXCEPDB.EX_N_AR_TRX_INCR EX
WHERE AR.AR_TRX_KEY = EX.AR_TRX_KEY AND EX.SS_CODE = AR.SS_CODE);

DELETE FROM $$EXCEPDB.EX_N_AR_TRX_INCR EX
WHERE EXISTS (SELECT 1 FROM $$STGDB.WI_N_AR_TRX_INCR WI WHERE EX.AR_TRX_KEY = WI.AR_TRX_KEY AND EX.SS_CODE = WI.SS_CODE);

CALL COLLECT_STATS_WRAP ( '$$EXCEPDB','EX_N_AR_TRX_INCR','D' );

DELETE FROM $$STGDB.WI_AR_TRX_DEAL ALL;

INSERT INTO $$STGDB.WI_AR_TRX_DEAL
WITH RECURSIVE DEAL_EXT AS
(
SELECT AR_TRX_KEY
,ICMS_DEAL_ID_INFO_TXT DEAL_ID
,LENGTH(TRIM(ICMS_DEAL_ID_INFO_TXT)) - LENGTH(OREPLACE(TRIM(ICMS_DEAL_ID_INFO_TXT),',',''))+1 COMMA_COUNT
FROM $$STGDB.WI_N_AR_TRX_INCR

UNION ALL

SELECT TMP.AR_TRX_KEY
,TRIM(REGEXP_SUBSTR(NAT.ICMS_DEAL_ID_INFO_TXT,'[^,]+',1,COMMA_COUNT,'i'))
,TMP.COMMA_COUNT-1 COMMA_COUNT
FROM DEAL_EXT TMP
INNER JOIN $$STGDB.WI_N_AR_TRX_INCR NAT
ON NAT.AR_TRX_KEY=TMP.AR_TRX_KEY
WHERE COMMA_COUNT>0
)
SELECT AR_TRX_KEY, DEAL_ID FROM DEAL_EXT
WHERE OREPLACE(DEAL_ID, NULL) IS NOT NULL
QUALIFY MAX(COMMA_COUNT) OVER (PARTITION BY AR_TRX_KEY) <> COMMA_COUNT;

INSERT INTO $$STGDB.WI_AR_TRX_DEAL
SELECT AR_TRX_KEY, DEAL_ID
FROM $$STGDB.WI_AR_NAPLD_RTR RTR
WHERE NOT EXISTS ( SELECT 1 FROM $$STGDB.WI_AR_TRX_DEAL INCR WHERE RTR.AR_TRX_KEY = INCR.AR_TRX_KEY ) ;

/* WI_AR_TRX_DEAL holds all incremental AR TRX KEYS from N AR TRX as well as AR TRX KEYs that are linked to incremental RTR sales order line keys*/

CALL COLLECT_STATS_WRAP ( '$$STGDB','WI_AR_TRX_DEAL','D' );


Source2 Name : SQ_WI_AR_NAPLD_SMC_DENORM


Pre SQL : 



SQL Query : 
SELECT
AR.DEAL_ID
, AR.AR_TRX_KEY
, NSO.SALES_ORDER_KEY
, NSOL.SALES_ORDER_LINE_KEY
, CASE WHEN SMC_ALLOC.SALES_ORDER_LINE_KEY > 0 THEN SMC_ALLOC.SALES_MOTION_CD 
          ELSE 'UNKNOWN' 
 END SALES_MOTION_CD
, CASE WHEN SMC_ALLOC.SALES_ORDER_LINE_KEY > 0 THEN SMC_ALLOC.DV_ALLOCATION_PCT
          ELSE 1.000000 END AS DV_ALLOCATION_PCT
, CASE WHEN SMC_ALLOC.SALES_ORDER_LINE_KEY > 0 THEN SMC_ALLOC.DV_SERVICE_CATEGORY_CD
          ELSE 'TS' END AS DV_SERVICE_CATEGORY_CD
, 'N' AS DV_OA_FLG
, CURRENT_TIMESTAMP(0) AS START_TV_DTM
, '3500-01-01 00:00:00' AS END_TV_DTM
,CASE WHEN SMC_ALLOC.SALES_ORDER_LINE_KEY > 0 THEN 'RTNR' 
          ELSE' UNKNOWN'
END AS DV_SOURCE_TYPE
 , CASE WHEN SMC_ALLOC.SALES_ORDER_LINE_KEY > 0 THEN SMC_ALLOC.SALES_MOTION_TIMING_CD 
          ELSE  COALESCE( TTS.SALES_MOTION_TIMING_CD, 'UNKNOWN' ) END SALES_MOTION_TIMING_CD  
/* , 'UNKNOWN' AS SALES_MOTION_TIMING_CD /* Commented as not needed */
FROM
(SELECT AR_TRX_KEY, DEAL_ID FROM $$STGDB.WI_AR_TRX_DEAL GROUP BY 1,2 ) AR
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
ON AR.DEAL_ID = NSO.BK_DEAL_ID
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
ON NSO.SALES_ORDER_KEY = NSOL.SALES_ORDER_KEY
AND NSOL.SS_CODE = 'CG'
AND NSOL.END_TV_DATETIME = '3500-01-01 00:00:00'
LEFT JOIN $$STGDB.WI_TTS_SOWB_SOL_LINES TTS
ON NSOL.SALES_ORDER_LINE_KEY = TTS.SALES_ORDER_LINE_KEY
LEFT JOIN (SELECT SALES_ORDER_LINE_KEY,SALES_MOTION_CD,DV_SERVICE_CATEGORY_CD,SALES_MOTION_TIMING_CD,
SUM(DV_ALLOCATION_PCT) AS DV_ALLOCATION_PCT
FROM $$SLSORDVWDB.MT_RTNR_SMC_ALLOCATION 
WHERE END_TV_DTM = '3500-01-01 00:00:00'
GROUP BY 1,2,3,4)SMC_ALLOC
ON NSOL.SALES_ORDER_LINE_KEY = SMC_ALLOC.SALES_ORDER_LINE_KEY


Post SQL : 



Target2 Name : WI_AR_NAPLD_SMC_DENORM1


Pre SQL : 
DELETE FROM $$STGDB.WI_AR_NAPLD_SMC_DENORM ALL;


Post SQL : 
CALL COLLECT_STATS_WRAP ( '$$STGDB','WI_AR_NAPLD_SMC_DENORM','D' );


Source3 Name : SQ_EL_AR_NAPLD_SMC_DENORM


Pre SQL : 



SQL Query : 
SELECT 
  DEAL_ID,
  AR_TRX_KEY  ,
  SALES_ORDER_KEY,
  SALES_ORDER_LINE_KEY,
  SALES_MOTION_CD, 
  DV_ALLOCATION_PCT, 
  DV_SERVICE_CATEGORY_CD        ,
  DV_OA_FLG, 
  START_TV_DTM, 
  END_TV_DTM, 
  DV_SOURCE_TYPE, 
--  SALES_MOTION_TIMING_CD,
 CASE WHEN SALES_MOTION_CD = 'RENEW' THEN
      SALES_MOTION_TIMING_CD
ELSE 'UNKNOWN'
END AS SALES_MOTION_TIMING_CD,
  CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM, 
  USER AS EDW_CREATE_USER, 
  CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM, 
  USER AS EDW_UPDATE_USER
FROM $$STGDB.WI_AR_NAPLD_SMC_DENORM WI
  WHERE NOT EXISTS ( SELECT 1 FROM $$ETLVWDB.EL_AR_NAPLD_SMC_DENORM EL
                                  WHERE WI.AR_TRX_KEY = EL.AR_TRX_KEY
								    AND WI.SALES_ORDER_LINE_KEY = EL.SALES_ORDER_LINE_KEY
                                    AND WI.START_TV_DTM = EL.START_TV_DTM
					)


Post SQL : 



Target3 Name : EL_AR_NAPLD_SMC_DENORM1


Pre SQL : 
UPDATE EL 
FROM $$ETLVWDB.EL_AR_NAPLD_SMC_DENORM EL,
 ( SELECT AR_TRX_KEY, SALES_ORDER_LINE_KEY, MAX(START_TV_DTM) MAX_START_DTM
	FROM $$STGDB.WI_AR_NAPLD_SMC_DENORM WI
   GROUP BY 1, 2
  ) WI
SET 
	END_TV_DTM = WI.MAX_START_DTM - INTERVAL '1' SECOND,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0),
	EDW_UPDATE_USER = USER
WHERE EL.AR_TRX_KEY = WI.AR_TRX_KEY
  AND EL.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY
  AND EL.START_TV_DTM <> WI.MAX_START_DTM
  AND EL.END_TV_DTM = '3500-01-01 00:00:00' ;


Post SQL : 
CALL COLLECT_STATS_WRAP ( '$$ETLONLYDB','EL_AR_NAPLD_SMC_DENORM','D' );

/*ADDED AS PART OF US541080 JULY1 2021 RELEASE*/
UPDATE CEL FROM
$$ETLVWDB.CTL_ETL_LAST_EXTRACT_DATES CEL,
( SELECT MAX(EDW_UPDATE_DTM) AS MAX_UPD_DT FROM $$ETLVWDB.EL_AR_NAPLD_SMC_DENORM ) WI
SET LAST_EXTRACT_DATE = COALESCE(WI.MAX_UPD_DT,CEL.LAST_EXTRACT_DATE)
WHERE CEL.JOB_STREAM_ID = 'wf_EL_AR_NAPLD_SMC_DENORM'
AND CEL.TABLE_NAME = 'EL_AR_NAPLD_SMC_DENORM';

/* Commented as SMT updates are taken care in wf_EL_SOL_SMT_SMC ETL as part of Aug 16th release 
UPDATE EL FROM
$$ETLVWDB.EL_AR_NAPLD_SMC_DENORM EL
, $$STGDB.WI_TTS_SOWB_SOL_LINES NSOL
SET --SALES_MOTION_CD = NSOL.SALES_MOTION_CD,
SALES_MOTION_TIMING_CD = NSOL.SALES_MOTION_TIMING_CD,
EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0),
EDW_UPDATE_USER = 'RETRO_TS_NSOL_SMC_UPD'
WHERE EL.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
AND EL.END_TV_DTM = '3500-01-01 00:00:00'
AND NSOL.SALES_ORDER_LINE_KEY > 0
AND EL.DV_SOURCE_TYPE = 'NON-RTNR'
AND EL.SALES_MOTION_TIMING_CD <> NSOL.SALES_MOTION_TIMING_CD  /*(EL.SALES_MOTION_CD <> NSOL.SALES_MOTION_CD
     OR EL.SALES_MOTION_TIMING_CD <> NSOL.SALES_MOTION_TIMING_CD ) ;
*/