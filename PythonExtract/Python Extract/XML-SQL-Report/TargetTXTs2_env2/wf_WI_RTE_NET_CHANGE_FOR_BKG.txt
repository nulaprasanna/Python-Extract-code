ETL Name:	wf_WI_RTE_NET_CHANGE_FOR_BKG.XML


Session 1: 	s_m_WI_RTE_NET_CHANGE_FOR_BKG
Mapping 1: 	m_WI_RTE_NET_CHANGE_FOR_BKGm_WI_RTE_NET_CHANGE_FOR_BKG


Source1 Name : SQ_WI_BKG_TX_SQ_ID_RTE


Pre SQL : 
/* Added as part of December RTNR release */
DELETE FROM $$STGDB.WI_AR_SUMMARY_QUOTE_SMC ALL;

INSERT INTO $$STGDB.WI_AR_SUMMARY_QUOTE_SMC
SELECT  
     SALES_ORDER_LINE_KEY, 
     DV_EFFECTIVE_DTM, 
     CASE WHEN SO_CNT > 1 THEN 'MIX' 
	      ELSE SALES_MOTION_CD 
	  END SALES_MOTION_CD, 
     USER EDW_CREATE_USER, 
     CURRENT_TIMESTAMP(0) EDW_CREATE_DTM 
FROM ( SELECT SALES_ORDER_LINE_KEY, 
	  SALES_MOTION_CD,
	  MAX(DV_EFFECTIVE_DTM) OVER(PARTITION BY SALES_ORDER_LINE_KEY) AS DV_EFFECTIVE_DTM, 
	  COUNT(*) OVER(PARTITION BY SALES_ORDER_LINE_KEY) SO_CNT,
	  SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY SALES_ORDER_LINE_KEY) DV_ALLOCATION_PCT
         FROM (
		 SELECT
		 SALES_ORDER_LINE_KEY,
			SALES_MOTION_CD,
			DV_EFFECTIVE_DTM,
			EDW_UPDATE_DTM,
			SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY SALES_ORDER_LINE_KEY ) SUM_ALLOCATION_PCT,
			CAST( DV_ALLOCATION_PCT/SUM_ALLOCATION_PCT AS DECIMAL(18,6) ) AS DV_ALLOCATION_PCT /* Included inner query part to handle CS SQ scenario Sep 26 Q2FY20 Release */
			FROM
			$$SLSORDVWDB.MT_SUMMARY_QUOTE_SOL_ALLOC 
         WHERE DV_EXPIRATION_DTM = '3500-01-01 00:00:00'  
           AND SALES_ORDER_LINE_KEY IN ( SELECT SALES_ORDER_LINE_KEY  
                                            FROM $$SLSORDVWDB.MT_SUMMARY_QUOTE_SOL_ALLOC  
                                           WHERE EDW_UPDATE_DTM > ( SELECT LAST_EXTRACT_DATE FROM $$ETLVWDB.CTL_ETL_LAST_EXTRACT_DATES WHERE JOB_STREAM_ID = 'wf_WI_RTE_NET_CHANGE_FOR_BKG' AND TABLE_NAME = 'WI_AR_SUMMARY_QUOTE_SMC' ) 
                                         ) /* For identifying all open records for a particular allocation change*/ 
			  ) WI
) WI
WHERE ROUND(DV_ALLOCATION_PCT) = 1.00 
GROUP BY 1,2,3,4,5 ;

CALL COLLECT_STATS_WRAP('$$STGDB', 'WI_AR_SUMMARY_QUOTE_SMC', 'D') ;

UPDATE WI_AR
FROM $$STGDB.WI_AR_SALES_MOTION_CHANGE WI_AR, 
    ( SELECT SALES_ORDER_LINE_KEY, 
          SALES_MOTION_CD , 
          DV_EFFECTIVE_DTM 
    FROM $$STGDB.WI_AR_SUMMARY_QUOTE_SMC ) WI
SET SALES_MOTION_CD = WI.SALES_MOTION_CD ,
	SOURCE_COMMIT_TIME = WI.DV_EFFECTIVE_DTM,
    EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)              
 WHERE WI_AR.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY
   AND WI_AR.EDW_UPDATE_DTM < WI.DV_EFFECTIVE_DTM;
   
UPDATE EL 
FROM $$ETLVWDB.CTL_ETL_LAST_EXTRACT_DATES EL, 
	 ( SELECT MAX(EDW_UPDATE_DTM) MAX_UPD_DATE FROM $$SLSORDVWDB.MT_SUMMARY_QUOTE_SOL_ALLOC ) NSOL 
 SET LAST_EXTRACT_DATE = COALESCE(NSOL.MAX_UPD_DATE , EL.LAST_EXTRACT_DATE ) 
WHERE JOB_STREAM_ID = 'wf_WI_RTE_NET_CHANGE_FOR_BKG'  
AND TABLE_NAME = 'WI_AR_SUMMARY_QUOTE_SMC';
/* Added as part of December RTNR release */

UPDATE WI 
FROM $$STGDB.WI_AR_SALES_MOTION_CHANGE WI , 
	( SELECT SALES_ORDER_LINE_KEY, 
			 SK_SALES_ORDER_LINE_ID_INT, 
			 SALES_MOTION_CD,
			 SOURCE_COMMIT_DTM 
	   FROM $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT_HIST_TV NSOL 
	   WHERE NSOL.END_TV_DTM = '3500-01-01 00:00:00'
AND NSOL.SS_CD <> 'OPL'
		 AND NSOL.SALES_ORDER_LINE_KEY NOT IN ( SELECT SALES_ORDER_LINE_KEY 
												FROM 
													( 
												SELECT
												 SALES_ORDER_LINE_KEY,
												 SALES_MOTION_CD,
												 DV_EFFECTIVE_DTM,
												 EDW_UPDATE_DTM,
												 SUM(DV_ALLOCATION_PCT) OVER(PARTITION BY SALES_ORDER_LINE_KEY ) SUM_ALLOCATION_PCT,
												 CAST( DV_ALLOCATION_PCT/SUM_ALLOCATION_PCT AS DECIMAL(18,6) ) AS DV_ALLOCATION_PCT /* Included inner query part to handle CS SQ scenario Sep 26 Q2FY20 Release */
					                            FROM
					                            $$SLSORDVWDB.MT_SUMMARY_QUOTE_SOL_ALLOC 
					                            WHERE DV_EXPIRATION_DTM = '3500-01-01 00:00:00' 
					                            ) WI 
												GROUP BY 1 HAVING ROUND(SUM(DV_ALLOCATION_PCT)) = 1.00)
												AND NSOL.EDW_UPDATE_DTM > CURRENT_DATE - 7
	) NSOL
SET SALES_MOTION_CD = NSOL.SALES_MOTION_CD , 
	SOURCE_COMMIT_TIME = NSOL.SOURCE_COMMIT_DTM,
	EDW_UPDATE_DTM = CURRENT_TIMESTAMP(0)
WHERE WI.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
  AND WI.SALES_MOTION_CD <> NSOL.SALES_MOTION_CD ; 

INSERT INTO $$STGDB.WI_AR_SALES_MOTION_CHANGE  
 SELECT SALES_ORDER_LINE_KEY, 
		SK_SALES_ORDER_LINE_ID_INT, 
		SALES_MOTION_CD,
		SOURCE_COMMIT_DTM ,
		CURRENT_TIMESTAMP(0) AS EDW_CREATE_DTM, 
		CURRENT_TIMESTAMP(0) AS EDW_UPDATE_DTM
		FROM
		(
		SELECT
		SALES_ORDER_LINE_KEY, 
		SK_SALES_ORDER_LINE_ID_INT, 
		SALES_MOTION_CD,
		SOURCE_COMMIT_DTM 
		FROM $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT_HIST_TV NSOL 
		WHERE NSOL.END_TV_DTM = '3500-01-01 00:00:00' 
		AND NSOL.SS_CD <> 'OPL'
		AND NSOL.EDW_UPDATE_DTM > CURRENT_DATE - 7 
		AND NSOL.SALES_MOTION_CD <> 'UNKNOWN'
		UNION
		SELECT
		NSOL1.SALES_ORDER_LINE_KEY, 
		NSOL1.SK_SALES_ORDER_LINE_ID_INT, 
		NSOL1.SALES_MOTION_CD,
		NSOL1.SOURCE_COMMIT_DTM 
		FROM $$STGDB.WI_AR_SUMMARY_QUOTE_SMC SMC
		INNER JOIN $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT_HIST_TV NSOL1 
		ON SMC.SALES_ORDER_LINE_KEY = NSOL1.SALES_ORDER_LINE_KEY
		AND NSOL1.SS_CD <> 'OPL'
		AND NSOL1.END_TV_DTM = '3500-01-01 00:00:00' 
   ) WI
 WHERE NOT EXISTS ( SELECT 1 FROM $$STGDB.WI_AR_SALES_MOTION_CHANGE WI_AR 
                    WHERE WI_AR.SALES_ORDER_LINE_KEY = WI.SALES_ORDER_LINE_KEY ) ; 

COLLECT STATS ON $$STGDB.WI_AR_SALES_MOTION_CHANGE ;


SQL Query : 
SELECT 
   DRVD.TRANSACTION_SEQUENCE_ID_INT AS BK_TRANSACTION_SEQ_ID_INT, 
  DRVD.SOURCE_SYSTEM_CODE AS BK_SS_CD , 
  DRVD.DV_TRANSACTION_SOURCE_CD      , 
  DRVD.DV_TRANSACTION_KEY,
  NRSCA.SCA_SOURCE_COMMIT_DTM ,
    CASE  WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100) 
   THEN NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT
   ELSE   NFISMN.BK_FISCAL_MONTH_NUMBER_INT
  END AS BK_FISCAL_MONTH_NUMBER_INT , 
  CASE  WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)
   THEN NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT
   ELSE   NFISMN.BK_FISCAL_YEAR_NUMBER_INT
  END AS BK_FISCAL_YEAR_NUMBER_INT ,
  CASE  WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)
   THEN (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)
   ELSE   ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  )
  END AS DV_FISCAL_YEAR_MONTH_NUM_INT
 FROM 
 (SELECT LAST_EXTRACT_DATE FROM $$ETLVWDB.DW_JOB_STREAMS WHERE JOB_STREAM_ID ='wf_WI_RTE_NET_CHANGE_FOR_BKG') X,
   ( SELECT BK_FISCAL_MONTH_NUMBER_INT, BK_FISCAL_YEAR_NUMBER_INT
   FROM $$COMREFVWDB.N_FISCAL_MONTH 
   WHERE CURRENT_DATE-1 BETWEEN FISCAL_MONTH_START_DATE AND FISCAL_MONTH_END_DATE
  ) NFISMN_SYS ,
 $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
  ON (DRVD.SOURCE_SYSTEM_CODE  = NSSC.SOURCE_SYSTEM_CODE )
 INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRA
 ON(NRA.REVENUE_TRANSFER_KEY  =DRVD.REVENUE_TRANSFER_KEY)
 INNER JOIN $$SLSORDVWDB.N_SCA_FOR_RTE_TRX  NRSCA
  ON NRSCA.EP_TRANSACTION_ID_INT = NRA.EP_TRANSACTION_ID_INT   
 INNER JOIN $$ETLVWDB.SM_SCA_FOR_RTE_TRX SRSCA
 ON (SRSCA.SALES_CREDIT_ASSIGNMENT_KEY=NRSCA.SALES_CREDIT_ASSIGNMENT_KEY )
 INNER JOIN 
 ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG   QUOTA_FLAG
  FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
  QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
) NSCTT
  ON NRSCA.SALES_CREDIT_TYPE_CD = NSCTT.BK_SALES_CREDIT_TYPE_CODE 
 INNER JOIN $$COMREFVWDB.N_FISCAL_MONTH NFISMN  
  ON  NRSCA.SCA_SOURCE_COMMIT_DTM BETWEEN NFISMN.FISCAL_MONTH_START_DATE AND NFISMN.FISCAL_MONTH_END_DATE
 WHERE
  DRVD.SCA_SOURCE_TYPE_CD IN ('X','R')
  AND (DRVD.FORWARD_REVERSE_CODE   = 'F' OR DRVD.FORWARD_REVERSE_CODE   = 'FORWARD')  
  AND DRVD.LAST_RECORD_FLAG ='Y' 
   /* TO PULL INCREMENTALLY */ 
 /*AND NRA.TRANSACTION_SOURCE_CD = 'ERP': Q1FY17 commented as part of Q1FY18 XAAS SC*/
 AND NRSCA.EDW_UPDATE_DTM > X.LAST_EXTRACT_DATE
 QUALIFY RANK () OVER ( PARTITION BY DRVD.SOURCE_SYSTEM_CODE , DV_TRANSACTION_SOURCE_CD  , DV_TRANSACTION_KEY, NRSCA.EP_TRANSACTION_ID_INT ORDER BY NRSCA.SK_LINE_SEQ_ID_INT DESC)=1


Post SQL : 



Target1 Name : WI_BKG_TX_SQ_ID_RTE1


Pre SQL : 
DELETE FROM $$STGDB.WI_BKG_TX_SQ_ID_RTE;


Post SQL : 
COLLECT STATS ON $$STGDB.WI_BKG_TX_SQ_ID_RTE;


Source2 Name : SQ_WI_BKG_TX_SQ_ID_FORWARD


Pre SQL : 



SQL Query : 
SELECT	   DRVD.TRANSACTION_SEQUENCE_ID_INT AS BK_TRANSACTION_SEQ_ID_INT,
			   DRVD.SOURCE_SYSTEM_CODE AS BK_SS_CD ,    DRVD.DV_TRANSACTION_SOURCE_CD      ,
			   DRVD.DV_TRANSACTION_KEY,   NULL OLD_DEFAULT_SC_FLG,          NRSCA.SK_LINE_SEQ_ID_INT,
			    NRSCA.SCA_SOURCE_TYPE_CD,    NSCTT.QUOTA_FLAG,       NRSCA.SCA_SOURCE_COMMIT_DTM ,
			  CASE 
				WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)         THEN NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT        
				ELSE NFISMN.BK_FISCAL_MONTH_NUMBER_INT   
			END AS BK_FISCAL_MONTH_NUMBER_INT ,    
			CASE 
				WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)       THEN NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT       
				ELSE NFISMN.BK_FISCAL_YEAR_NUMBER_INT   
			END AS BK_FISCAL_YEAR_NUMBER_INT ,   
			CASE 
				WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)       THEN (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)       
				ELSE ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  )   
			END AS DV_FISCAL_YEAR_MONTH_NUM_INT,    -999 AS EP_SK_SALES_CREDIT_TYPE_ID_INT,
			           -999 AS EP_SK_SALESREP_ID_INT,   -999 AS  EP_SK_TERRITORY_ID_INT,
			  NRSCA.SCA_SALES_COMMISSION_PCT,    NRSCA.SALES_CREDIT_TYPE_CD,
			  NULL AS EVENT_TYPE,   NRSCA.SALES_REP_NUM  ,   NRSCA.SALES_TERRITORY_KEY   ,
			  Coalesce(SMC.SALES_MOTION_CD, 'UNKNOWN' )     
	FROM	  (
		SELECT	LAST_EXTRACT_DATE 
		FROM	$$ETLVWDB.DW_JOB_STREAMS 
		WHERE	JOB_STREAM_ID ='wf_WI_RTE_NET_CHANGE_FOR_BKG') X,    ( 
		SELECT	BK_FISCAL_MONTH_NUMBER_INT, BK_FISCAL_YEAR_NUMBER_INT    
		FROM	$$COMREFVWDB.N_FISCAL_MONTH     
		WHERE	Current_Date-1 BETWEEN FISCAL_MONTH_START_DATE 
			AND FISCAL_MONTH_END_DATE   ) NFISMN_SYS ,  $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD  
	INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC    
		ON (DRVD.SOURCE_SYSTEM_CODE  = NSSC.SOURCE_SYSTEM_CODE )  
	INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRA  
		ON(NRA.REVENUE_TRANSFER_KEY  =DRVD.REVENUE_TRANSFER_KEY)  
	INNER JOIN $$SLSORDVWDB.N_SCA_FOR_RTE_TRX  NRSCA   
		ON NRSCA.EP_TRANSACTION_ID_INT = NRA.EP_TRANSACTION_ID_INT     
	INNER JOIN $$ETLVWDB.SM_SCA_FOR_RTE_TRX SRSCA  
		ON (SRSCA.SALES_CREDIT_ASSIGNMENT_KEY=NRSCA.SALES_CREDIT_ASSIGNMENT_KEY )  
	INNER JOIN   ( 
		SELECT	BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG   QUOTA_FLAG   
		FROM	$$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV     
		QUALIFY	Row_Number () Over (
		PARTITION BY BK_SALES_CREDIT_TYPE_CODE   
		ORDER BY END_TV_DATE DESC)=1 ) NSCTT   
		ON NRSCA.SALES_CREDIT_TYPE_CD = NSCTT.BK_SALES_CREDIT_TYPE_CODE   
	INNER JOIN $$COMREFVWDB.N_FISCAL_MONTH NFISMN     
		ON  NRSCA.SCA_SOURCE_COMMIT_DTM BETWEEN NFISMN.FISCAL_MONTH_START_DATE 
		AND NFISMN.FISCAL_MONTH_END_DATE   
	LEFT JOIN $$STGDB.WI_AR_SALES_MOTION_CHANGE SMC     
		ON DRVD.DV_SALES_ORDER_LINE_KEY = SMC.SALES_ORDER_LINE_KEY  
	WHERE	  DRVD.SCA_SOURCE_TYPE_CD IN ('X','R')   
		AND (DRVD.FORWARD_REVERSE_CODE   = 'F' 
		OR DRVD.FORWARD_REVERSE_CODE   = 'FORWARD')     
		AND DRVD.LAST_RECORD_FLAG ='Y'          
		AND NRSCA.EDW_UPDATE_DTM > X.LAST_EXTRACT_DATE  
		AND DRVD.REVENUE_TRANSFER_KEY = -999
	QUALIFY	Rank () Over ( 
	PARTITION BY DRVD.SOURCE_SYSTEM_CODE , DV_TRANSACTION_SOURCE_CD  ,
			DV_TRANSACTION_KEY, NRSCA.EP_TRANSACTION_ID_INT 
	ORDER BY TRANSACTION_SEQUENCE_ID_INT DESC)=1 
	
	UNION ALL
	
	SELECT	   DRVD.TRANSACTION_SEQUENCE_ID_INT AS BK_TRANSACTION_SEQ_ID_INT,
			   DRVD.SOURCE_SYSTEM_CODE AS BK_SS_CD ,    DRVD.DV_TRANSACTION_SOURCE_CD      ,
			   DRVD.DV_TRANSACTION_KEY,   NULL OLD_DEFAULT_SC_FLG,          NRSCA.SK_LINE_SEQ_ID_INT,
			    NRSCA.SCA_SOURCE_TYPE_CD,    NSCTT.QUOTA_FLAG,       NRSCA.SCA_SOURCE_COMMIT_DTM ,
			  CASE 
				WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)         THEN NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT        
				ELSE NFISMN.BK_FISCAL_MONTH_NUMBER_INT   
			END AS BK_FISCAL_MONTH_NUMBER_INT ,    
			CASE 
				WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)       THEN NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT       
				ELSE NFISMN.BK_FISCAL_YEAR_NUMBER_INT   
			END AS BK_FISCAL_YEAR_NUMBER_INT ,   
			CASE 
				WHEN ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  ) < (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)       THEN (NFISMN_SYS.BK_FISCAL_MONTH_NUMBER_INT+NFISMN_SYS.BK_FISCAL_YEAR_NUMBER_INT *100)       
				ELSE ( NFISMN.BK_FISCAL_MONTH_NUMBER_INT+NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100  )   
			END AS DV_FISCAL_YEAR_MONTH_NUM_INT,    -999 AS EP_SK_SALES_CREDIT_TYPE_ID_INT,
			           -999 AS EP_SK_SALESREP_ID_INT,   -999 AS  EP_SK_TERRITORY_ID_INT,
			  NRSCA.SCA_SALES_COMMISSION_PCT,    NRSCA.SALES_CREDIT_TYPE_CD,
			  NULL AS EVENT_TYPE,   NRSCA.SALES_REP_NUM  ,   NRSCA.SALES_TERRITORY_KEY   ,
			  Coalesce(SMC.SALES_MOTION_CD, 'UNKNOWN' )     
	FROM	  (
		SELECT	LAST_EXTRACT_DATE 
		FROM	$$ETLVWDB.DW_JOB_STREAMS 
		WHERE	JOB_STREAM_ID ='wf_WI_RTE_NET_CHANGE_FOR_BKG'
		) X,    ( 
		SELECT	BK_FISCAL_MONTH_NUMBER_INT, BK_FISCAL_YEAR_NUMBER_INT    
		FROM	$$COMREFVWDB.N_FISCAL_MONTH     
		WHERE	Current_Date-1 BETWEEN FISCAL_MONTH_START_DATE 
			AND FISCAL_MONTH_END_DATE   ) NFISMN_SYS ,  $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD  
	INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC    
		ON (DRVD.SOURCE_SYSTEM_CODE  = NSSC.SOURCE_SYSTEM_CODE )  
	INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRA  
		ON(NRA.REVENUE_TRANSFER_KEY  =DRVD.REVENUE_TRANSFER_KEY)  
	INNER JOIN $$SLSORDVWDB.N_SCA_FOR_RTE_TRX  NRSCA   
		ON NRSCA.EP_TRANSACTION_ID_INT = NRA.EP_TRANSACTION_ID_INT     
	INNER JOIN $$ETLVWDB.SM_SCA_FOR_RTE_TRX SRSCA  
		ON (SRSCA.SALES_CREDIT_ASSIGNMENT_KEY=NRSCA.SALES_CREDIT_ASSIGNMENT_KEY )  
	INNER JOIN   ( 
		SELECT	BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG   QUOTA_FLAG   
		FROM	$$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV     
		QUALIFY	Row_Number () Over (
		PARTITION BY BK_SALES_CREDIT_TYPE_CODE   
		ORDER BY END_TV_DATE DESC)=1 ) NSCTT   
		ON NRSCA.SALES_CREDIT_TYPE_CD = NSCTT.BK_SALES_CREDIT_TYPE_CODE   
	INNER JOIN $$COMREFVWDB.N_FISCAL_MONTH NFISMN     
		ON  NRSCA.SCA_SOURCE_COMMIT_DTM BETWEEN NFISMN.FISCAL_MONTH_START_DATE 
		AND NFISMN.FISCAL_MONTH_END_DATE   
	LEFT JOIN $$STGDB.WI_AR_SALES_MOTION_CHANGE SMC     
		ON DRVD.DV_SALES_ORDER_LINE_KEY = SMC.SALES_ORDER_LINE_KEY  
	WHERE	  DRVD.SCA_SOURCE_TYPE_CD IN ('X','R')   
		AND (DRVD.FORWARD_REVERSE_CODE   = 'F' 
		OR DRVD.FORWARD_REVERSE_CODE   = 'FORWARD')     
		AND DRVD.LAST_RECORD_FLAG ='Y'          
		AND NRSCA.EDW_UPDATE_DTM > X.LAST_EXTRACT_DATE  
		AND DRVD.REVENUE_TRANSFER_KEY <> -999
	QUALIFY	Rank () Over ( 
	PARTITION BY DRVD.SOURCE_SYSTEM_CODE , DV_TRANSACTION_SOURCE_CD  ,
			DV_TRANSACTION_KEY, NRSCA.EP_TRANSACTION_ID_INT 
	ORDER BY TRANSACTION_SEQUENCE_ID_INT DESC)=1


Post SQL : 



Target2 Name : WI_BKG_TX_SQ_ID_FORWARD1


Pre SQL : 
DELETE FROM $$STGDB.WI_BKG_TX_SQ_ID_FORWARD;


Post SQL : 
COLLECT STATS ON $$STGDB.WI_BKG_TX_SQ_ID_FORWARD;


Source3 Name : SQ_WI_RTE_NET_CHANGE_FOR_BKG


Pre SQL : 



SQL Query : 
SELECT 
   ROW_NUMBER()   OVER( ORDER BY WI.SCA_SOURCE_COMMIT_DTM ) /* + SM_MAX.MAX_TRX_SEQ_ID */ AS TRANSACTION_SEQUENCE_ID_INT, /*transaction_seq_id will be calculated while populating to DRVD table */
  DRVD.SOURCE_SYSTEM_CODE,
  CAST(WI.SCA_SOURCE_COMMIT_DTM AS DATE) AS TRANSACTION_DATE,
  ROW_NUMBER()   OVER( ORDER BY WI.SCA_SOURCE_COMMIT_DTM ) /* + SM_MAX.MAX_TRX_SEQ_ID */ AS SK_PH_TRANSACTION_SEQ_ID_INT,
  DRVD.PD_ACCOUNTING_RULE_NAME       ,
  DRVD.ACCOUNT_CLASS_CODE            ,
  DRVD.GL_DISTRIBUTION_FUNCTIONAL_AMT,
  DRVD.ADJUSTMENT_TYPE_CODE          ,
  DRVD.GL_DISTRIB_TRANSACTIONAL_AMT  ,
  DRVD.CREATED_BY_INT                ,
  DRVD.AR_TRX_LINE_TRANSACTIONAL_AMT ,
  DRVD.EXTRACT_TYPE_CODE             ,
  'R' AS FORWARD_REVERSE_CODE,
  DRVD.GL_DATETIME            ,       
  DRVD.GL_DATE                 ,      
  DRVD.GL_POSTED_DATE           ,     
  'I' AS TRANSACTION_GROUPING_TYPE_CODE,
  DRVD.LAST_UPDATED_BY_INT           ,
  'N' AS LAST_RECORD_FLAG,
  DRVD.LINE_TYPE_CODE           ,     
  DRVD.QUOTA_FLAG,
  DRVD.REBATE_TRANSACTIONAL_AMOUNT   ,
  DRVD.MANUAL_TRANSACTION_FLAG       ,
  DRVD.RULE_START_DATETIME           ,
  WI.SCA_SOURCE_COMMIT_DTM AS TRANSACTION_DATETIME,
  DRVD.TRANSACTION_QUANTITY          ,
  DRVD.AR_TRX_DATETIME               ,
  DRVD.AR_TRX_NUMBER                 ,
  DRVD.AR_TRX_TYPE_CODE              ,
  DRVD.UNIT_SELLING_PRICE_TRX_AMT    ,
  DRVD.UNIT_STANDARD_PRICE_TRX_AMT   ,
  DRVD.PD_SALES_TERRITORY_KEY        ,
  DRVD.PD_SALES_REP_NUMBER           ,
  DRVD.PD_AR_ADJUSTMENT_NUMBER       ,
  DRVD.PD_AR_ADJUSTMENT_COMPANY_CODE ,
  DRVD.PD_AR_ADJ_SET_OF_BOOKS_KEY    ,
  DRVD.PD_FUNCTIONAL_CURRENCY_CODE   ,
  DRVD.PD_INVOICE_CURRENCY_CODE      ,
  DRVD.DV_FISCAL_CALENDAR_CODE       ,
  WI.BK_FISCAL_MONTH_NUMBER_INT AS DV_FISCAL_MONTH_NUMBER_INT ,
  WI.BK_FISCAL_YEAR_NUMBER_INT  AS DV_FISCAL_YEAR_NUMBER_INT ,
  DRVD.REPORTING_MEASURE_TYPE        ,
  DRVD.BK_AR_TRX_LINE_GL_DISTRIB_KEY ,
  CAST(WI.SCA_SOURCE_COMMIT_DTM AS DATE) AS DV_FISCAL_DATE, 
  DRVD.DV_BKGS_ITEM_TYPE_CODE_FLAG   ,
  DRVD.DV_BKGS_INTL_DEMO_FLAG        ,
  DRVD.DV_BKGS_REPL_DEMO_FLAG        ,
  DRVD.DV_BKGS_REVENUE_FLAG          ,
  DRVD.DV_BKGS_OVERLAY_FLAG          ,
  DRVD.DV_BKGS_SALESREP_FLAG         ,
  DRVD.DV_BKGS_IC_REVENUE_FLAG       ,
  DRVD.DV_BKGS_CHARGES_FLAG          ,
  DRVD.DV_BKGS_MISC_FLAG             ,
  DRVD.DV_BKGS_SERVICE_FLAG          ,
  DRVD.DV_BKGS_CORP_BKG_FLAG         ,
  DRVD.DV_BKGS_COMP_US_NET_PRC_AMT   * -1 AS DV_BKGS_COMP_US_NET_PRC_AMT,
  DRVD.DV_BKGS_COMP_US_LST_PRC_AMT   * -1 AS DV_BKGS_COMP_US_LST_PRC_AMT,
  DRVD.DV_BKGS_COMP_US_COST_AMT      * -1 AS DV_BKGS_COMP_US_COST_AMT,
  DRVD.DV_BKGS_EXTENDED_QUANTITY     ,
  DRVD.BK_SCAA_SALES_REP_NUMBER      ,
  DRVD.BK_SCAN_SALES_REP_NUMBER      ,
  DRVD.SALES_COMMISSION_PERCENTAGE   * -1 AS SALES_COMMISSION_PERCENTAGE,
  DRVD.SALES_CHANNEL_CODE            ,
  DRVD.DV_COMP_US_STANDARD_PRICE_AMT ,
  WI.DV_FISCAL_YEAR_MONTH_NUM_INT AS DV_FISCAL_YEAR_MTH_NUMBER_INT,
  DRVD.REPORTED_SALES_ORDER_NUM_INT  ,
  CAST(BPDC.PROCESS_DATE AS DATE) AS PROCESS_DATE ,
  DRVD.AR_TRX_KEY    ,                
  DRVD.AR_TRX_LINE_KEY,               
  DRVD.PRODUCT_KEY     ,              
  DRVD.SALES_ORDER_KEY  ,             
   /*DRVD.SALES_ORDER_LINE_KEY commented by sabanil as a part of RTEQ1FY15*/
  DRVD.DV_SALES_ORDER_LINE_KEY       ,/*RTEQ1FY15*/
  DRVD.SHIP_TO_CUSTOMER_KEY          ,
  DRVD.SOLD_TO_CUSTOMER_KEY          ,
  DRVD.BILL_TO_CUSTOMER_KEY          ,
  DRVD.SALES_CREDIT_TYPE_CODE        ,
  USER,
  USER,
  CURRENT_TIMESTAMP(0),
  CURRENT_TIMESTAMP(0),
  DRVD.CONVERSION_RT   ,              
  DRVD.DV_TRANSACTION_NAME           ,
  DRVD.DEFAULT_SC_FLG                ,
  DRVD.SK_LINE_SEQ_ID_INT            ,
  DRVD.SCA_SOURCE_TYPE_CD            ,
  DRVD.DV_TRANSACTION_SOURCE_CD      ,
  DRVD.DV_TRANSACTION_KEY            ,
   DRVD.TRANSACTION_SEQUENCE_ID_INT AS OLD_TRANSACTION_SEQ_ID,
  'INSERT' AS EVENT_TYPE,
  DRVD.DV_TRX_AMT, 
  DRVD.DV_FUNC_AMT, 
  DRVD.DV_TRX_QTY ,
  DRVD.SALES_MOTION_CD
   FROM $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD
  INNER JOIN $$STGDB.WI_BKG_TX_SQ_ID_RTE WI
   ON  DRVD.TRANSACTION_SEQUENCE_ID_INT = WI.BK_TRANSACTION_SEQ_ID_INT
   AND DRVD.SOURCE_SYSTEM_CODE = WI.BK_SS_CD 
   INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRA
  ON(NRA.REVENUE_TRANSFER_KEY=DRVD.REVENUE_TRANSFER_KEY)
  INNER JOIN $$SLSORDVWDB.N_SCA_FOR_RTE_TRX  NRSCA
    ON NRSCA.EP_TRANSACTION_ID_INT = NRA.EP_TRANSACTION_ID_INT   
  INNER JOIN $$ETLVWDB.SM_SCA_FOR_RTE_TRX SRSCA
  ON (SRSCA.SALES_CREDIT_ASSIGNMENT_KEY=NRSCA.SALES_CREDIT_ASSIGNMENT_KEY )
  INNER JOIN (SELECT PROCESS_DATE FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL) BPDC
   ON 1=1
  QUALIFY ROW_NUMBER () OVER ( PARTITION BY  DRVD.DV_TRANSACTION_SOURCE_CD      , DRVD.DV_TRANSACTION_KEY,   NRSCA.EP_TRANSACTION_ID_INT , DRVD.SK_LINE_SEQ_ID_INT
  ORDER BY WI.BK_TRANSACTION_SEQ_ID_INT DESC)=1


Post SQL : 



Target3 Name : WI_RTE_NET_CHANGE_FOR_BKG2


Pre SQL : 
DELETE FROM $$STGDB.WI_RTE_NET_CHANGE_FOR_BKG;


Post SQL : 



Source4 Name : SQ_WI_RTE_NET_CHANGE_FOR_BKG1


Pre SQL : 



SQL Query : 
SELECT
  ROW_NUMBER()  OVER( ORDER BY WI.SCA_SOURCE_COMMIT_DTM ) /* + SM_MAX.MAX_TRX_SEQ_ID */  AS TRANSACTION_SEQUENCE_ID_INT , 
  DRVD.SOURCE_SYSTEM_CODE,
  CAST(WI.SCA_SOURCE_COMMIT_DTM AS DATE) AS TRANSACTION_DATE,
  ROW_NUMBER()  OVER( ORDER BY WI.SCA_SOURCE_COMMIT_DTM ) /* + SM_MAX.MAX_TRX_SEQ_ID */ AS SK_PH_TRANSACTION_SEQ_ID_INT,
  DRVD.PD_ACCOUNTING_RULE_NAME       ,
  DRVD.ACCOUNT_CLASS_CODE            ,
  DRVD.GL_DISTRIBUTION_FUNCTIONAL_AMT,
  DRVD.ADJUSTMENT_TYPE_CODE          ,
  DRVD.GL_DISTRIB_TRANSACTIONAL_AMT  ,
  DRVD.CREATED_BY_INT                ,
  DRVD.AR_TRX_LINE_TRANSACTIONAL_AMT ,
  DRVD.EXTRACT_TYPE_CODE             ,
  'F' AS FORWARD_REVERSE_CODE,
  DRVD.GL_DATETIME            ,       
  DRVD.GL_DATE  AS GL_DATE                 ,      
  DRVD.GL_POSTED_DATE           ,     
  'I' AS TRANSACTION_GROUPING_TYPE_CODE,
  DRVD.LAST_UPDATED_BY_INT           ,
  'Y' AS LAST_RECORD_FLAG,
  DRVD.LINE_TYPE_CODE     ,           
  WI.QUOTA_FLAG,    
  DRVD.REBATE_TRANSACTIONAL_AMOUNT   ,
  DRVD.MANUAL_TRANSACTION_FLAG       ,
  DRVD.RULE_START_DATETIME           ,
  WI.SCA_SOURCE_COMMIT_DTM AS TRANSACTION_DATETIME,
  DRVD.TRANSACTION_QUANTITY          ,
  DRVD.AR_TRX_DATETIME               ,
  DRVD.AR_TRX_NUMBER                 ,
  DRVD.AR_TRX_TYPE_CODE              ,
  DRVD.UNIT_SELLING_PRICE_TRX_AMT    ,
  DRVD.UNIT_STANDARD_PRICE_TRX_AMT   ,
  WI.SALES_TERRITORY_KEY AS PD_SALES_TERRITORY_KEY,  
  WI.SALES_REP_NUMBER AS PD_SALES_REP_NUMBER,  
  DRVD.PD_AR_ADJUSTMENT_NUMBER       ,
  DRVD.PD_AR_ADJUSTMENT_COMPANY_CODE ,
  DRVD.PD_AR_ADJ_SET_OF_BOOKS_KEY    ,
  DRVD.PD_FUNCTIONAL_CURRENCY_CODE   ,
  DRVD.PD_INVOICE_CURRENCY_CODE      ,
  DRVD.DV_FISCAL_CALENDAR_CODE       ,
  WI.BK_FISCAL_MONTH_NUMBER_INT AS DV_FISCAL_MONTH_NUMBER_INT ,
  WI.BK_FISCAL_YEAR_NUMBER_INT  AS DV_FISCAL_YEAR_NUMBER_INT ,
  DRVD.REPORTING_MEASURE_TYPE        ,
  DRVD.BK_AR_TRX_LINE_GL_DISTRIB_KEY ,
  CAST(WI.SCA_SOURCE_COMMIT_DTM AS DATE) AS DV_FISCAL_DATE, 
  DRVD.DV_BKGS_ITEM_TYPE_CODE_FLAG   ,
  DRVD.DV_BKGS_INTL_DEMO_FLAG        ,
  DRVD.DV_BKGS_REPL_DEMO_FLAG        ,
  DRVD.DV_BKGS_REVENUE_FLAG          ,
  CASE WHEN (WI.EP_SK_TERRITORY_ID_INT IS NULL OR WI.EP_SK_TERRITORY_ID_INT = -999) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG,
  CASE WHEN WI.EP_SK_SALESREP_ID_INT = -999 THEN 'Y'ELSE 'N' END DV_BKGS_SALESREP_FLAG ,
  DRVD.DV_BKGS_IC_REVENUE_FLAG       ,
  DRVD.DV_BKGS_CHARGES_FLAG          ,
  DRVD.DV_BKGS_MISC_FLAG             ,
  DRVD.DV_BKGS_SERVICE_FLAG          ,
  CASE WHEN DRVD.SOLD_TO_CUSTOMER_KEY=-999
     THEN (
       CASE WHEN  ( NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL    
           OR NCA1.ERP_CUSTOMER_TYPE_CODE<>'I'  
             )  
           AND DRVD.DV_BKGS_INTL_DEMO_FLAG='N' 
           AND DRVD.DV_BKGS_REPL_DEMO_FLAG='N' 
           AND DRVD.DV_BKGS_REVENUE_FLAG='Y' 
           AND DRVD.DV_BKGS_CHARGES_FLAG='N' 
           AND (CASE WHEN (WI.EP_SK_TERRITORY_ID_INT IS NULL OR WI.EP_SK_TERRITORY_ID_INT = -999) THEN 'Y' ELSE 'N' END )='N'   
           AND DRVD.DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
           AND DRVD.DV_BKGS_MISC_FLAG='N' 
           AND (CASE WHEN WI.EP_SK_SALESREP_ID_INT = -999 THEN 'Y'ELSE 'N' END )='N'  
         THEN 'Y' 
        ELSE 'N' 
       END
      )
    ELSE 
    ( CASE WHEN  (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL  
         OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')   
         AND DRVD.DV_BKGS_INTL_DEMO_FLAG='N' 
         AND DRVD.DV_BKGS_REPL_DEMO_FLAG='N' 
         AND DRVD.DV_BKGS_REVENUE_FLAG='Y' 
         AND DRVD.DV_BKGS_CHARGES_FLAG='N' 
         AND (CASE WHEN (WI.EP_SK_TERRITORY_ID_INT IS NULL OR WI.EP_SK_TERRITORY_ID_INT = -999) THEN 'Y' ELSE 'N' END )='N' 
         AND DRVD.DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
         AND DRVD.DV_BKGS_MISC_FLAG='N' 
         AND (CASE WHEN WI.EP_SK_SALESREP_ID_INT = -999 THEN 'Y'ELSE 'N' END )='N' 
       THEN 'Y' 
      ELSE 'N' 
     END 
    ) 
  END DV_BKGS_CORP_BKG_FLAG,
  
  CASE WHEN COALESCE(DRVD.SALES_COMMISSION_PERCENTAGE,100) =0 THEN DRVD.DV_BKGS_COMP_US_NET_PRC_AMT
   ELSE DRVD.DV_BKGS_COMP_US_NET_PRC_AMT  * (  WI.SCA_SALES_COMMISSION_PCT/ COALESCE(DRVD.SALES_COMMISSION_PERCENTAGE,100))    
  END AS DV_BKGS_COMP_US_NET_PRC_AMT,
  
  CASE WHEN COALESCE(DRVD.SALES_COMMISSION_PERCENTAGE,100) =0 THEN DRVD.DV_BKGS_COMP_US_LST_PRC_AMT
   ELSE DRVD.DV_BKGS_COMP_US_LST_PRC_AMT  * (  WI.SCA_SALES_COMMISSION_PCT/ COALESCE(DRVD.SALES_COMMISSION_PERCENTAGE,100))    
  END AS DV_BKGS_COMP_US_LST_PRC_AMT,
  
  CASE WHEN COALESCE(DRVD.SALES_COMMISSION_PERCENTAGE,100) =0 THEN DRVD.DV_BKGS_COMP_US_COST_AMT
   ELSE DRVD.DV_BKGS_COMP_US_COST_AMT  * (  WI.SCA_SALES_COMMISSION_PCT/ COALESCE(DRVD.SALES_COMMISSION_PERCENTAGE,100))    
  END AS DV_BKGS_COMP_US_COST_AMT,
  
  DRVD.DV_BKGS_EXTENDED_QUANTITY     ,
  
  CASE WHEN DRVD.DV_SALES_ORDER_LINE_KEY /*RTEQ1FY15:replaced sales_order_line_key with dv_sales_order_line_key*/
  IN (-9999,-8888, -7777) THEN 'UNKNOWN' ELSE WI.SALES_REP_NUMBER  END AS BK_SCAA_SALES_REP_NUMBER,   
  CASE WHEN DRVD.DV_SALES_ORDER_LINE_KEY /*RTEQ1FY15:replaced sales_order_line_key with dv_sales_order_line_key*/
  IN (-9999,-8888, -7777) THEN WI.SALES_REP_NUMBER ELSE 'UNKNOWN' END BK_SCAN_SALES_REP_NUMBER,       
  WI.SCA_SALES_COMMISSION_PCT AS SALES_COMMISSION_PERCENTAGE,
  DRVD.SALES_CHANNEL_CODE            ,
  DRVD.DV_COMP_US_STANDARD_PRICE_AMT ,
  WI.DV_FISCAL_YEAR_MONTH_NUM_INT AS DV_FISCAL_YEAR_MTH_NUMBER_INT,
  DRVD.REPORTED_SALES_ORDER_NUM_INT  ,
  BPDC.PROCESS_DATE ,
  DRVD.AR_TRX_KEY    ,                
  DRVD.AR_TRX_LINE_KEY,               
  DRVD.PRODUCT_KEY     ,              
  DRVD.SALES_ORDER_KEY  ,  
  /*DRVD.SALES_ORDER_LINE_KEY commented by sabanil as a part of RTEQ1FY15*/
  DRVD.DV_SALES_ORDER_LINE_KEY       ,/*RTEQ1FY15*/
  DRVD.SHIP_TO_CUSTOMER_KEY          ,
  DRVD.SOLD_TO_CUSTOMER_KEY          ,
  DRVD.BILL_TO_CUSTOMER_KEY          ,
  WI.BK_SALES_CREDIT_TYPE_CODE AS SALES_CREDIT_TYPE_CODE  ,   
  USER,
  USER,
  CURRENT_TIMESTAMP(0),
  CURRENT_TIMESTAMP(0),
  DRVD.CONVERSION_RT   ,              
  DRVD.DV_TRANSACTION_NAME           ,
  '=' AS DEFAULT_SC_FLG,
  WI.SK_LINE_SEQ_ID_INT AS SK_LINE_SEQ_ID_INT,
  WI.SCA_SOURCE_TYPE_CD AS SCA_SOURCE_TYPE_CD,
  DRVD.DV_TRANSACTION_SOURCE_CD      ,
  DRVD.DV_TRANSACTION_KEY            ,
   DRVD.TRANSACTION_SEQUENCE_ID_INT AS OLD_TRANSACTION_SEQ_ID,
  'INSERT' AS EVENT_TYPE ,
  DRVD.DV_TRX_AMT, 
  DRVD.DV_FUNC_AMT, 
  DRVD.DV_TRX_QTY ,
  WI.SALES_MOTION_CD  
  FROM $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
   ON (DRVD.SOURCE_SYSTEM_CODE  = NSSC.SOURCE_SYSTEM_CODE) 
  INNER JOIN $$STGDB.WI_BKG_TX_SQ_ID_FORWARD WI
   ON    DRVD.TRANSACTION_SEQUENCE_ID_INT    = WI.BK_TRANSACTION_SEQ_ID_INT  
   AND DRVD.SOURCE_SYSTEM_CODE = WI.BK_SS_CD
  INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRA
  ON(NRA.REVENUE_TRANSFER_KEY=DRVD.REVENUE_TRANSFER_KEY)
  INNER JOIN $$SLSORDVWDB.N_SCA_FOR_RTE_TRX  NRSCA
  ON  NRSCA.SK_LINE_SEQ_ID_INT=WI.SK_LINE_SEQ_ID_INT 
 
   INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX
   ON (DRVD.AR_TRX_KEY = NARTRX.AR_TRX_KEY) 
  INNER JOIN $$COMREFVWDB.N_ERP_CUST_ACCT_LOC_USE NECAL  
   ON (NECAL.ERP_CUST_ACCOUNT_LOCATION_KEY = NARTRX.BILL_TO_CUSTOMER_KEY)  
  INNER JOIN  $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA1  
   ON (NCA1.CUSTOMER_ACCOUNT_KEY = NECAL.CUSTOMER_ACCOUNT_KEY)  
  INNER JOIN $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA 
   ON (NCA.CUSTOMER_ACCOUNT_KEY = NARTRX.SOLD_TO_CUSTOMER_KEY)
   INNER JOIN (SELECT PROCESS_DATE FROM  $$ETLVWDB.BKG_PROCESS_DT_CNTRL ) BPDC 
  ON 1=1


Post SQL : 



Target4 Name : WI_RTE_NET_CHANGE_FOR_BKG3


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_RTE_NET_CHANGE_FOR_BKG;