ETL Name:	wf_WI_DRVD_NCR_REV_FOR_BKG_RT.XML


Session 1: 	s_m_WI_DRVD_NCR_REV_FOR_BKG_RT
Mapping 1: 	m_WI_DRVD_NCR_REV_FOR_BKG_RTm_WI_DRVD_NCR_REV_FOR_BKG_RT


Source1 Name : SQ_WI_DRVD_NCR_REV_BKG_RT


Pre SQL : 



SQL Query : 
SELECT 
WIDRVD.BATCH_ID                      ,
WIDRVD.ACCOUNTING_RULE_ID            ,
WIDRVD.ACCOUNTING_RULE_NAME          ,
WIDRVD.ACCOUNT_CLASS                 ,
WIDRVD.ACCOUNT_CODE                  ,
WIDRVD.ACCTD_AMOUNT                  ,
WIDRVD.ADJUSTMENT_ID                 ,
WIDRVD.ADJUSTMENT_NUMBER             ,
WIDRVD.ADJUSTMENT_TYPE               ,
WIDRVD.AMOUNT                        ,
WIDRVD.BILL_TO_CUSTOMER_ID           ,
WIDRVD.BILL_TO_SITE_USE_ID           ,
WIDRVD.CODE_COMBINATION_ID           ,
WIDRVD.COGS_PERCENT                  ,
WIDRVD.COMMENTS                      ,
WIDRVD.CONTEXT                       ,
WIDRVD.CREATED_BY                    ,
WIDRVD.CREATION_DATE                 ,
WIDRVD.CUSTOMER_TRX_ID               ,
WIDRVD.CUSTOMER_TRX_LINE_ID          ,
WIDRVD.CUST_TRX_LINE_GL_DIST_ID      ,
WIDRVD.DEFAULT_SC_FLAG               ,
WIDRVD.EXTENDED_AMOUNT               ,
WIDRVD.EXTRACT_TYPE                  ,
WIDRVD.FISCAL_ID                     ,
WIDRVD.FORWARD_REVERSE_FLAG          ,
WIDRVD.FUNC_CURRENCY_CODE            ,
WIDRVD.GES_UPDATE_DATE               ,
WIDRVD.GLOBAL_NAME                   ,
WIDRVD.GL_DATE                       ,
WIDRVD.GL_POSTED_DATE                ,
WIDRVD.GROUPING_ID                   ,
WIDRVD.INVENTORY_ITEM_ID             ,
WIDRVD.INVOICE_CURRENCY_CODE         ,
WIDRVD.INVOICE_PERCENT               ,
WIDRVD.INVOICING_RULE_ID             ,
WIDRVD.LAST_UPDATED_BY               ,
WIDRVD.LAST_UPDATE_DATE              ,
WIDRVD.LATEST_RECORD_FLAG            ,
WIDRVD.SK_LINE_SEQ_ID_INT            ,
WIDRVD.LINE_TYPE                     ,
WIDRVD.LINK_TO_CUST_TRX_LINE_ID      ,
WIDRVD.ORDER_HEADER_ID               ,
WIDRVD.ORDER_LINE_ID                 ,
WIDRVD.ORDER_NUMBER                  ,
WIDRVD.ORG_ID                        ,
WIDRVD.LINE_PERCENT                  ,
WIDRVD.PREVIOUS_CUSTOMER_TRX_ID      ,
WIDRVD.PREVIOUS_CUSTOMER_TRX_LINE_ID ,
WIDRVD.QUOTA_FLAG                    ,
WIDRVD.REASON_CODE                   ,
WIDRVD.REBATE_AMOUNT                 ,
WIDRVD.REBATE_PERCENTAGE_ID          ,
WIDRVD.REQUEST_ID                    ,
WIDRVD.RULE_START_DATE               ,
WIDRVD.SALESREP_ID                   ,
WIDRVD.SALES_CREDIT_TYPE_ID          ,
WIDRVD.SHIP_TO_CUSTOMER_ID           ,
WIDRVD.SHIP_TO_SITE_USE_ID           ,
WIDRVD.SOLD_TO_CUSTOMER_ID           ,
WIDRVD.SCA_SOURCE_TYPE_CD            ,
WIDRVD.SPLIT_PERCENT                 ,
WIDRVD.TERRITORY_ID                  ,
WIDRVD.TRANSACTION_DATE              ,
WIDRVD.TRANSACTION_GROUPING_TYPE     ,
WIDRVD.TRANSACTION_QUANTITY          ,
WIDRVD.TRANSACTION_SEQUENCE_ID       ,
WIDRVD.TRX_DATE                      ,
WIDRVD.TRX_NAME                      ,
WIDRVD.TRX_NUMBER                    ,
WIDRVD.TRX_TYPE                      ,
WIDRVD.UNIT_SELLING_PRICE            ,
WIDRVD.UNIT_STANDARD_PRICE           ,
WIDRVD.CREATE_DATETIME               ,
WIDRVD.ACTION_CODE                   ,
WIDRVD.DV_TRANSACTION_KEY            ,
WIDRVD.DV_TRANSACTION_SOURCE_CD      ,
WIDRVD.BK_SALES_CREDIT_TYPE_CODE     ,
WIDRVD.SALES_REP_NUMBER              ,
WIDRVD.SALES_TERRITORY_KEY           ,
COALESCE( SMC.SALES_MOTION_CD, 'UNKNOWN' ) SALES_MOTION_CD
 FROM
$$STGDB.WI_DRVD_NCR_REV_TRX_RT  WIDRVD
LEFT OUTER JOIN $$STGDB.WI_AR_SALES_MOTION_CHANGE SMC
ON WIDRVD.ORDER_LINE_ID = SMC.SK_SO_LINE_ID_INT
 WHERE WIDRVD.EXTRACT_TYPE='INV'


Post SQL : 



Target1 Name : WI_DRVD_NCR_REV_BKG_RT1


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REV_BKG_RT ALL;


Post SQL : 



Source2 Name : SQ_WI_DRVD_NCR_REV_BKG_RT_net_change


Pre SQL : 



SQL Query : 
SELECT
  2         AS BATCH_ID ,
  COALESCE(SORA.RULE_ID,-999)        AS ACCOUNTING_RULE_ID ,
  WI_NET.PD_ACCOUNTING_RULE_NAME      AS ACCOUNTING_RULE_NAME ,
  WI_NET.ACCOUNT_CLASS_CODE           AS ACCOUNT_CLASS ,
  NULL        AS ACCOUNT_CODE ,
  WI_NET.DV_FUNC_AMT     AS ACCTD_AMOUNT ,
  -9999        AS ADJUSTMENT_ID ,
  NULL        AS ADJUSTMENT_NUMBER ,
  NULL        AS ADJUSTMENT_TYPE ,
  WI_NET.DV_TRX_AMT     AS AMOUNT ,
  -999        AS BILL_TO_CUSTOMER_ID ,
  -999        AS BILL_TO_SITE_USE_ID ,
  NULL        AS CODE_COMBINATION_ID ,
  NULL        AS COGS_PERCENT ,
  NULL        AS COMMENTS ,
  NULL        AS CONTEXT ,
  2         AS CREATED_BY ,
  WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE ,
  COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)  AS CUSTOMER_TRX_ID ,
  COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT ,-9999) AS CUSTOMER_TRX_LINE_ID ,
  -9999 AS CUST_TRX_LINE_GL_DIST_ID ,
  WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
  NULL        AS EXTENDED_AMOUNT ,
  CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'RTE_REV' THEN 'REV'  
  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'RTE_INV' THEN 'INV' END         
  AS  EXTRACT_TYPE ,
  (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
  WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
  WI_NET.PD_FUNCTIONAL_CURRENCY_CODE AS  FUNC_CURRENCY_CODE ,
  current_timestamp(0)   AS GES_UPDATE_DATE ,
  NSSC.GLOBAL_NAME             AS GLOBAL_NAME ,
  WI_NET.GL_DATETIME                    AS GL_DATE ,
  WI_NET.GL_POSTED_DATE                 AS GL_POSTED_DATE ,
  NULL         AS GROUPING_ID ,
  NP.SK_INVENTORY_ITEM_ID_INT    AS INVENTORY_ITEM_ID ,
  WI_NET.PD_INVOICE_CURRENCY_CODE AS INVOICE_CURRENCY_CODE,
 /* NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,*/
  NULL         AS INVOICE_PERCENT ,
  NULL         AS INVOICING_RULE_ID ,
  2          AS LAST_UPDATED_BY ,
  current_timestamp(0)     AS LAST_UPDATE_DATE ,
  WI_NET.LAST_RECORD_FLAG               AS LATEST_RECORD_FLAG ,
  WI_NET.SK_LINE_SEQ_ID_INT             AS SK_LINE_SEQ_ID_INT ,
  WI_NET.LINE_TYPE_CODE AS LINE_TYPE, 
  NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
  COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999)   AS ORDER_HEADER_ID ,
  CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END       AS ORDER_LINE_ID ,
  NSO.BK_SO_NUMBER_INT        AS ORDER_NUMBER ,
  EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
  NULL         AS LINE_PERCENT ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
  NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG  AS QUOTA_FLAG,
  NULL         AS REASON_CODE ,
  NULL         AS REBATE_AMOUNT ,
  NULL         AS REBATE_PERCENTAGE_ID ,
  CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999   ELSE 999 END  AS REQUEST_ID ,
  WI_NET.RULE_START_DATETIME            AS RULE_START_DATE ,
  /*CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999) ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999) END as    SALESREP_ID,*/
  
  CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN -999
   ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999) END as    SALESREP_ID,
  
  /*CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999) ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) END as    SALES_CREDIT_TYPE_ID,*/
  
  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN -999
  ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) END as    SALES_CREDIT_TYPE_ID,
  
  NULL         AS SHIP_TO_CUSTOMER_ID ,
  -999         AS SHIP_TO_SITE_USE_ID ,
  -999         AS SOLD_TO_CUSTOMER_ID ,
  WI_NET.SCA_SOURCE_TYPE_CD             AS SCA_SOURCE_TYPE_CD ,
  WI_NET.SALES_COMMISSION_PERCENTAGE    AS SPLIT_PERCENT ,
 /* CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999) ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) END as TERRITORY_ID ,*/
 
 CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN -999
 ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) END as TERRITORY_ID ,
 
  /* Commented as per SME confirmation as it was causing Transaction_date to come as 03/08/2014 for reversal records
  WRSNT.SCA_SOURCE_COMMIT_DTM   AS TRANSACTION_DATE , */
  current_timestamp(0) AS TRANSACTION_DATE   ,
  WI_NET.TRANSACTION_GROUPING_TYPE_CODE AS TRANSACTION_GROUPING_TYPE ,
  WI_NET.DV_TRX_QTY AS  TRANSACTION_QUANTITY ,
  ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM)  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
  NAT.AR_TRX_DATETIME    AS TRX_DATE ,
  NULL       AS TRX_NAME ,
  NAT.BK_AR_TRX_NUMBER   AS TRX_NUMBER ,
  /*NATT.AR_TRX_TYPE_SHORT_CODE  AS TRX_TYPE ,*/
  NULL AS TRX_TYPE,
  NULL       AS UNIT_SELLING_PRICE ,
  NULL       AS UNIT_STANDARD_PRICE ,
  current_timestamp(0)   AS CREATE_DATETIME ,
  'I'        AS ACTION_CODE ,
  WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
  WI_NET.DV_TRANSACTION_KEY       AS DV_TRANSACTION_KEY ,
   WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
  WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
  WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE,
  WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD
  FROM $$STGDB.WI_RTE_NET_CHANGE_FOR_BKG WI_NET
  
  INNER JOIN 
   ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
  (
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_RTE_NET_CHANGE_FOR_BKG WI_DRVD
    union all   
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
    UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
    union all
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
	/* CSPP VIP Changes */
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
    
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
  /*ADDED FOR RT*/
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT         FROM $$STGDB.WI_DRVD_NCR_REV_TRX_RT /*rev&inv trx*/  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT         FROM $$STGDB.WI_DRVD_NCR_REV_BKG_RT /*inv trxs already populated in the 1st flow*/  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_RT /* check if this is really needed */
     UNION ALL 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RTE /* revenue trxs in the parallel ETL */
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)  AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_RT /* revenue exception */
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT         FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT  
    UNION ALL   /* Added as part of Accruals Q2FY19 */ 
     SELECT MAX(BK_TRANSACTION_SEQ_ID_INT) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHG_REV_ACRL_XAAS 
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG
  UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
	 UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_CG /*CARBT*/
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_SWSS_CG /*SWSS CHANGES*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_SWSS_CG /*SWSS CHANGES*/ 
   ) TMP
   ) SM_MAX
  ON 1=1
  
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
   ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
  
  INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
   ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
   AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME
  
  INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRA
  ON WI_NET.DV_TRANSACTION_KEY=NRA.REVENUE_TRANSFER_KEY
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
  
  INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY    
  
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
   ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
   ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY
  
  INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
   ON CAST(NRA.BK_COMPANY_CD AS INTEGER)= EOUGC.BK_COMPANY_CODE              
   AND NRA.SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY 
   
   /*INNER JOIN $$SLSORDVWDB.N_SCA_FOR_RTE_TRX WRSNT
   ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT  */
 
   INNER JOIN 
    (SELECT SK_LINE_SEQ_ID_INT, SCA_SOURCE_COMMIT_DTM
    FROM $$SLSORDVWDB.N_SCA_FOR_RTE_TRX_TV
    QUALIFY ROW_NUMBER() OVER(PARTITION BY SK_LINE_SEQ_ID_INT ORDER BY SCA_SOURCE_COMMIT_DTM  DESC)=1)  WRSNT
  ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT    
   
  LEFT OUTER JOIN 
  ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
   FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
   QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
  ) NSCTT
   ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
   
   /*
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT             
   ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
   AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
   AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
   */
  left outer join 
                  (   select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                      from  $$ETLVWDB.EL_SALES_REP
                      qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                  ) ESR_REVERSE
                  on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
  
  left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                  on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                  
  left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                  on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                  AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME            
/* WHERE NRA.TRANSACTION_SOURCE_CD = 'ERP' COMMENTED AS PART OF XAAS SC RTE LOGIC Q1FY18*/


Post SQL : 



Target2 Name : WI_DRVD_NCR_REV_BKG_RT11


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REV_BKG_RT;


Source3 Name : SQ_WI_OM_XXNCR_REV_RT


Pre SQL : 
DELETE FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT EXORT
WHERE EXISTS ( SELECT 1 FROM $$STGDB.WI_DRVD_NCR_REV_BKG_RT WI
                                WHERE WI.DV_TRANSACTION_KEY=EXORT.DV_TRANSACTION_KEY AND WI.DV_TRANSACTION_SOURCE_CD=EXORT.DV_TRANSACTION_SOURCE_CD AND EXORT.FISCAL_ID=WI.FISCAL_ID) ;
								
					
DELETE FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT EXORT
WHERE EXISTS ( SELECT 1 FROM $$STGDB.WI_DRVD_NCR_REV_BKG_RT WI 
                                WHERE WI.DV_TRANSACTION_KEY=EXORT.DV_TRANSACTION_KEY AND WI.DV_TRANSACTION_SOURCE_CD=EXORT.DV_TRANSACTION_SOURCE_CD) ;


SQL Query : 
SELECT 
 STOXRT.BATCH_ID,
 STOXRT.ACCOUNTING_RULE_ID,
 STOXRT.ACCOUNTING_RULE_NAME,
 STOXRT.ACCOUNT_CLASS,
 STOXRT.ACCOUNT_CODE,
 STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,
 STOXRT.AMOUNT,
 STOXRT.BILL_TO_CUSTOMER_ID,
 STOXRT.BILL_TO_SITE_USE_ID,
 STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,
 STOXRT.COMMENTS,
 STOXRT.CONTEXT,
 STOXRT.CREATED_BY,
 STOXRT.CREATION_DATE,
 STOXRT.CUSTOMER_TRX_ID,
 STOXRT.CUSTOMER_TRX_LINE_ID,
 STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,
 STOXRT.FISCAL_ID,
 STOXRT.FORWARD_REVERSE_FLAG,
 STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,
 STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,
 STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,
 STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,
 STOXRT.INVOICE_PERCENT,
 STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,
 STOXRT.SK_LINE_SEQ_ID_INT,
 STOXRT.LINE_TYPE,
 STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,
 STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,
 STOXRT.LINE_PERCENT,
 STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,
 STOXRT.REBATE_PERCENTAGE_ID,
 STOXRT.REQUEST_ID,
 STOXRT.RULE_START_DATE,
 STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,
 STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,
 STOXRT.SCA_SOURCE_TYPE_CD,
 STOXRT.SPLIT_PERCENT,
 STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,
 STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,
 STOXRT.TRANSACTION_SEQUENCE_ID,
 STOXRT.TRX_DATE,
 STOXRT.TRX_NAME,
 STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,
 STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,
 STOXRT.ACTION_CODE,
 STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD,
  STOXRT.BK_SALES_CREDIT_TYPE_CODE  ,
 STOXRT.SALES_REP_NUMBER              ,
 STOXRT.SALES_TERRITORY_KEY           ,
 STOXRT.SALES_MOTION_CD 
  FROM 
  $$STGDB.WI_DRVD_NCR_REV_BKG_RT STOXRT 
 LEFT OUTER JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA  
  ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE) 
 INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
  ON (SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME
  AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID)
 WHERE 
  STOXRT.EXTRACT_TYPE = 'INV'
  AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
  AND 
 (
  EBGA.ACCOUNT_CODE IS NOT NULL   
  OR STOXRT.BATCH_ID = 2
 )
 
 UNION ALL
 SELECT 
 STOXRT.BATCH_ID,
 STOXRT.ACCOUNTING_RULE_ID,
 STOXRT.ACCOUNTING_RULE_NAME,
 STOXRT.ACCOUNT_CLASS,
 STOXRT.ACCOUNT_CODE,
 STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,
 STOXRT.AMOUNT,
 STOXRT.BILL_TO_CUSTOMER_ID,
 STOXRT.BILL_TO_SITE_USE_ID,
 STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,
 STOXRT.COMMENTS,
 STOXRT.CONTEXT,
 STOXRT.CREATED_BY,
 STOXRT.CREATION_DATE,
 STOXRT.CUSTOMER_TRX_ID,
 STOXRT.CUSTOMER_TRX_LINE_ID,
 STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,
 STOXRT.FISCAL_ID,
 STOXRT.FORWARD_REVERSE_FLAG,
 STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,
 STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,
 STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,
 STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,
 STOXRT.INVOICE_PERCENT,
 STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,
 STOXRT.SK_LINE_SEQ_ID_INT AS LINE_SEQ_ID,
 STOXRT.LINE_TYPE,
 STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,
 STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,
 STOXRT.LINE_PERCENT,
 STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,
 STOXRT.REBATE_PERCENTAGE_ID,
 STOXRT.REQUEST_ID,
 STOXRT.RULE_START_DATE,
 STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,
 STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,
 STOXRT.SCA_SOURCE_TYPE_CD AS SOURCE_TYPE,
 STOXRT.SPLIT_PERCENT,
 STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,
 STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,
 STOXRT.TRANSACTION_SEQUENCE_ID,
 STOXRT.TRX_DATE,
 STOXRT.TRX_NAME,
 STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,
 STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,
 STOXRT.ACTION_CODE,
 STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD,
 STOXRT.BK_SALES_CREDIT_TYPE_CODE    ,
 STOXRT.SALES_REP_NUMBER              ,
 STOXRT.SALES_TERRITORY_KEY           ,
 STOXRT.SALES_MOTION_CD
 FROM 
  $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT STOXRT
 LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
  ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
 INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
  ON (SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME
  AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID)
  WHERE 
 STOXRT.EXTRACT_TYPE = 'INV'
  AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND 
 (
  EBGA.ACCOUNT_CODE IS NOT NULL   
  OR STOXRT.BATCH_ID = 2
 ) 
 AND NOT EXISTS ( SELECT 1 FROM $$STGDB.WI_DRVD_NCR_REV_BKG_RT WI 
                                WHERE WI.DV_TRANSACTION_KEY=STOXRT.DV_TRANSACTION_KEY)
 AND STOXRT.EXCEPTION_TYPE = 'RI'               
 
 UNION ALL
 SELECT 
 EXORT.BATCH_ID,
 EXORT.ACCOUNTING_RULE_ID,
 EXORT.ACCOUNTING_RULE_NAME,
 EXORT.ACCOUNT_CLASS,
 EXORT.ACCOUNT_CODE,
 EXORT.ACCTD_AMOUNT,
 EXORT.ADJUSTMENT_ID,
 EXORT.ADJUSTMENT_NUMBER,
 EXORT.ADJUSTMENT_TYPE,
 EXORT.AMOUNT,
 EXORT.BILL_TO_CUSTOMER_ID,
 EXORT.BILL_TO_SITE_USE_ID,
 EXORT.CODE_COMBINATION_ID,
 EXORT.COGS_PERCENT,
 EXORT.COMMENTS,
 EXORT.CONTEXT,
 EXORT.CREATED_BY,
 EXORT.CREATION_DATE,
 EXORT.CUSTOMER_TRX_ID,
 EXORT.CUSTOMER_TRX_LINE_ID,
 EXORT.CUST_TRX_LINE_GL_DIST_ID,
 EXORT.DEFAULT_SC_FLAG,
 EXORT.EXTENDED_AMOUNT,
 EXORT.EXTRACT_TYPE,
 EXORT.FISCAL_ID,
 EXORT.FORWARD_REVERSE_FLAG,
 EXORT.FUNC_CURRENCY_CODE,
 EXORT.GES_UPDATE_DATE,
 EXORT.GLOBAL_NAME,
 EXORT.GL_DATE,
 EXORT.GL_POSTED_DATE,
 EXORT.GROUPING_ID,
 EXORT.INVENTORY_ITEM_ID,
 EXORT.INVOICE_CURRENCY_CODE,
 EXORT.INVOICE_PERCENT,
 EXORT.INVOICING_RULE_ID,
 EXORT.LAST_UPDATED_BY,
 EXORT.LAST_UPDATE_DATE,
 EXORT.LATEST_RECORD_FLAG,
 EXORT.SK_LINE_SEQ_ID_INT,
 EXORT.LINE_TYPE,
 EXORT.LINK_TO_CUST_TRX_LINE_ID,
 EXORT.ORDER_HEADER_ID,
 EXORT.ORDER_LINE_ID,
 EXORT.ORDER_NUMBER,
 EXORT.ORG_ID,
 EXORT.LINE_PERCENT,
 EXORT.PREVIOUS_CUSTOMER_TRX_ID,
 EXORT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 EXORT.QUOTA_FLAG,
 EXORT.REASON_CODE,
 EXORT.REBATE_AMOUNT,
 EXORT.REBATE_PERCENTAGE_ID,
 EXORT.REQUEST_ID,
 EXORT.RULE_START_DATE,
 EXORT.SALESREP_ID,
 EXORT.SALES_CREDIT_TYPE_ID,
 EXORT.SHIP_TO_CUSTOMER_ID,
 EXORT.SHIP_TO_SITE_USE_ID,
 EXORT.SOLD_TO_CUSTOMER_ID,
 EXORT.SCA_SOURCE_TYPE_CD,
 EXORT.SPLIT_PERCENT,
 EXORT.TERRITORY_ID,
 EXORT.TRANSACTION_DATE,
 EXORT.TRANSACTION_GROUPING_TYPE,
 EXORT.TRANSACTION_QUANTITY,
 EXORT.TRANSACTION_SEQUENCE_ID,
 EXORT.TRX_DATE,
 EXORT.TRX_NAME,
 EXORT.TRX_NUMBER,
 EXORT.TRX_TYPE,
 EXORT.UNIT_SELLING_PRICE,
 EXORT.UNIT_STANDARD_PRICE,
 EXORT.CREATE_DATETIME,
 EXORT.ACTION_CODE,
 EXORT.DV_TRANSACTION_KEY,
 EXORT.DV_TRANSACTION_SOURCE_CD,
 EXORT.BK_SALES_CREDIT_TYPE_CODE,     
 EXORT.SALES_REP_NUMBER              ,
 EXORT.SALES_TERRITORY_KEY           ,
 EXORT.SALES_MOTION_CD
 FROM 
 $$EXCEPDB.EX_OM_XXNCR_REV_RT EXORT 
 WHERE 
 NOT EXISTS ( SELECT 1 FROM $$STGDB.WI_DRVD_NCR_REV_BKG_RT WI 
                                WHERE WI.DV_TRANSACTION_KEY=EXORT.DV_TRANSACTION_KEY)
  AND EXCEPTION_TYPE='RI'


Post SQL : 



Target3 Name : WI_OM_XXNCR_REV_RT1


Pre SQL : 
DELETE FROM $$STGDB.WI_OM_XXNCR_REV_RT ALL;


Post SQL : 
COLLECT STATS ON $$STGDB.WI_OM_XXNCR_REV_RT;


Source4 Name : SQ_EX_WI_OM_XXNCR_REV_RT


Pre SQL : 



SQL Query : 
SELECT 
 STOXRT.BATCH_ID,
 STOXRT.ACCOUNTING_RULE_ID,
 STOXRT.ACCOUNTING_RULE_NAME,
 STOXRT.ACCOUNT_CLASS,
 STOXRT.ACCOUNT_CODE,
 STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,
 STOXRT.AMOUNT,
 STOXRT.BILL_TO_CUSTOMER_ID,
 STOXRT.BILL_TO_SITE_USE_ID,
 STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,
 STOXRT.COMMENTS,
 STOXRT.CONTEXT,
 STOXRT.CREATED_BY,
 STOXRT.CREATION_DATE,
 STOXRT.CUSTOMER_TRX_ID,
 STOXRT.CUSTOMER_TRX_LINE_ID,
 STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,
 STOXRT.FISCAL_ID,
 STOXRT.FORWARD_REVERSE_FLAG,
 STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,
 STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,
 STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,
 STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,
 STOXRT.INVOICE_PERCENT,
 STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,
 STOXRT.SK_LINE_SEQ_ID_INT,
 STOXRT.LINE_TYPE,
 STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,
 STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,
 STOXRT.LINE_PERCENT,
 STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,
 STOXRT.REBATE_PERCENTAGE_ID,
 STOXRT.REQUEST_ID,
 STOXRT.RULE_START_DATE,
 STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,
 STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,
 STOXRT.SCA_SOURCE_TYPE_CD,
 STOXRT.SPLIT_PERCENT,
 STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,
 STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,
 STOXRT.TRANSACTION_SEQUENCE_ID,
 STOXRT.TRX_DATE,
 STOXRT.TRX_NAME,
 STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,
 STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,
 STOXRT.ACTION_CODE ,
 'RI' EXCEPTION_TYPE,
 STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD,
 STOXRT.BK_SALES_CREDIT_TYPE_CODE   ,
 STOXRT.SALES_REP_NUMBER              ,
 STOXRT.SALES_TERRITORY_KEY             ,
 STOXRT.SALES_MOTION_CD
 FROM   
 $$STGDB.WI_DRVD_NCR_REV_BKG_RT STOXRT 
 WHERE 
 STOXRT.FISCAL_ID >= (SELECT FISCAL_ID  FROM  $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND  NOT EXISTS
 ( SELECT 1 FROM  $$STGDB.WI_OM_XXNCR_REV_RT WI 
 WHERE WI.TRANSACTION_SEQUENCE_ID=STOXRT.TRANSACTION_SEQUENCE_ID
 ) AND STOXRT.EXTRACT_TYPE='INV'


Post SQL : 



Target4 Name : EX_WI_OM_XXNCR_REV_RT1


Pre SQL : 
DELETE FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT EX
WHERE EXISTS (SELECT 1 FROM $$STGDB.WI_OM_XXNCR_REV_RT WI WHERE WI.DV_TRANSACTION_KEY=EX.DV_TRANSACTION_KEY AND WI.DV_TRANSACTION_SOURCE_CD=EX.DV_TRANSACTION_SOURCE_CD AND EX.FISCAL_ID=WI.FISCAL_ID);


Post SQL : 
COLLECT STATS ON $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT;


Source5 Name : SQ_WI_DRVD_NCR_SLS_CHNL_CODE_RT


Pre SQL : 



SQL Query : 
SELECT 
  STOXREVTRX.GLOBAL_NAME GLOBAL_NAME,
  STOXREVTRX.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
  NSSCT.SUPER_SALES_CHANNEL_DESCR SALES_CHANNEL_CODE 
  FROM 
   $$STGDB.WI_OM_XXNCR_REV_RT STOXREVTRX
  INNER JOIN 
  ( SELECT WIOXRT.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
  WIOXRT.GLOBAL_NAME GLOBAL_NAME,
  CASE WHEN NAT.SOLD_TO_CUSTOMER_KEY <> -999 THEN NAT.SOLD_TO_CUSTOMER_KEY 
  ELSE NSORDTV.SOLD_TO_CUSTOMER_KEY end SOLD_TO_CUSTOMER_KEY,NRT.TRANSACTION_SOURCE_CD
  FROM 
   $$STGDB.WI_OM_XXNCR_REV_RT WIOXRT
  INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRT
  ON NRT.REVENUE_TRANSFER_KEY=WIOXRT.DV_TRANSACTION_KEY
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
  ON 
   (CASE WHEN NRT.ATTRBTN_CD='STANDALONE' THEN NRT.RU_SALES_ORDER_LINE_KEY ELSE NRT.DV_ATTRBTN_PRNT_SLSORD_LN_KEY
  END) =NSOL.SALES_ORDER_LINE_KEY/*join modified as a part of Q1FY15 by sabanil */
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSORDTV
  ON NSOL.SALES_ORDER_KEY=NSORDTV.SALES_ORDER_KEY
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON NRT.AR_TRANSACTION_LINE_KEY=NATL.AR_TRX_LINE_KEY
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON (NATL.AR_TRX_KEY = NAT.AR_TRX_KEY) ) SOLD_TO
   ON ( SOLD_TO.TRANSACTION_SEQUENCE_ID = STOXREVTRX.TRANSACTION_SEQUENCE_ID
   AND SOLD_TO.GLOBAL_NAME = STOXREVTRX.GLOBAL_NAME )
  INNER JOIN  $$COMREFVWDB.N_CUSTOMER_ACCOUNT CA
   ON (CA.CUSTOMER_ACCOUNT_KEY = SOLD_TO.SOLD_TO_CUSTOMER_KEY )
  INNER JOIN  $$COMREFVWDB.N_ERP_PARTY_TV EP
   ON(EP.ERP_PARTY_NUMBER = CA.ERP_CUSTOMER_NUMBER
   AND EP.END_TV_DATE = DATE '3500-01-01')
  INNER  JOIN  $$COMREFVWDB.N_ORGANIZATION_PARTY_TV NOPT
   ON (EP.PARTY_KEY=NOPT.ORGANIZATION_PARTY_KEY
   AND NOPT.END_TV_DATE = DATE '3500-01-01')
  INNER JOIN  $$COMREFVWDB.N_SALES_CHANNEL_TV NSCT
   ON(NOPT.BK_SALES_CHANNEL_CODE  = NSCT.BK_SALES_CHANNEL_CODE
   AND NSCT.END_TV_DATE = DATE '3500-01-01'
   AND NSCT.BK_SALES_CHANNEL_SOURCE_TYPE='CR')
  INNER JOIN  $$COMREFVWDB.N_SUPER_SALES_CHANNEL_TV NSSCT
   ON (NSCT. BK_SUPER_SALES_CHANNEL_CODE = NSSCT. BK_SUPER_SALES_CHANNEL_CODE
   AND NSSCT.END_TV_DATE = DATE '3500-01-01')      
WHERE SOLD_TO.TRANSACTION_SOURCE_CD = 'ERP'   

UNION ALL

SELECT 
  STOXREVTRX.GLOBAL_NAME GLOBAL_NAME,
  STOXREVTRX.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
  NSSCT.SUPER_SALES_CHANNEL_DESCR SALES_CHANNEL_CODE 
  FROM 
   $$STGDB.WI_OM_XXNCR_REV_RT STOXREVTRX
  INNER JOIN 
  ( SELECT WIOXRT.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
  WIOXRT.GLOBAL_NAME GLOBAL_NAME,
  /*COALESCE(NAT.SOLD_TO_CUSTOMER_KEY,-999) SOLD_TO_CUSTOMER_KEY, */
  NATL.SOLD_TO_CUST_ACCT_KEY AS SOLD_TO_CUSTOMER_KEY, /*MODIFIED AS PART OF SOLD TO XAAS Q2FY18*/
  NRT.TRANSACTION_SOURCE_CD
  FROM 
   $$STGDB.WI_OM_XXNCR_REV_RT WIOXRT
  INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRT
  ON NRT.REVENUE_TRANSFER_KEY=WIOXRT.DV_TRANSACTION_KEY
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON NRT.AR_TRANSACTION_LINE_KEY=NATL.AR_TRX_LINE_KEY
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON (NATL.AR_TRX_KEY = NAT.AR_TRX_KEY) ) SOLD_TO
   ON ( SOLD_TO.TRANSACTION_SEQUENCE_ID = STOXREVTRX.TRANSACTION_SEQUENCE_ID
   AND SOLD_TO.GLOBAL_NAME = STOXREVTRX.GLOBAL_NAME )
  INNER JOIN  $$COMREFVWDB.N_CUSTOMER_ACCOUNT CA
   ON (CA.CUSTOMER_ACCOUNT_KEY = SOLD_TO.SOLD_TO_CUSTOMER_KEY )
  INNER JOIN  $$COMREFVWDB.N_ERP_PARTY_TV EP
   ON(EP.ERP_PARTY_NUMBER = CA.ERP_CUSTOMER_NUMBER
   AND EP.END_TV_DATE = DATE '3500-01-01')
  INNER  JOIN  $$COMREFVWDB.N_ORGANIZATION_PARTY_TV NOPT
   ON (EP.PARTY_KEY=NOPT.ORGANIZATION_PARTY_KEY
   AND NOPT.END_TV_DATE = DATE '3500-01-01')
  INNER JOIN  $$COMREFVWDB.N_SALES_CHANNEL_TV NSCT
   ON(NOPT.BK_SALES_CHANNEL_CODE  = NSCT.BK_SALES_CHANNEL_CODE
   AND NSCT.END_TV_DATE = DATE '3500-01-01'
   AND NSCT.BK_SALES_CHANNEL_SOURCE_TYPE='CR')
  INNER JOIN  $$COMREFVWDB.N_SUPER_SALES_CHANNEL_TV NSSCT
   ON (NSCT. BK_SUPER_SALES_CHANNEL_CODE = NSSCT. BK_SUPER_SALES_CHANNEL_CODE
   AND NSSCT.END_TV_DATE = DATE '3500-01-01')      
WHERE SOLD_TO.TRANSACTION_SOURCE_CD = 'XAAS'


Post SQL : 



Target5 Name : WI_DRVD_NCR_SLS_CHNL_CODE_RT1


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_SLS_CHNL_CODE_RT ALL;


Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_SLS_CHNL_CODE_RT;


Source6 Name : SQ_WI_DRVD_NCR_REV_TRX_FOR_BKG_RT


Pre SQL : 



SQL Query : 
SELECT
  WIOXRT.TRANSACTION_SEQUENCE_ID      TRANSACTION_SEQUENCE_ID,
  WIOXRT.GLOBAL_NAME       GLOBAL_NAME, 
  WIOXRT.TRANSACTION_DATE       TRANSACTION_DATE,
  WIOXRT.ACCOUNT_CLASS       ACCOUNT_CLASS_CODE,
  /*WIOXRT.ACCTD_AMOUNT       GL_DISTRIBUTION_FUNCTIONAL_AMT,*/
  COALESCE(CAST(WIOXRT.ACCTD_AMOUNT * COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)/100 AS DECIMAL(18,0)),0.000000)   GL_DISTRIBUTION_FUNCTIONAL_AMT,
  /*EOCATA.ADJ_TYPE_NAME       ADJUSTMENT_TYPE_CODE, */
  /* 'Revenue Transfer Auto'  ADJUSTMENT_TYPE_CODE*/   ---commented as a part of  FMV_DECFY15
  CASE WHEN  NRT.RU_MANUAL_REV_TRANSFER_TYPE_CD='MANUAL'  THEN 'Revenue Transfer Auto - Manual' ELSE 'Revenue Transfer Auto - System' END AS ADJUSTMENT_TYPE_CODE, ---Added as a part of FMV_DECFY15
  /*WIOXRT.AMOUNT        GL_DISTRIB_TRANSACTIONAL_AMT,*/
  CAST(COALESCE(WIOXRT.AMOUNT * COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)/100,0.000000) AS DECIMAL(18,6)) GL_DISTRIB_TRANSACTIONAL_AMT, 
  WIOXRT.CREATED_BY       CREATED_BY_INT,
  /*NATIL.RU_DEBIT_EXTENDED_AMOUNT + NATIL.RU_CREDIT_EXTENDED_AMOUNT AR_TRX_LINE_TRANSACTIONAL_AMT,*/
  0 AR_TRX_LINE_TRANSACTIONAL_AMT, /*Added for RTE*/
  WIOXRT.EXTRACT_TYPE       EXTRACT_TYPE_CODE,
  WIOXRT.FORWARD_REVERSE_FLAG      FORWARD_REVERSE_CODE,
  WIOXRT.GL_DATE        GL_DATETIME,
  WIOXRT.GL_DATE        GL_DATE,
  WIOXRT.GL_POSTED_DATE       GL_POSTED_DATE,
  WIOXRT.TRANSACTION_GROUPING_TYPE     TRANSACTION_GROUPING_TYPE_CODE,
  WIOXRT.LAST_UPDATED_BY       LAST_UPDATED_BY_INT,
  WIOXRT.LATEST_RECORD_FLAG      LAST_RECORD_FLAG,
  WIOXRT.LINE_TYPE       LINE_TYPE_CODE,
  WIOXRT.QUOTA_FLAG       QUOTA_FLAG,  
  WIOXRT.REBATE_AMOUNT       REBATE_TRANSACTIONAL_AMOUNT,
  /*CASE WHEN  WIOXRT.REQUEST_ID = -999  THEN 'Y' ELSE 'N' END MANUAL_TRANSACTION_FLAG, COMMENTED FOR RT*/
  NULL AS MANUAL_TRANSACTION_FLAG, /*ADDED FOR RT*/
  WIOXRT.RULE_START_DATE       RULE_START_DATETIME, 
  WIOXRT.TRANSACTION_DATE       TRANSACTION_DATETIME,
  CAST (0 AS DECIMAL(18,6)) AS TRANSACTION_QUANTITY,
  WIOXRT.TRX_DATE        AR_TRX_DATETIME,
  WIOXRT.TRX_NUMBER       AR_TRX_NUMBER,
  WIOXRT.TRX_TYPE        AR_TRX_TYPE_CODE,
  /*NATIL.RU_CREDIT_UNIT_AMOUNT + NATIL.RU_DEBIT_UNIT_AMOUNT  UNIT_SELLING_PRICE_TRX_AMT, */ /*Commented for RTE*/
  CAST (0 AS DECIMAL(18,6))  UNIT_SELLING_PRICE_TRX_AMT,
  /*NATIL.RU_UNIT_STD_PRICE_LOCAL_AMT     UNIT_STANDARD_PRICE_TRX_AMT,*/ 
  CAST (0 AS DECIMAL(18,6))  UNIT_STANDARD_PRICE_TRX_AMT,
  WIOXRT.INVOICE_CURRENCY_CODE      PD_INVOICE_CURRENCY_CODE, 
  CASE WHEN WIOXRT.TRANSACTION_GROUPING_TYPE ='O' THEN CAST(WIOXRT.GL_DATE AS DATE) ELSE CAST(WIOXRT.TRANSACTION_DATE AS DATE) END DV_FISCAL_DATE,
  'N'         DV_BKGS_ITEM_TYPE_CODE_FLAG ,
  CASE WHEN SUBSTR(NSORDTV.BK_ORDER_TYPE_NAME,1,8)='Standard' AND NSORDTV.SHIPMENT_PRIORITY_CODE  IN('Demo' ,'Int "" l Demo','Intl Demo') THEN 'Y' ELSE 'N' END DV_BKGS_INTL_DEMO_FLAG,
  CASE WHEN SUBSTR(NSOT.DV_SALES_ORDER_TYPE_ALT_NAME,1,12)='Replacements' AND NSORDTV.SHIPMENT_PRIORITY_CODE IN ( 'Demo','Evaluation','Int"" l Demo','Intl Demo') THEN 'Y' ELSE 'N' END DV_BKGS_REPL_DEMO_FLAG,
 
 
   --CASE WHEN NSOT.SO_TYPE_REVENUE_GEN_FLAG = '='  OR NSOT.SO_TYPE_REVENUE_GEN_FLAG IS NULL THEN 'Y' ELSE SO_TYPE_REVENUE_GEN_FLAG END DV_BKGS_REVENUE_FLAG,
 
 CASE WHEN (NSOLN.SS_CODE = 'CG' AND NSORDTV.ORIGINATED_QTC_VIA_CG1_FLG = 'Y') OR (NSORDTV.SS_CODE <> 'CG')   THEN  CASE WHEN NSOTT_OLD.SO_TYPE_REVENUE_GEN_FLAG = '=' OR NSOTT_OLD.SO_TYPE_REVENUE_GEN_FLAG IS NULL THEN 'Y' ELSE NSOTT_OLD.SO_TYPE_REVENUE_GEN_FLAG END 
   ELSE CASE WHEN NSOT.SO_TYPE_REVENUE_GEN_FLAG = '=' OR NSOT.SO_TYPE_REVENUE_GEN_FLAG IS NULL THEN 'Y' ELSE NSOT.SO_TYPE_REVENUE_GEN_FLAG END 
 END AS  DV_BKGS_REVENUE_FLAG,  /*     added as part of Cf LSS CR post Q3FY15: If Order got created in old 11i system then flag will be derived based on order table otherwise if order gets created in new CG system, then flag will be derived from order line table*/
 
 
  CASE WHEN (NST.SALES_TERRITORY_KEY  IS NULL ) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG ,
  CASE WHEN (WIOXRT.SALES_REP_NUMBER = '-999' OR WIOXRT.SALES_REP_NUMBER IS NULL OR WIOXRT.SALES_REP_NUMBER = 'UNKNOWN' ) THEN 'Y'ELSE 'N' END DV_BKGS_SALESREP_FLAG ,
  NULL   DV_BKGS_IC_REVENUE_FLAG,
  CASE WHEN NPT.BK_PRODUCT_TYPE_ID='CHARGES' THEN 'Y' ELSE 'N' END DV_BKGS_CHARGES_FLAG,
  CASE WHEN SUBSTR(NPT.BK_PRODUCT_ID,1,4)='MISC' THEN 'Y' ELSE 'N' END DV_BKGS_MISC_FLAG,
  CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' THEN 'Y' ELSE 'N' END DV_BKGS_SERVICE_FLAG,
  CAST(((CAST (COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)*
  (COALESCE(WIOXRT.AMOUNT,0.000000)- COALESCE(WIOXRT.REBATE_AMOUNT,0.000000)) AS DECIMAL(18,6)))* 
  (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
  NCCDR.PL_CONVERSION_RATE END)/100.000000) AS DECIMAL(18,6)) AS DV_BKGS_COMP_US_NET_PRC_AMT,
   CAST (0 AS DECIMAL(18,6)) AS DV_BKGS_COMP_US_LST_PRC_AMT, 
  CAST (0 AS DECIMAL (18,6)) AS DV_BKGS_COMP_US_COST_AMT, 
  0         DV_BKGS_EXTENDED_QUANTITY,
  WIOXRT.SPLIT_PERCENT       SALES_COMMISSION_PERCENTAGE,
  0         DV_COMP_US_STANDARD_PRICE_AMT ,
  NPT.ITEM_KEY PRODUCT_KEY,
  /*COALESCE(CASE WHEN NSORDTV.SALES_ORDER_KEY = -7777 THEN
  (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.SALES_ORDER_KEY END)
  WHEN NSORDTV.SALES_ORDER_KEY IS NULL THEN -7777
  ELSE NSORDTV.SALES_ORDER_KEY END,-7777) SALES_ORDER_KEY,commented as a part of RTEQ1FY15*/
   NSORDTV.SALES_ORDER_KEY AS SALES_ORDER_KEY,
   NSOLN.SALES_ORDER_LINE_KEY AS SALES_ORDER_LINE_KEY, 
   NAT.SHIP_TO_CUSTOMER_KEY AS SHIP_TO_CUSTOMER_KEY,
  CASE WHEN NAT.SOLD_TO_CUSTOMER_KEY <> -999 THEN NAT.SOLD_TO_CUSTOMER_KEY ELSE 
  COALESCE(NSORDTV.SOLD_TO_CUSTOMER_KEY,-999) END SOLD_TO_CUSTOMER_KEY ,
  NAT.BILL_TO_CUSTOMER_KEY AS BILL_TO_CUSTOMER_KEY,
   /*  CASE 
   WHEN NSORDTV.SALES_ORDER_KEY = -7777 THEN
   (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.BK_SO_NUMBER_INT END)
   WHEN NSORDTV.BK_SO_NUMBER_INT IS NULL THEN -9999 
   ELSE NSORDTV.BK_SO_NUMBER_INT END REPORTED_SALES_ORDER_NUM_INT ,commented as a part of RTEQ1FY15*/
   NSORDTV.BK_SO_NUMBER_INT AS REPORTED_SALES_ORDER_NUM_INT ,
   CASE WHEN NCCDR.PL_CONVERSION_RATE  =0 OR NCCDR.PL_CONVERSION_RATE  IS NULL THEN 1 ELSE NCCDR.PL_CONVERSION_RATE  END CONVERSION_RT,
  WIOXRT.SALES_MOTION_CD /*Added as part of Oct-2017 release */
  FROM 
  $$STGDB.WI_OM_XXNCR_REV_RT WIOXRT
  INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRT
  ON NRT.REVENUE_TRANSFER_KEY=WIOXRT.DV_TRANSACTION_KEY
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON (NATL.AR_TRX_LINE_KEY = NRT.AR_TRANSACTION_LINE_KEY)
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
  ON (NATL.AR_TRX_KEY = NAT.AR_TRX_KEY)
  LEFT OUTER JOIN $$COMREFVWDB.N_SALES_TERRITORY_TV NST
  ON WIOXRT.SALES_TERRITORY_KEY = NST.SALES_TERRITORY_KEY
  AND NST.END_TV_DATE = '3500-01-01' 
  AND NST.BK_SALES_HIERARCHY_TYPE_CODE LIKE 'CORP%.%REVENUE'
  INNER JOIN $$COMREFVWDB.N_PRODUCT NPT 
  ON ( NPT.SK_INVENTORY_ITEM_ID_INT = WIOXRT.INVENTORY_ITEM_ID) 
  INNER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE  NSOLN
  ON ( ( CASE WHEN NRT.ATTRBTN_CD='STANDALONE' THEN NRT.RU_SALES_ORDER_LINE_KEY ELSE NRT.DV_ATTRBTN_PRNT_SLSORD_LN_KEY
  END)= NSOLN.SALES_ORDER_LINE_KEY )/*modified the join  as a part of RTE Q1FY15 by sabanil */
  LEFT OUTER JOIN $$FINLGLVWDB.N_CURRENCY_CONV_DAILY_RATE NCCDR
  ON ( NCCDR.BK_FROM_CURRENCY_CODE = WIOXRT.INVOICE_CURRENCY_CODE
  AND NCCDR.BK_TO_CURRENCY_CODE ='USD'
  AND NCCDR.BK_CONVERSION_DATE= CAST (WIOXRT.GL_DATE AS DATE))
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_TV  NSORDTV
  ON (NSOLN.SALES_ORDER_KEY=NSORDTV.SALES_ORDER_KEY
  AND NSORDTV.END_TV_DATETIME =  '3500-01-01 00:00:00' )
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV ORD_LN_V
   ON(NSOLN.SALES_ORDER_LINE_KEY = ORD_LN_V.SALES_ORDER_LINE_KEY    
   AND ORD_LN_V.END_TV_DTM = '3500-01-01 00:00:00')
   
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT
   ON(NSOT.BK_ORDER_TYPE_NAME = ORD_LN_V.SO_LINE_TYPE_NAME)
   
 LEFT JOIN  $$SLSORDVWDB.N_SALES_ORDER_TYPE_TV  NSOTT_OLD     /*     added as part of Cf LSS CR post Q3FY15 */
 ON NSORDTV.BK_ORDER_TYPE_NAME=NSOTT_OLD.BK_ORDER_TYPE_NAME
 AND NSOTT_OLD.END_TV_DATE='3500-01-01'                 
 WHERE NRT.TRANSACTION_SOURCE_CD = 'ERP'
 UNION ALL
 SELECT
  WIOXRT.TRANSACTION_SEQUENCE_ID      TRANSACTION_SEQUENCE_ID,
  WIOXRT.GLOBAL_NAME       GLOBAL_NAME, 
  WIOXRT.TRANSACTION_DATE       TRANSACTION_DATE,
  WIOXRT.ACCOUNT_CLASS       ACCOUNT_CLASS_CODE,
  COALESCE(CAST(WIOXRT.ACCTD_AMOUNT * COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)/100 AS DECIMAL(18,0)),0.000000)   GL_DISTRIBUTION_FUNCTIONAL_AMT,
  CASE WHEN  NRT.RU_MANUAL_REV_TRANSFER_TYPE_CD='MANUAL'  THEN 'Revenue Transfer Auto - Manual' ELSE 'Revenue Transfer Auto - System' END AS ADJUSTMENT_TYPE_CODE,
  CAST(COALESCE(WIOXRT.AMOUNT * COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)/100,0.000000) AS DECIMAL(18,6)) GL_DISTRIB_TRANSACTIONAL_AMT, 
  WIOXRT.CREATED_BY       CREATED_BY_INT,
  0 AR_TRX_LINE_TRANSACTIONAL_AMT,
  WIOXRT.EXTRACT_TYPE       EXTRACT_TYPE_CODE,
  WIOXRT.FORWARD_REVERSE_FLAG      FORWARD_REVERSE_CODE,
  WIOXRT.GL_DATE        GL_DATETIME,
  WIOXRT.GL_DATE        GL_DATE,
  WIOXRT.GL_POSTED_DATE       GL_POSTED_DATE,
  WIOXRT.TRANSACTION_GROUPING_TYPE     TRANSACTION_GROUPING_TYPE_CODE,
  WIOXRT.LAST_UPDATED_BY       LAST_UPDATED_BY_INT,
  WIOXRT.LATEST_RECORD_FLAG      LAST_RECORD_FLAG,
  WIOXRT.LINE_TYPE       LINE_TYPE_CODE,
  WIOXRT.QUOTA_FLAG       QUOTA_FLAG,  
  WIOXRT.REBATE_AMOUNT       REBATE_TRANSACTIONAL_AMOUNT,
  NULL AS MANUAL_TRANSACTION_FLAG,
  WIOXRT.RULE_START_DATE       RULE_START_DATETIME, 
  WIOXRT.TRANSACTION_DATE       TRANSACTION_DATETIME,
  CAST (0 AS DECIMAL(18,6)) AS TRANSACTION_QUANTITY,
  WIOXRT.TRX_DATE        AR_TRX_DATETIME,
  WIOXRT.TRX_NUMBER       AR_TRX_NUMBER,
  WIOXRT.TRX_TYPE        AR_TRX_TYPE_CODE,
  CAST (0 AS DECIMAL(18,6))  UNIT_SELLING_PRICE_TRX_AMT,
  CAST (0 AS DECIMAL(18,6))  UNIT_STANDARD_PRICE_TRX_AMT,
  WIOXRT.INVOICE_CURRENCY_CODE      PD_INVOICE_CURRENCY_CODE, 
  CASE WHEN WIOXRT.TRANSACTION_GROUPING_TYPE ='O' THEN CAST(WIOXRT.GL_DATE AS DATE) ELSE CAST(WIOXRT.TRANSACTION_DATE AS DATE) END DV_FISCAL_DATE,
  'N' DV_BKGS_ITEM_TYPE_CODE_FLAG ,
  'N' DV_BKGS_INTL_DEMO_FLAG,
  'N' DV_BKGS_REPL_DEMO_FLAG,
  'N' DV_BKGS_REVENUE_FLAG,  
  CASE WHEN (NST.SALES_TERRITORY_KEY  IS NULL ) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG ,
  CASE WHEN (WIOXRT.SALES_REP_NUMBER = '-999' OR WIOXRT.SALES_REP_NUMBER IS NULL OR WIOXRT.SALES_REP_NUMBER = 'UNKNOWN' ) THEN 'Y'ELSE 'N' END DV_BKGS_SALESREP_FLAG ,
  NULL   DV_BKGS_IC_REVENUE_FLAG,
  CASE WHEN NPT.BK_PRODUCT_TYPE_ID='CHARGES' THEN 'Y' ELSE 'N' END DV_BKGS_CHARGES_FLAG,
  CASE WHEN SUBSTR(NPT.BK_PRODUCT_ID,1,4)='MISC' THEN 'Y' ELSE 'N' END DV_BKGS_MISC_FLAG,
  CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' THEN 'Y' ELSE 'N' END DV_BKGS_SERVICE_FLAG,
  CAST(((CAST (COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)*
  (COALESCE(WIOXRT.AMOUNT,0.000000)- COALESCE(WIOXRT.REBATE_AMOUNT,0.000000)) AS DECIMAL(18,6)))* 
  (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
  NCCDR.PL_CONVERSION_RATE END)/100.000000) AS DECIMAL(18,6)) AS DV_BKGS_COMP_US_NET_PRC_AMT,
   CAST (0 AS DECIMAL(18,6)) AS DV_BKGS_COMP_US_LST_PRC_AMT, 
  CAST (0 AS DECIMAL (18,6)) AS DV_BKGS_COMP_US_COST_AMT, 
  0         DV_BKGS_EXTENDED_QUANTITY,
  WIOXRT.SPLIT_PERCENT       SALES_COMMISSION_PERCENTAGE,
  0         DV_COMP_US_STANDARD_PRICE_AMT ,
  NPT.ITEM_KEY PRODUCT_KEY,
  -7777 AS SALES_ORDER_KEY,
  -7777 AS SALES_ORDER_LINE_KEY, 
   NAT.SHIP_TO_CUSTOMER_KEY AS SHIP_TO_CUSTOMER_KEY,
  	  /*CASE WHEN NAT.SOLD_TO_CUSTOMER_KEY <> -999 THEN NAT.SOLD_TO_CUSTOMER_KEY ELSE 
  -999 END SOLD_TO_CUSTOMER_KEY ,*/
  NATL.SOLD_TO_CUST_ACCT_KEY AS SOLD_TO_CUSTOMER_KEY, /*MODIFIED AS PART OF SOLD TO XAAS Q2FY18*/
 
 NAT.BILL_TO_CUSTOMER_KEY AS BILL_TO_CUSTOMER_KEY,
  -999 AS REPORTED_SALES_ORDER_NUM_INT ,
  CASE WHEN NCCDR.PL_CONVERSION_RATE  =0 OR NCCDR.PL_CONVERSION_RATE  IS NULL THEN 1 ELSE NCCDR.PL_CONVERSION_RATE  END CONVERSION_RT,
  WIOXRT.SALES_MOTION_CD /*Added as part of Oct-2017 release */
  FROM 
  $$STGDB.WI_OM_XXNCR_REV_RT WIOXRT
  INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRT
  ON NRT.REVENUE_TRANSFER_KEY=WIOXRT.DV_TRANSACTION_KEY
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON (NATL.AR_TRX_LINE_KEY = NRT.AR_TRANSACTION_LINE_KEY)
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
  ON (NATL.AR_TRX_KEY = NAT.AR_TRX_KEY)

  LEFT OUTER JOIN $$COMREFVWDB.N_SALES_TERRITORY_TV NST
  ON WIOXRT.SALES_TERRITORY_KEY = NST.SALES_TERRITORY_KEY
  AND NST.END_TV_DATE = '3500-01-01' 
  AND NST.BK_SALES_HIERARCHY_TYPE_CODE LIKE 'CORP%.%REVENUE'
  INNER JOIN $$COMREFVWDB.N_PRODUCT NPT 
  ON ( NPT.SK_INVENTORY_ITEM_ID_INT = WIOXRT.INVENTORY_ITEM_ID) 
   LEFT OUTER JOIN $$FINLGLVWDB.N_CURRENCY_CONV_DAILY_RATE NCCDR
  ON ( NCCDR.BK_FROM_CURRENCY_CODE = WIOXRT.INVOICE_CURRENCY_CODE
  AND NCCDR.BK_TO_CURRENCY_CODE ='USD'
  AND NCCDR.BK_CONVERSION_DATE= CAST (WIOXRT.GL_DATE AS DATE))
  WHERE NRT.TRANSACTION_SOURCE_CD = 'XAAS'


Post SQL : 



Target6 Name : WI_DRVD_NCR_REV_TRX_FOR_BKG_RT1


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_RT ALL;


Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_RT;


Source7 Name : SQ_WI_DRVD_NCR_REV_FOR_BKG_RT


Pre SQL : 



SQL Query : 
SELECT 
 1   DRVD_NCR_REV_TRX_BKG_KEY,
 WDNRTFB.TRANSACTION_SEQUENCE_ID_INT     TRANSACTION_SEQUENCE_ID_INT,
 NSSC.SOURCE_SYSTEM_CODE         SOURCE_SYSTEM_CODE,
 WDNRTFB.TRANSACTION_DATE        TRANSACTION_DATE,
 WIOXRT.TRANSACTION_SEQUENCE_ID       SK_PH_TRANSACTION_SEQ_ID_INT, 
 /*NAAR.BK_ACCOUNTING_RULE_NAME       ACCOUNTING_RULE_NAME, */
 SORR.NAME ACCOUNTING_RULE_NAME,
 WDNRTFB.ACCOUNT_CLASS_CODE        ACCOUNT_CLASS_CODE,
 WDNRTFB.GL_DISTRIBUTION_FUNCTIONAL_AMT    GL_DISTRIBUTION_FUNCTIONAL_AMT,
 WDNRTFB.ADJUSTMENT_TYPE_CODE       ADJUSTMENT_TYPE_CODE,
 WDNRTFB.GL_DISTRIB_TRANSACTIONAL_AMT     GL_DISTRIB_TRANSACTIONAL_AMT,
 WDNRTFB.CREATED_BY_INT         CREATED_BY_INT,
 WDNRTFB.AR_TRX_LINE_TRANSACTIONAL_AMT     AR_TRX_LINE_TRANSACTIONAL_AMT,
 WDNRTFB.EXTRACT_TYPE_CODE        EXTRACT_TYPE_CODE,
 WDNRTFB.FORWARD_REVERSE_CODE       FORWARD_REVERSE_CODE,
 WDNRTFB.GL_DATETIME          GL_DATETIME,
 WDNRTFB.GL_DATE            GL_DATE, 
 WDNRTFB.GL_POSTED_DATE          GL_POSTED_DATE,
 WDNRTFB.TRANSACTION_GROUPING_TYPE_CODE    TRANSACTION_GROUPING_TYPE_CODE,
 WDNRTFB.LAST_UPDATED_BY_INT       LAST_UPDATED_BY_INT,
 WDNRTFB.LAST_RECORD_FLAG        LAST_RECORD_FLAG,
 /*NATL.BK_AR_TRX_LINE_TYPE        LINE_TYPE_CODE,*/
 'UNKNOWN' AS LINE_TYPE_CODE,  /*Added for RTE*/
 WDNRTFB.QUOTA_FLAG          QUOTA_FLAG,
 COALESCE(WDNRTFB.REBATE_TRANSACTIONAL_AMOUNT,0)  REBATE_TRANSACTIONAL_AMOUNT,
 WDNRTFB.MANUAL_TRANSACTION_FLAG      MANUAL_TRANSACTION_FLAG,
 WDNRTFB.RULE_START_DATETIME       RULE_START_DATETIME,
 WDNRTFB.TRANSACTION_DATETIME       TRANSACTION_DATETIME,
 WDNRTFB.TRANSACTION_QUANTITY       TRANSACTION_QUANTITY,
 WDNRTFB.AR_TRX_DATETIME          AR_TRX_DATETIME,
 WDNRTFB.AR_TRX_NUMBER          AR_TRX_NUMBER,
 WDNRTFB.AR_TRX_TYPE_CODE         AR_TRX_TYPE_CODE,
 WDNRTFB.UNIT_SELLING_PRICE_TRX_AMT,
 WDNRTFB.UNIT_STANDARD_PRICE_TRX_AMT,
 WIOXRT.SALES_TERRITORY_KEY  PD_SALES_TERRITORY_KEY,
 WIOXRT.SALES_REP_NUMBER    PD_SALES_REP_NUMBER,
 /* commented for RT
 CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN 'UNKNOWN' ELSE EAAT.BK_AR_ADJ_NUMBER END PD_AR_ADJUSTMENT_NUMBER,
 CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN '020' ELSE EAAT.BK_COMPANY_CODE END PD_AR_ADJUSTMENT_COMPANY_CODE,
 CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN 500 ELSE EAAT.BK_SET_OF_BOOKS_KEY END PD_AR_ADJ_SET_OF_BOOKS_KEY,*/
 'UNKNOWN' PD_AR_ADJUSTMENT_NUMBER,  /*knarlapu: Changing UNKOWN to UNKNOWN  */
 '020' PD_AR_ADJUSTMENT_COMPANY_CODE, 
 500 PD_AR_ADJ_SET_OF_BOOKS_KEY, 
 WIOXRT.FUNC_CURRENCY_CODE  AS   PD_FUNCTIONAL_CURRENCY_CODE, 
 WDNRTFB.PD_INVOICE_CURRENCY_CODE   PD_INVOICE_CURRENCY_CODE,
 NFM.BK_FISCAL_CALENDAR_CODE    DV_FISCAL_CALENDAR_CODE,
 SUBSTR(CAST(WIOXRT.FISCAL_ID AS VARCHAR(6)),5,2) DV_FISCAL_MONTH_NUMBER_INT,
 SUBSTR(CAST(WIOXRT.FISCAL_ID AS VARCHAR(6)),1,4)  DV_FISCAL_YEAR_NUMBER_INT,
 'FOR BOOKINGS REPORTING'       REPORTING_MEASURE_TYPE,
  /*-7777 AS BK_AR_TRX_LINE_GL_DISTRIB_KEY, commented as a part of RTEQ1FY15*/
  CASE WHEN NATL.SS_CODE='QTC' THEN -9999
  WHEN NATL.SS_CODE='BV' THEN -8888
  ELSE -7777
  END AS BK_AR_TRX_LINE_GL_DISTRIB_KEY,
 NRA.REVENUE_TRANSFER_KEY,
 WDNRTFB.DV_FISCAL_DATE         DV_FISCAL_DATE, 
 WDNRTFB.DV_BKGS_ITEM_TYPE_CODE_FLAG     DV_BKGS_ITEM_TYPE_CODE_FLAG,
 WDNRTFB.DV_BKGS_INTL_DEMO_FLAG       DV_BKGS_INTL_DEMO_FLAG,
 WDNRTFB.DV_BKGS_REPL_DEMO_FLAG       DV_BKGS_REPL_DEMO_FLAG,
 WDNRTFB.DV_BKGS_REVENUE_FLAG       DV_BKGS_REVENUE_FLAG,
 WDNRTFB.DV_BKGS_OVERLAY_FLAG       DV_BKGS_OVERLAY_FLAG,
 WDNRTFB.DV_BKGS_SALESREP_FLAG      DV_BKGS_SALESREP_FLAG,
 CASE WHEN NCA.ERP_CUSTOMER_TYPE_CODE='I' THEN 'N' ELSE 'Y' END DV_BKGS_IC_REVENUE_FLAG,
 WDNRTFB.DV_BKGS_CHARGES_FLAG    DV_BKGS_CHARGES_FLAG,
 WDNRTFB.DV_BKGS_MISC_FLAG       DV_BKGS_MISC_FLAG,
 WDNRTFB.DV_BKGS_SERVICE_FLAG    DV_BKGS_SERVICE_FLAG,
 CASE  WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999 
   THEN ( CASE  WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL 
        OR NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
        /* AND DV_BKGS_REVENUE_FLAG='Y'  */ /*satchinn: Commented as part   corp booking flag changes  */
        AND DV_BKGS_CHARGES_FLAG='N' 
        AND DV_BKGS_OVERLAY_FLAG='N' 
        AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
        AND DV_BKGS_MISC_FLAG='N' 
        AND DV_BKGS_SALESREP_FLAG='N'
        AND RSH.L1_SALES_TERRITORY_NAME_CODE <> 'WW Distribution' 
       THEN 'Y' 
       ELSE 'N' 
     END)
   ELSE 
    ( CASE WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
         /* AND DV_BKGS_REVENUE_FLAG='Y' */  /*satchinn: Commented as part   corp booking flag changes  */
         AND DV_BKGS_CHARGES_FLAG='N' 
         AND DV_BKGS_OVERLAY_FLAG='N' 
         AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
         AND DV_BKGS_MISC_FLAG='N' 
         AND DV_BKGS_SALESREP_FLAG='N' 
     AND RSH.L1_SALES_TERRITORY_NAME_CODE <> 'WW Distribution' 
       THEN 'Y' 
       ELSE 'N' 
     END ) 
 END DV_BKGS_CORP_BKG_FLAG, 
 COALESCE(WDNRTFB.DV_BKGS_COMP_US_NET_PRC_AMT,0)  DV_BKGS_COMP_US_NET_PRC_AMT,
 COALESCE(WDNRTFB.DV_BKGS_COMP_US_LST_PRC_AMT,0)  DV_BKGS_COMP_US_LST_PRC_AMT,
 COALESCE(WDNRTFB.DV_BKGS_COMP_US_COST_AMT,0)  DV_BKGS_COMP_US_COST_AMT,
 COALESCE(WDNRTFB.DV_BKGS_EXTENDED_QUANTITY,0)  DV_BKGS_EXTENDED_QUANTITY,
 CASE WHEN WIOXRT.ORDER_LINE_ID IN (-9999,0) THEN '99998' ELSE WIOXRT.SALES_REP_NUMBER END BK_SCAA_SALES_REP_NUMBER,
 CASE WHEN WIOXRT.ORDER_LINE_ID IN (-9999,0) THEN WIOXRT.SALES_REP_NUMBER ELSE '99998' END BK_SCAN_SALES_REP_NUMBER,
 WDNRTFB.SALES_COMMISSION_PERCENTAGE   SALES_COMMISSION_PERCENTAGE,
 COALESCE(WDNSCC.SALES_CHANNEL_CODE,'NC/ADJ')  SALES_CHANNEL_CODE,
 WDNRTFB.DV_COMP_US_STANDARD_PRICE_AMT   DV_COMP_US_STANDARD_PRICE_AMT,
 WIOXRT.FISCAL_ID     DV_FISCAL_YEAR_MTH_NUMBER_INT,
 WDNRTFB.REPORTED_SALES_ORDER_NUM_INT   REPORTED_SALES_ORDER_NUM_INT, 
 CASE WHEN WIOXRT.FISCAL_ID <= BKGPDT.FISCAL_YEAR_MTH_NUMBER_INT  THEN BKGPDT.PROCESS_DATE
   ELSE CAST('1900-01-01' AS DATE) 
 END PROCESS_DATE,
 NARTRX.AR_TRX_KEY     AR_TRX_KEY,
 NATL.AR_TRX_LINE_KEY     AR_TRX_LINE_KEY,
 WDNRTFB.PRODUCT_KEY     PRODUCT_KEY,
 WDNRTFB.SALES_ORDER_KEY     SALES_ORDER_KEY,
 WDNRTFB.SALES_ORDER_LINE_KEY    SALES_ORDER_LINE_KEY,
 WDNRTFB.SHIP_TO_CUSTOMER_KEY     SHIP_TO_CUSTOMER_KEY ,
 WDNRTFB.SOLD_TO_CUSTOMER_KEY       SOLD_TO_CUSTOMER_KEY  ,
 WDNRTFB.BILL_TO_CUSTOMER_KEY     BILL_TO_CUSTOMER_KEY ,
 WIOXRT.BK_SALES_CREDIT_TYPE_CODE      SALES_CREDIT_TYPE_CODE,
 USER EDW_CREATE_USER, 
 USER EDW_UPDATE_USER, 
 CURRENT_TIMESTAMP(0) EDW_CREATE_DATETIME, 
 CURRENT_TIMESTAMP(0)EDW_UPDATE_DATETIME, 
 WDNRTFB.CONVERSION_RT     CONVERSION_RT,
 /*commented for RT 
 CASE WHEN WDNRTFB.EXTRACT_TYPE_CODE IN ('REV','INV') THEN NARTRX.BK_AR_TRX_TYPE_CODE 
   WHEN WDNRTFB.EXTRACT_TYPE_CODE IN ('CORP_ADJ','AR_ADJUSTMENT') THEN WDNRTFB.EXTRACT_TYPE_CODE 
   ELSE 'UNKNOWN' 
 END DV_TRANSACTION_NAME,*/
 NARTRX.BK_AR_TRX_TYPE_CODE AS DV_TRANSACTION_NAME, /*Open item for RT */
 WIOXRT.DEFAULT_SC_FLAG  DEFAULT_SC_FLG,
 WIOXRT.SK_LINE_SEQ_ID_INT,
 WIOXRT.SCA_SOURCE_TYPE_CD,
 WIOXRT.DV_TRANSACTION_SOURCE_CD, 
 WIOXRT.DV_TRANSACTION_KEY,
  COALESCE(WIOXRT.AMOUNT,0) AS AMOUNT,
 COALESCE(WIOXRT.ACCTD_AMOUNT,0) AS ACCTD_AMOUNT,
 COALESCE(WIOXRT.TRANSACTION_QUANTITY,0) AS TRANSACTION_QUANTITY1 ,
 CASE WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999
   THEN ( CASE WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL  OR NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
        /* AND DV_BKGS_REVENUE_FLAG='Y'*/ /*satchinn: Commented as part REVENUE  RECOGNITION flag changes  */
        AND DV_BKGS_CHARGES_FLAG='N' 
        AND DV_BKGS_OVERLAY_FLAG='N' 
        AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
        AND DV_BKGS_MISC_FLAG='N' 
        AND DV_BKGS_SALESREP_FLAG='N' 
       THEN 'Y' 
       ELSE 'N' 
     END)
   ELSE 
    ( CASE WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
        /* AND DV_BKGS_REVENUE_FLAG='Y' */ /*satchinn: Commented as part REVENUE  RECOGNITION flag changes  */
         AND DV_BKGS_CHARGES_FLAG='N' 
         AND DV_BKGS_OVERLAY_FLAG='N' 
         AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
         AND DV_BKGS_MISC_FLAG='N' 
         AND DV_BKGS_SALESREP_FLAG='N' 
       THEN 'Y' 
       ELSE 'N' 
     END )  
 END DV_REVENUE_RECOGNITION_FLG,
 CASE WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999
   THEN (CASE WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL  OR NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
       AND DV_BKGS_REVENUE_FLAG='Y' 
       AND DV_BKGS_CHARGES_FLAG='N' 
       AND DV_BKGS_OVERLAY_FLAG='N' 
       AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
       AND DV_BKGS_MISC_FLAG='N' 
       AND DV_BKGS_SALESREP_FLAG='N' 
     AND RSH.L1_SALES_TERRITORY_NAME_CODE = 'WW Distribution' 
       THEN 'Y' 
      ELSE 'N' 
    END)
   ELSE ( CASE WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL  OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
         AND DV_BKGS_REVENUE_FLAG='Y' 
         AND DV_BKGS_CHARGES_FLAG='N' 
         AND DV_BKGS_OVERLAY_FLAG='N' 
         AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
         AND DV_BKGS_MISC_FLAG='N' 
         AND DV_BKGS_SALESREP_FLAG='N' 
   AND RSH.L1_SALES_TERRITORY_NAME_CODE = 'WW Distribution' 
       THEN 'Y' 
       ELSE 'N' 
     END )
 END DV_NET_SPREAD_FLG, 
 WIOXRT.ACTION_CODE ACTION_CODE,
 'I' AS DML_TYPE,
 WIOXRT.GLOBAL_NAME,
 WIOXRT.SALES_MOTION_CD  /*Added as part of Oct-2017 release */
 FROM 
  (SELECT PROCESS_DATE , FISCAL_YEAR_MTH_NUMBER_INT FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL )  BKGPDT,
  $$STGDB.WI_OM_XXNCR_REV_RT WIOXRT
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
  ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
 INNER JOIN $$FINLGLVWDB.N_REVENUE_TRANSFER NRA
 ON (NRA.REVENUE_TRANSFER_KEY=WIOXRT.DV_TRANSACTION_KEY)
 INNER JOIN $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_RT WDNRTFB
  ON ( WDNRTFB.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID
  AND WDNRTFB.GLOBAL_NAME = WIOXRT.GLOBAL_NAME )
 INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
  ON (SORR.RULE_ID = WIOXRT.ACCOUNTING_RULE_ID
  AND SORR.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
 /*INNER JOIN $$FINLGLVWDB.N_AR_ACCOUNTING_RULE NAAR
  ON (NAAR.BK_ACCOUNTING_RULE_NAME = SORR.NAME)*/
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON ( NRA.AR_TRANSACTION_LINE_KEY = NATL.AR_TRX_LINE_KEY ) 
 LEFT OUTER JOIN $$COMREFVWDB.R_SALES_HIERARCHY RSH
 ON WIOXRT.SALES_TERRITORY_KEY   = RSH.SALES_TERRITORY_KEY  
 INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX
  ON (NATL.AR_TRX_KEY = NARTRX.AR_TRX_KEY) 
 INNER JOIN $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA 
  ON (NCA.CUSTOMER_ACCOUNT_KEY = NARTRX.SOLD_TO_CUSTOMER_KEY) 
 INNER JOIN $$COMREFVWDB.N_ERP_CUST_ACCT_LOC_USE NECAL   
  ON (NECAL.ERP_CUST_ACCOUNT_LOCATION_KEY = NARTRX.BILL_TO_CUSTOMER_KEY) 
 INNER JOIN $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA1  
  ON (NCA1.CUSTOMER_ACCOUNT_KEY = NECAL.CUSTOMER_ACCOUNT_KEY) 
 LEFT OUTER JOIN $$COMREFVWDB.N_FISCAL_MONTH NFM
  ON ( CAST(WIOXRT.GL_DATE AS DATE) >= NFM.FISCAL_MONTH_START_DATE 
  AND CAST(WIOXRT.GL_DATE AS DATE) <= NFM.FISCAL_MONTH_END_DATE)
 LEFT OUTER JOIN $$STGDB.WI_DRVD_NCR_SLS_CHNL_CODE_RT WDNSCC
  ON (WDNSCC.TRANSACTION_SEQUENCE_ID = WIOXRT.TRANSACTION_SEQUENCE_ID 
  AND WDNSCC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)


Post SQL : 



Target7 Name : WI_DRVD_NCR_REV_FOR_BKG_RT1


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_RT ALL;


Post SQL : 
UPDATE WRT FROM 
$$STGDB.WI_DRVD_NCR_REV_FOR_BKG_RT WRT,
$$STGDB.WI_DRVD_NCR_REV_BKG_RT WIRT,
$$COMREFVWDB.N_PRODUCT NP,
$$COMREFVWDB.N_PRODUCT_FAMILY NPF
SET DV_BKGS_CORP_BKG_FLAG = 'N',
DV_REVENUE_RECOGNITION_FLG='N',
DV_NET_SPREAD_FLG= 'N'
WHERE WRT.TRANSACTION_SEQUENCE_ID_INT=WIRT.TRANSACTION_SEQUENCE_ID 
AND WRT.GLOBAL_NAME=WIRT.GLOBAL_NAME
AND WIRT.INVENTORY_ITEM_ID = NP.SK_INVENTORY_ITEM_ID_INT
AND NP.RU_BK_PRODUCT_FAMILY_ID = NPF.BK_PRODUCT_FAMILY_ID
AND NPF.BK_BUSINESS_UNIT_ID ='CDBU'
AND NP.GOODS_OR_SERVICE_TYPE = 'GOODS'
AND WIRT.ACCOUNT_CODE NOT IN ('40100','50100','50120');

/*MARGIN_ACQUISITIONS_DIVESTITURE*/

UPDATE WRT FROM 
$$STGDB.WI_DRVD_NCR_REV_FOR_BKG_RT WRT,
 $$STGDB.WI_DRVD_NCR_REV_BKG_RT WIRT,
 $$COMREFVWDB.N_PRODUCT NP
  SET DV_BKGS_CORP_BKG_FLAG = 'N',
 DV_REVENUE_RECOGNITION_FLG='N',
 DV_NET_SPREAD_FLG= 'N'
 WHERE WRT.TRANSACTION_SEQUENCE_ID_INT=WIRT.TRANSACTION_SEQUENCE_ID 
 AND WRT.GLOBAL_NAME=WIRT.GLOBAL_NAME
 AND WIRT.INVENTORY_ITEM_ID = NP.SK_INVENTORY_ITEM_ID_INT
   AND NP.DIVESTITURE_TYPE_CD <>'UNKNOWN'
  AND WIRT.ACCOUNT_CODE IN ('40111','50300','42710','42305')
AND WRT.DV_FISCAL_YEAR_MTH_NUMBER_INT IN (SELECT FISCAL_ID FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE);

COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_RT;


Source8 Name : SQ_EX_OM_XXNCR_REV_RT


Pre SQL : 



SQL Query : 
SELECT 
  WIOXRT.BATCH_ID,
  WIOXRT.ACCOUNTING_RULE_ID,
  WIOXRT.ACCOUNTING_RULE_NAME,
  WIOXRT.ACCOUNT_CLASS,
  WIOXRT.ACCOUNT_CODE,
  WIOXRT.ACCTD_AMOUNT,
  WIOXRT.ADJUSTMENT_ID,
  WIOXRT.ADJUSTMENT_NUMBER,
  WIOXRT.ADJUSTMENT_TYPE,
  WIOXRT.AMOUNT,
  WIOXRT.BILL_TO_CUSTOMER_ID,
  WIOXRT.BILL_TO_SITE_USE_ID,
  WIOXRT.CODE_COMBINATION_ID,
  WIOXRT.COGS_PERCENT,
  WIOXRT.COMMENTS,
  WIOXRT.CONTEXT,
  WIOXRT.CREATED_BY,
  WIOXRT.CREATION_DATE,
  WIOXRT.CUSTOMER_TRX_ID,
  WIOXRT.CUSTOMER_TRX_LINE_ID,
  WIOXRT.CUST_TRX_LINE_GL_DIST_ID,
  WIOXRT.DEFAULT_SC_FLAG,
  WIOXRT.EXTENDED_AMOUNT,
  WIOXRT.EXTRACT_TYPE,
  WIOXRT.FISCAL_ID,
  WIOXRT.FORWARD_REVERSE_FLAG,
  WIOXRT.FUNC_CURRENCY_CODE,
  WIOXRT.GES_UPDATE_DATE,
  WIOXRT.GLOBAL_NAME,
  WIOXRT.GL_DATE,
  WIOXRT.GL_POSTED_DATE,
  WIOXRT.GROUPING_ID,
  WIOXRT.INVENTORY_ITEM_ID,
  WIOXRT.INVOICE_CURRENCY_CODE,
  WIOXRT.INVOICE_PERCENT,
  WIOXRT.INVOICING_RULE_ID,
  WIOXRT.LAST_UPDATED_BY,
  WIOXRT.LAST_UPDATE_DATE,
  WIOXRT.LATEST_RECORD_FLAG,
  WIOXRT.SK_LINE_SEQ_ID_INT,
  WIOXRT.LINE_TYPE,
  WIOXRT.LINK_TO_CUST_TRX_LINE_ID,
  WIOXRT.ORDER_HEADER_ID,
  WIOXRT.ORDER_LINE_ID,
  WIOXRT.ORDER_NUMBER,
  WIOXRT.ORG_ID,
  WIOXRT.LINE_PERCENT,
  WIOXRT.PREVIOUS_CUSTOMER_TRX_ID,
  WIOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
  WIOXRT.QUOTA_FLAG,
  WIOXRT.REASON_CODE,
  WIOXRT.REBATE_AMOUNT,
  WIOXRT.REBATE_PERCENTAGE_ID,
  WIOXRT.REQUEST_ID,
  WIOXRT.RULE_START_DATE,
  WIOXRT.SALESREP_ID,
  WIOXRT.SALES_CREDIT_TYPE_ID,
  WIOXRT.SHIP_TO_CUSTOMER_ID,
  WIOXRT.SHIP_TO_SITE_USE_ID,
  WIOXRT.SOLD_TO_CUSTOMER_ID,
  WIOXRT.SCA_SOURCE_TYPE_CD,
  WIOXRT.SPLIT_PERCENT,
  WIOXRT.TERRITORY_ID,
  WIOXRT.TRANSACTION_DATE,
  WIOXRT.TRANSACTION_GROUPING_TYPE,
  WIOXRT.TRANSACTION_QUANTITY,
  WIOXRT.TRANSACTION_SEQUENCE_ID,
  WIOXRT.TRX_DATE,
  WIOXRT.TRX_NAME,
  WIOXRT.TRX_NUMBER,
  WIOXRT.TRX_TYPE,
  WIOXRT.UNIT_SELLING_PRICE,
  WIOXRT.UNIT_STANDARD_PRICE,
  WIOXRT.CREATE_DATETIME,
  WIOXRT.ACTION_CODE ,
 'RI' EXCEPTION_TYPE,
 WIOXRT.DV_TRANSACTION_KEY, 
 WIOXRT.DV_TRANSACTION_SOURCE_CD,
 WIOXRT.BK_SALES_CREDIT_TYPE_CODE  ,
 WIOXRT.SALES_REP_NUMBER     ,         
 WIOXRT.SALES_TERRITORY_KEY      ,
 WIOXRT.SALES_MOTION_CD /*Added as part of Oct-2017 release */
  FROM   
  $$STGDB.WI_OM_XXNCR_REV_RT WIOXRT
 WHERE
 NOT EXISTS (SELECT 1 FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_RT WDNRTFB
  WHERE WDNRTFB.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID)


Post SQL : 



Target8 Name : EX_OM_XXNCR_REV_RT1


Pre SQL : 
DELETE FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT;


Post SQL : 
COLLECT STATS ON $$EXCEPDB.EX_OM_XXNCR_REV_RT;