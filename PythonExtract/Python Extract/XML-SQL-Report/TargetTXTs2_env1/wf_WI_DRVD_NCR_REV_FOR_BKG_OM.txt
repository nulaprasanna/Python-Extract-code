ETL Name:	wf_WI_DRVD_NCR_REV_FOR_BKG_OM.XML


Session 1: 	s_m_WI_DRVD_NCR_REV_FOR_BKG_OM
Mapping 1: 	m_WI_DRVD_NCR_REV_FOR_BKG_OMm_WI_DRVD_NCR_REV_FOR_BKG_OM


Source1 Name : SQ_WI_DRVD_NCR_REV_TRX_1


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG ALL;


SQL Query : 
SELECT 
 BATCH_ID	 , 
 ACCOUNTING_RULE_ID	 , 
 ACCOUNTING_RULE_NAME	 , 
 ACCOUNT_CLASS	 , 
 ACCOUNT_CODE	 , 
 ACCTD_AMOUNT	 , 
 ADJUSTMENT_ID	 , 
 ADJUSTMENT_NUMBER	 , 
 ADJUSTMENT_TYPE	 , 
 AMOUNT	 , 
 BILL_TO_CUSTOMER_ID	 , 
 BILL_TO_SITE_USE_ID	 , 
 CODE_COMBINATION_ID	 , 
 COGS_PERCENT	 , 
 COMMENTS	 , 
 CONTEXT	 , 
 CREATED_BY	 , 
 CREATION_DATE	 , 
 CUSTOMER_TRX_ID	 , 
 CUSTOMER_TRX_LINE_ID	 , 
 CUST_TRX_LINE_GL_DIST_ID	 , 
 DEFAULT_SC_FLAG	 , 
 EXTENDED_AMOUNT	 , 
 EXTRACT_TYPE	 , 
 FISCAL_ID	 , 
 FORWARD_REVERSE_FLAG	 , 
 FUNC_CURRENCY_CODE	 , 
 GES_UPDATE_DATE	 , 
 GLOBAL_NAME	 , 
 GL_DATE	 , 
 GL_POSTED_DATE	 , 
 GROUPING_ID	 , 
 INVENTORY_ITEM_ID	 , 
 INVOICE_CURRENCY_CODE	 , 
 INVOICE_PERCENT	 , 
 INVOICING_RULE_ID	 , 
 LAST_UPDATED_BY	 , 
 LAST_UPDATE_DATE	 , 
 LATEST_RECORD_FLAG	 , 
 LINE_SEQ_ID	 , 
 LINE_TYPE	 , 
 LINK_TO_CUST_TRX_LINE_ID	 , 
 ORDER_HEADER_ID	 , 
 ORDER_LINE_ID	 , 
 ORDER_NUMBER	 , 
 ORG_ID	 , 
 LINE_PERCENT	 , 
 PREVIOUS_CUSTOMER_TRX_ID	 , 
 PREVIOUS_CUSTOMER_TRX_LINE_ID	 , 
 QUOTA_FLAG	 , 
 REASON_CODE	 , 
 REBATE_AMOUNT	 , 
 REBATE_PERCENTAGE_ID	 , 
 REQUEST_ID	 , 
 RULE_START_DATE	 , 
 SALESREP_ID	 , 
 SALES_CREDIT_TYPE_ID	 , 
 SHIP_TO_CUSTOMER_ID	 , 
 SHIP_TO_SITE_USE_ID	 , 
 SOLD_TO_CUSTOMER_ID	 , 
 SOURCE_TYPE	 , 
 SPLIT_PERCENT	 , 
 TERRITORY_ID	 , 
 TRANSACTION_DATE	 , 
 TRANSACTION_GROUPING_TYPE	 , 
 TRANSACTION_QUANTITY	 , 
 TRANSACTION_SEQUENCE_ID	 , 
 TRX_DATE	 , 
 TRX_NAME	 , 
 TRX_NUMBER	 , 
 TRX_TYPE	 , 
 UNIT_SELLING_PRICE	 , 
 UNIT_STANDARD_PRICE	 , 
 CREATE_DATETIME	 , 
 ACTION_CODE	 , 
 DV_TRANSACTION_SOURCE_CD	 , 
 DV_TRANSACTION_KEY,
 COALESCE( SMC.SALES_MOTION_CD, 'UNKNOWN' ) SALES_MOTION_CD
FROM
 $$STGDB.WI_DRVD_NCR_REV_TRX DRVD
 LEFT JOIN $$STGDB.WI_AR_SALES_MOTION_CHANGE SMC
  ON DRVD.ORDER_LINE_ID = SMC.SK_SO_LINE_ID_INT
 WHERE  GLOBAL_NAME IN ('UO','BO')


Post SQL : 



Target1 Name : WI_DRVD_NCR_REVENUE_TRX_BKG_1


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG;


Source2 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_rev_inv


Pre SQL : 
/* insert default records which will be used by Net Change , Reversal records for EVENT_TYPE =INSERT and OLD_DEFAULT_SC_FLG = Y  */

DELETE FROM $$STGDB.WI_BKG_SCA_NRT_TV WHERE SALES_CREDIT_ASSIGNMENT_KEY IN ( -9999 , -8888)
AND SCA_SOURCE_TYPE_CD = 'D'
AND SK_LINE_SEQ_ID_INT IN ( -9999 , -8888)
AND EP_SOURCE_LINE_ID_INT = -9999
AND EP_SK_SALESREP_ID_INT IN ( 2063 , 1872 )
AND EP_SK_SALES_CREDIT_TYPE_ID_INT = 1000
AND EP_SK_TERRITORY_ID_INT IN ( 1329 , 1161  )
AND BK_SALES_CREDIT_TYPE_CODE IN ( 'Direct Sales' );





INSERT INTO $$STGDB.WI_BKG_SCA_NRT_TV
(
SALES_CREDIT_ASSIGNMENT_KEY   ,
SCA_SOURCE_TYPE_CD            ,
SK_LINE_SEQ_ID_INT            ,
SS_CD                         ,
EP_SOURCE_LINE_ID_INT         ,
EP_SK_SALESREP_ID_INT         ,
SCA_SALES_COMMISSION_PCT      ,
START_TV_DTM                  ,
END_TV_DTM                    ,
SCA_SOURCE_COMMIT_DTM         ,
EDW_CREATE_DTM                ,
EDW_UPDATE_DTM                ,
RU_SALES_ORDER_LINE_KEY       ,
RU_AR_TRANSACTION_LINE_KEY    ,
EP_SK_SALES_CREDIT_TYPE_ID_INT,
EP_SK_TERRITORY_ID_INT        ,
QUOTA_FLAG                    ,
BK_SALES_CREDIT_TYPE_CODE     ,
BK_FISCAL_MONTH_NUMBER_INT    ,
BK_FISCAL_YEAR_NUMBER_INT     ,
DV_FISCAL_YEAR_MONTH_NUM_INT  ,


EVENT_TYPE                    ,
SALES_REP_NUMBER              ,
SALES_TERRITORY_KEY           
)
SELECT
 -9999   AS  SALES_CREDIT_ASSIGNMENT_KEY   ,
 'D'    AS  SCA_SOURCE_TYPE_CD            ,
 -9999   AS  SK_LINE_SEQ_ID_INT            ,
 'QTC'   AS  SS_CD                         ,
 -9999   AS  EP_SOURCE_LINE_ID_INT         ,
 2063   AS  EP_SK_SALESREP_ID_INT         ,
 100    AS  SCA_SALES_COMMISSION_PCT      ,
 '1900-01-01 00:00:00'  AS  START_TV_DTM                  ,
 '3500-01-01 00:00:00'  AS  END_TV_DTM                    ,
 CURRENT_TIMESTAMP(0)  AS  SCA_SOURCE_COMMIT_DTM         ,
 CURRENT_TIMESTAMP(0)  AS  EDW_CREATE_DTM                ,
 CURRENT_TIMESTAMP(0)  AS  EDW_UPDATE_DTM                ,
 -9999   AS  RU_SALES_ORDER_LINE_KEY       ,
 -9999   AS  RU_AR_TRANSACTION_LINE_KEY    ,
 1000   AS  EP_SK_SALES_CREDIT_TYPE_ID_INT,
 1329   AS  EP_SK_TERRITORY_ID_INT        ,
 'Y'    AS  QUOTA_FLAG                    ,
 'Direct Sales'       AS  BK_SALES_CREDIT_TYPE_CODE     ,
 NFISMN.BK_FISCAL_MONTH_NUMBER_INT  AS  BK_FISCAL_MONTH_NUMBER_INT    ,
 NFISMN.BK_FISCAL_YEAR_NUMBER_INT  AS  BK_FISCAL_YEAR_NUMBER_INT     ,
 EL.FISCAL_ID       AS  DV_FISCAL_YEAR_MONTH_NUM_INT  ,
 'INSERT'        AS  EVENT_TYPE ,
 '99998' AS SALES_REP_NUMBER    ,
73106 AS SALES_TERRITORY_KEY
 FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE EL
 INNER JOIN  $$COMREFVWDB.N_FISCAL_MONTH NFISMN  
 ON  EL.FISCAL_ID = ( (NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100) + NFISMN.BK_FISCAL_MONTH_NUMBER_INT )
UNION ALL
SELECT
 -8888  AS  SALES_CREDIT_ASSIGNMENT_KEY   ,
 'D'   AS  SCA_SOURCE_TYPE_CD            ,
 -8888  AS  SK_LINE_SEQ_ID_INT            ,
 'BV'  AS  SS_CD                         ,
 -9999  AS  EP_SOURCE_LINE_ID_INT         ,
 1872  AS  EP_SK_SALESREP_ID_INT         ,
 100   AS  SCA_SALES_COMMISSION_PCT      ,
 '1900-01-01 00:00:00'  AS  START_TV_DTM                  ,
 '3500-01-01 00:00:00'  AS  END_TV_DTM                    ,
 CURRENT_TIMESTAMP(0)  AS  SCA_SOURCE_COMMIT_DTM         ,
 CURRENT_TIMESTAMP(0)  AS  EDW_CREATE_DTM                ,
 CURRENT_TIMESTAMP(0)  AS  EDW_UPDATE_DTM                ,
 -8888  AS  RU_SALES_ORDER_LINE_KEY       ,
 -8888  AS  RU_AR_TRANSACTION_LINE_KEY    ,
 1000  AS  EP_SK_SALES_CREDIT_TYPE_ID_INT,
 1161  AS  EP_SK_TERRITORY_ID_INT        ,
 'Y'   AS  QUOTA_FLAG                    ,
 'Direct Sales'       AS  BK_SALES_CREDIT_TYPE_CODE     ,
 NFISMN.BK_FISCAL_MONTH_NUMBER_INT  AS  BK_FISCAL_MONTH_NUMBER_INT    ,
 NFISMN.BK_FISCAL_YEAR_NUMBER_INT  AS  BK_FISCAL_YEAR_NUMBER_INT     ,
 EL.FISCAL_ID       AS  DV_FISCAL_YEAR_MONTH_NUM_INT  ,
 'INSERT'        AS  EVENT_TYPE  ,
  '99998' AS SALES_REP_NUMBER    ,
73106 AS SALES_TERRITORY_KEY
 FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE EL
 INNER JOIN  $$COMREFVWDB.N_FISCAL_MONTH NFISMN  
 ON    EL.FISCAL_ID = ( (NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100) + NFISMN.BK_FISCAL_MONTH_NUMBER_INT ) ;


SQL Query : 
SELECT
2         AS BATCH_ID ,
COALESCE(SORA.RULE_ID,-999)        AS ACCOUNTING_RULE_ID ,
WI_NET.PD_ACCOUNTING_RULE_NAME      AS ACCOUNTING_RULE_NAME ,
WI_NET.ACCOUNT_CLASS_CODE           AS ACCOUNT_CLASS ,
NULL        AS ACCOUNT_CODE ,
WI_NET.DV_FUNC_AMT     AS ACCTD_AMOUNT ,
-9999        AS ADJUSTMENT_ID ,
NULL        AS ADJUSTMENT_NUMBER ,
NULL        AS ADJUSTMENT_TYPE ,
WI_NET.DV_TRX_AMT     AS AMOUNT ,
-999        AS BILL_TO_CUSTOMER_ID ,
-999        AS BILL_TO_SITE_USE_ID ,
NULL        AS CODE_COMBINATION_ID ,
NULL        AS COGS_PERCENT ,
NULL        AS COMMENTS ,
NULL        AS CONTEXT ,
2         AS CREATED_BY ,
WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE ,
COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)  AS CUSTOMER_TRX_ID ,
COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT ,-9999) AS CUSTOMER_TRX_LINE_ID ,
COALESCE(NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT,-9999) AS CUST_TRX_LINE_GL_DIST_ID ,
WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
NULL        AS EXTENDED_AMOUNT ,
CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN 'REV'
  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN 'INV'
END         AS  EXTRACT_TYPE ,
(WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
/*
CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN WI_NET.PD_FUNCTIONAL_CURRENCY_CODE
  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN NULL
END        AS  FUNC_CURRENCY_CODE ,
*/
WI_NET.PD_FUNCTIONAL_CURRENCY_CODE AS  FUNC_CURRENCY_CODE ,
current_timestamp(0)   AS GES_UPDATE_DATE ,
NSSC.GLOBAL_NAME             AS GLOBAL_NAME ,
WI_NET.GL_DATETIME                    AS GL_DATE ,
WI_NET.GL_POSTED_DATE                 AS GL_POSTED_DATE ,
NULL         AS GROUPING_ID ,
NP.SK_INVENTORY_ITEM_ID_INT    AS INVENTORY_ITEM_ID ,
NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
NULL         AS INVOICE_PERCENT ,
NULL         AS INVOICING_RULE_ID ,
2          AS LAST_UPDATED_BY ,
current_timestamp(0)     AS LAST_UPDATE_DATE ,
WI_NET.LAST_RECORD_FLAG               AS LATEST_RECORD_FLAG ,
WI_NET.SK_LINE_SEQ_ID_INT             AS SK_LINE_SEQ_ID_INT ,
/*
CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN NATL.BK_AR_TRX_LINE_TYPE
  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN NULL
END          AS LINE_TYPE ,
*/
WI_NET.LINE_TYPE_CODE AS LINE_TYPE, 
NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999)   AS ORDER_HEADER_ID ,
CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END       AS ORDER_LINE_ID ,
NSO.BK_SO_NUMBER_INT        AS ORDER_NUMBER ,
EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
NULL         AS LINE_PERCENT ,
NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
/* ESCT.QUOTA_FLAG       AS QUOTA_FLAG */

CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG
                ELSE WI_NET.QUOTA_FLAG
END as   QUOTA_FLAG ,
NULL         AS REASON_CODE ,
NULL         AS REBATE_AMOUNT ,
NULL         AS REBATE_PERCENTAGE_ID ,
CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999   ELSE 999 END  AS REQUEST_ID ,
WI_NET.RULE_START_DATETIME            AS RULE_START_DATE ,
/* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)       AS SALESREP_ID */ 

CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999)
END as    SALESREP_ID,
/* COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)   AS SALES_CREDIT_TYPE_ID */ 
CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) 
END as    SALES_CREDIT_TYPE_ID,
NULL         AS SHIP_TO_CUSTOMER_ID ,
-999         AS SHIP_TO_SITE_USE_ID ,
-999         AS SOLD_TO_CUSTOMER_ID ,
WI_NET.SCA_SOURCE_TYPE_CD             AS SCA_SOURCE_TYPE_CD ,
WI_NET.SALES_COMMISSION_PERCENTAGE    AS SPLIT_PERCENT ,
/* COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)      AS TERRITORY_ID */

CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
END as TERRITORY_ID ,
WRSNT.SCA_SOURCE_COMMIT_DTM     AS TRANSACTION_DATE ,
WI_NET.TRANSACTION_GROUPING_TYPE_CODE AS TRANSACTION_GROUPING_TYPE ,
/* CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN NULL
  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN WI_NET.DV_TRX_QTY 
END        AS  TRANSACTION_QUANTITY ,
*/
WI_NET.DV_TRX_QTY AS  TRANSACTION_QUANTITY ,
ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
NAT.AR_TRX_DATETIME    AS TRX_DATE ,
NULL       AS TRX_NAME ,
NAT.BK_AR_TRX_NUMBER   AS TRX_NUMBER ,
NATT.AR_TRX_TYPE_SHORT_CODE  AS TRX_TYPE ,
NULL       AS UNIT_SELLING_PRICE ,
NULL       AS UNIT_STANDARD_PRICE ,
current_timestamp(0)   AS CREATE_DATETIME ,
'I'        AS ACTION_CODE ,
WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
WI_NET.DV_TRANSACTION_KEY       AS DV_TRANSACTION_KEY,
WI_NET.SALES_MOTION_CD
FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET

INNER JOIN 
 ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
(
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
  union all   
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
  UNION ALL

  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
  UNION ALL

  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
  UNION ALL
  SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
  UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
  union all 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
  union all
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
  union all 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
  /* RCHETTRI : 11/18/2013 : ADDED TABLES */
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
      		 /*Added RTE Exception tables */
	  UNION ALL 
		SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_RT		
	  UNION ALL 
		SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT		
	   UNION ALL 
		SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT	
		/* CSPP VIP Changes */
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
UNION ALL   /* Added as part of Accruals Q2FY19 */ 
     SELECT MAX(BK_TRANSACTION_SEQ_ID_INT) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHG_REV_ACRL_XAAS 
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG
  UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
	 UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
 ) TMP
 ) SM_MAX
ON 1=1

INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
 ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE

INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
 ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
 AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME

INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
 ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY

INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
 ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
 on WI_NET.DV_TRANSACTION_KEY =  NATLGD.BK_AR_TRX_LINE_GL_DISTRIB_KEY

INNER JOIN $$COMREFVWDB.N_PRODUCT NP
 ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY    

INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
 ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
 ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY

INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
 ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
 AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY 
 
INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
 ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT          
 AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE   
 AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')

INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
 on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
 AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME

INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT             
 ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
 AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
 AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 


left outer join 
                (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                from  $$ETLVWDB.EL_SALES_REP
                                qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                ) ESR_REVERSE
                on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 

left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                
left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME

WHERE WI_NET.DV_TRANSACTION_SOURCE_CD IN ('REV','INV')
AND NSSC.GLOBAL_NAME IN ('UO','BO')


Post SQL : 



Target2 Name : WI_DRVD_NCR_REVENUE_TRX_BKG_rev_inv


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG;


Source3 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_aradj


Pre SQL : 



SQL Query : 
SELECT
2											AS	BATCH_ID	,
-999										AS	ACCOUNTING_RULE_ID	,
'UNKNOWN'										AS	ACCOUNTING_RULE_NAME	,
WI_NET.ACCOUNT_CLASS_CODE       			AS	ACCOUNT_CLASS	,
NULL										AS	ACCOUNT_CODE	,
WI_NET.DV_FUNC_AMT							AS	ACCTD_AMOUNT	,
COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)					AS	ADJUSTMENT_ID	,
NAAT.BK_AR_ADJ_NUMBER						AS	ADJUSTMENT_NUMBER	,
NATT.BK_AR_TRX_TYPE_CODE					AS	ADJUSTMENT_TYPE	,
WI_NET.DV_TRX_AMT							AS	AMOUNT,
-999								AS	BILL_TO_CUSTOMER_ID,
-999								AS	BILL_TO_SITE_USE_ID,
NULL								AS	CODE_COMBINATION_ID,
NULL								AS	COGS_PERCENT,
NULL								AS	COMMENTS,
NULL								AS	CONTEXT,
2									AS	CREATED_BY,
WI_NET.EDW_CREATE_DATETIME       	AS	CREATION_DATE,
COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT,-9999) 		AS	CUSTOMER_TRX_ID	,
COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999)	AS	CUSTOMER_TRX_LINE_ID	,
COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)			AS	CUST_TRX_LINE_GL_DIST_ID	,
WI_NET.DEFAULT_SC_FLG               AS	DEFAULT_SC_FLAG	,
NULL								AS	EXTENDED_AMOUNT	,
'AR_ADJUSTMENT'						AS	EXTRACT_TYPE	,
(WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT			AS	FISCAL_ID	,
WI_NET.FORWARD_REVERSE_CODE          			AS	FORWARD_REVERSE_FLAG	,
WI_NET.PD_FUNCTIONAL_CURRENCY_CODE   			AS	FUNC_CURRENCY_CODE	,
current_timestamp(0)							AS	GES_UPDATE_DATE	,
NSSC.GLOBAL_NAME             			AS	GLOBAL_NAME	,
WI_NET.GL_DATETIME                   			AS	GL_DATE	,
WI_NET.GL_POSTED_DATE                			AS	GL_POSTED_DATE	,
NULL									AS	GROUPING_ID	,
NP.SK_INVENTORY_ITEM_ID_INT				AS	INVENTORY_ITEM_ID	,
NAT.BK_TRXL_CURRENCY_CODE				AS	INVOICE_CURRENCY_CODE	,
NULL									AS	INVOICE_PERCENT	,
NULL									AS	INVOICING_RULE_ID	,
2										AS	LAST_UPDATED_BY	,
current_timestamp(0)					AS	LAST_UPDATE_DATE	,
WI_NET.LAST_RECORD_FLAG              			AS	LATEST_RECORD_FLAG	,
WI_NET.SK_LINE_SEQ_ID_INT            			AS	SK_LINE_SEQ_ID_INT	,
WI_NET.LINE_TYPE_CODE									AS	LINE_TYPE	,
NULL									AS	LINK_TO_CUST_TRX_LINE_ID	,
COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999) 		AS	ORDER_HEADER_ID	,
CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR   NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END       			AS	ORDER_LINE_ID	,
NSO.BK_SO_NUMBER_INT           			AS	ORDER_NUMBER	,
EOUGC.SK_ORGANIZATION_ID_INT			AS	ORG_ID	,
NULL									AS	LINE_PERCENT	,
NULL									AS	PREVIOUS_CUSTOMER_TRX_ID	,
NULL									AS	PREVIOUS_CUSTOMER_TRX_LINE_ID	,
/* ESCT.QUOTA_FLAG     AS QUOTA_FLAG */
CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG
                ELSE WI_NET.QUOTA_FLAG
END as   QUOTA_FLAG ,
NULL									AS	REASON_CODE	,
NULL									AS	REBATE_AMOUNT	,
NULL									AS	REBATE_PERCENTAGE_ID	,
CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999 ELSE 999 END  		AS	REQUEST_ID	,
cast( NULL	as timestamp(0))			AS	RULE_START_DATE	,
/* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)  AS SALESREP_ID */
CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999)
END as    SALESREP_ID ,
/*COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)     AS SALES_CREDIT_TYPE_ID */
CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) 
END as    SALES_CREDIT_TYPE_ID ,
NULL			AS	SHIP_TO_CUSTOMER_ID	,
-999			AS	SHIP_TO_SITE_USE_ID	,
-999			AS	SOLD_TO_CUSTOMER_ID	,
WI_NET.SCA_SOURCE_TYPE_CD            			AS	SCA_SOURCE_TYPE_CD	,
WI_NET.SALES_COMMISSION_PERCENTAGE   			AS	SPLIT_PERCENT	,
/*COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT ,-999)          AS TERRITORY_ID */
CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
END as TERRITORY_ID ,
WRSNT.SCA_SOURCE_COMMIT_DTM            AS TRANSACTION_DATE ,
WI_NET.TRANSACTION_GROUPING_TYPE_CODE			AS	TRANSACTION_GROUPING_TYPE	,
WI_NET.DV_TRX_QTY								AS	TRANSACTION_QUANTITY	,
ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID	  AS	TRANSACTION_SEQUENCE_ID	,
NAT.AR_TRX_DATETIME								AS	TRX_DATE	,
NULL											AS	TRX_NAME	,
NAT.BK_AR_TRX_NUMBER							AS	TRX_NUMBER	,
NATT.AR_TRX_TYPE_SHORT_CODE 					AS	TRX_TYPE	,
NULL AS	UNIT_SELLING_PRICE	,
NULL AS	UNIT_STANDARD_PRICE	,
current_timestamp(0) AS	CREATE_DATETIME	,
'I'	AS	ACTION_CODE	,
WI_NET.DV_TRANSACTION_SOURCE_CD AS	DV_TRANSACTION_SOURCE_CD	,
WI_NET.DV_TRANSACTION_KEY AS DV_TRANSACTION_KEY,
WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD
FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
INNER JOIN 
 ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
(
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
  union all   
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
  UNION ALL

  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
  UNION ALL

  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
  UNION ALL
  SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
  UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
  union all 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
  union all
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
  union all 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
  
  /* RCHETTRI : 11/18/2013 : ADDED TABLES */
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
/* CSPP VIP Changes */
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
 UNION ALL   /* Added as part of Accruals Q2FY19 */ 
     SELECT MAX(BK_TRANSACTION_SEQ_ID_INT) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHG_REV_ACRL_XAAS 
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG
  UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG 
	 UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
 ) TMP
 ) SM_MAX
ON 1=1

INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
	ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE

INNER JOIN $$ETLVWDB.SM_AR_ADJUSTMENT_TRX SAAT
	on SAAT.AR_ADJUSTMENT_KEY =  WI_NET.DV_TRANSACTION_KEY		
	
INNER JOIN $$FINLGLVWDB.N_AR_ADJUSTMENT_TRX NAAT
	on NAAT.SK_ADJUSTMENT_ID_INT = SAAT.SK_ADJUSTMENT_ID_INT
	AND NAAT.SS_CODE = SAAT.SS_CD	


INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
	ON WI_NET.AR_TRX_KEY = NAT.AR_TRX_KEY

JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
	ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY	
	
INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
	ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
	AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
	AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE	
	
INNER JOIN $$COMREFVWDB.N_PRODUCT NP
	ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY   
	
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
	ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY	
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
	ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY	
	
INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
	ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
	AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY 	

INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
	ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT          
	AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
	AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')

INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
	on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
	AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME	


left outer join 
                (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                from  $$ETLVWDB.EL_SALES_REP
                                qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                ) ESR_REVERSE
                on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 

left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                
left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME

WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'AR_ADJUSTMENT'

AND NSSC.GLOBAL_NAME IN ('UO','BO')


Post SQL : 



Target3 Name : WI_DRVD_NCR_REVENUE_TRX_BKG_aradj


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG;


Source4 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_rae_rev


Pre SQL : 



SQL Query : 
SELECT
2            AS  BATCH_ID ,
COALESCE(SORA.RULE_ID ,-999)          AS ACCOUNTING_RULE_ID ,
WI_NET.PD_ACCOUNTING_RULE_NAME          AS ACCOUNTING_RULE_NAME ,
WI_NET.ACCOUNT_CLASS_CODE               AS ACCOUNT_CLASS ,
NULL           AS ACCOUNT_CODE ,
WI_NET.DV_FUNC_AMT        AS ACCTD_AMOUNT ,
COALESCE(SRNR.SK_NET_REVENUE_ID,-9999)       AS  ADJUSTMENT_ID ,
EOXRNR.SCHEDULE_LINE_ID       AS ADJUSTMENT_NUMBER ,
'RAE_REVENUE'         AS ADJUSTMENT_TYPE ,
WI_NET.DV_TRX_AMT        AS AMOUNT ,
-999           AS BILL_TO_CUSTOMER_ID ,
-999           AS BILL_TO_SITE_USE_ID ,
NULL           AS CODE_COMBINATION_ID ,
NULL           AS COGS_PERCENT ,
NULL           AS COMMENTS ,
NULL           AS CONTEXT ,
2            AS CREATED_BY ,
WI_NET.EDW_CREATE_DATETIME           AS CREATION_DATE ,
COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)     AS CUSTOMER_TRX_ID ,
COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999)    AS CUSTOMER_TRX_LINE_ID ,
-9999           AS CUST_TRX_LINE_GL_DIST_ID ,
WI_NET.DEFAULT_SC_FLG                   AS DEFAULT_SC_FLAG ,
NULL           AS EXTENDED_AMOUNT ,
'REV'           AS EXTRACT_TYPE ,
(WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
WI_NET.PD_FUNCTIONAL_CURRENCY_CODE      AS FUNC_CURRENCY_CODE ,
current_timestamp(0)       AS GES_UPDATE_DATE ,
NSSC.GLOBAL_NAME               AS GLOBAL_NAME ,
WI_NET.GL_DATETIME                      AS GL_DATE ,
WI_NET.GL_POSTED_DATE                   AS GL_POSTED_DATE ,
NULL           AS GROUPING_ID ,
NP.SK_INVENTORY_ITEM_ID_INT      AS INVENTORY_ITEM_ID ,
NAT.BK_TRXL_CURRENCY_CODE      AS INVOICE_CURRENCY_CODE ,
NULL           AS INVOICE_PERCENT ,
NULL           AS INVOICING_RULE_ID ,
2            AS LAST_UPDATED_BY ,
current_timestamp(0)       AS LAST_UPDATE_DATE ,
WI_NET.LAST_RECORD_FLAG                 AS LATEST_RECORD_FLAG ,
WI_NET.SK_LINE_SEQ_ID_INT               AS SK_LINE_SEQ_ID_INT ,
WI_NET.LINE_TYPE_CODE           AS LINE_TYPE ,
NULL           AS LINK_TO_CUST_TRX_LINE_ID ,
COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT,-9999)      AS ORDER_HEADER_ID ,
CASE WHEN (NSOL.SK_SO_LINE_ID_INT IS NULL OR NSOL.SK_SO_LINE_ID_INT =0) THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END AS ORDER_LINE_ID ,
NSO.BK_SO_NUMBER_INT        AS ORDER_NUMBER ,
EOUGC.SK_ORGANIZATION_ID_INT     AS ORG_ID ,
CAST(EOXRNR.ATTRIBUTE2 AS DECIMAL(18,2))   AS LINE_PERCENT ,
NULL           AS PREVIOUS_CUSTOMER_TRX_ID ,
NULL           AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG
                ELSE WI_NET.QUOTA_FLAG


END as   QUOTA_FLAG,
NULL           AS REASON_CODE ,
NULL           AS REBATE_AMOUNT ,
NULL           AS REBATE_PERCENTAGE_ID ,
COALESCE((CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN NULL   ELSE 999 END) ,-999) AS REQUEST_ID,
WI_NET.RULE_START_DATETIME              AS RULE_START_DATE ,
CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999)


END as    SALESREP_ID ,
CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) 


END as    SALES_CREDIT_TYPE_ID ,
NULL           AS SHIP_TO_CUSTOMER_ID ,
-999           AS SHIP_TO_SITE_USE_ID ,
-999           AS SOLD_TO_CUSTOMER_ID ,
WI_NET.SCA_SOURCE_TYPE_CD               AS SCA_SOURCE_TYPE_CD ,
WI_NET.SALES_COMMISSION_PERCENTAGE      AS SPLIT_PERCENT ,
CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 


END as TERRITORY_ID ,
WRSNT.SCA_SOURCE_COMMIT_DTM      AS TRANSACTION_DATE ,
WI_NET.TRANSACTION_GROUPING_TYPE_CODE   AS TRANSACTION_GROUPING_TYPE ,
WI_NET.DV_TRX_QTY        AS TRANSACTION_QUANTITY ,
ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
NAT.AR_TRX_DATETIME        AS TRX_DATE ,
NULL           AS TRX_NAME ,
NAT.BK_AR_TRX_NUMBER       AS TRX_NUMBER ,
NATT.AR_TRX_TYPE_SHORT_CODE      AS TRX_TYPE ,
NULL           AS UNIT_SELLING_PRICE ,
NULL           AS UNIT_STANDARD_PRICE ,
current_timestamp(0)       AS CREATE_DATETIME ,
'I'            AS ACTION_CODE ,
WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
WI_NET.DV_TRANSACTION_KEY               AS DV_TRANSACTION_KEY,
WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD
FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
INNER JOIN 
 ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
(
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
  union all   
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
  UNION ALL

  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
  UNION ALL

  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
  UNION ALL
  SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
  UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
  union all 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
  union all
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
  union all 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
  /* RCHETTRI : 11/18/2013 : ADDED TABLES */
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
/* CSPP VIP Changes */
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
UNION ALL   /* Added as part of Accruals Q2FY19 */ 
     SELECT MAX(BK_TRANSACTION_SEQ_ID_INT) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHG_REV_ACRL_XAAS 
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG
  UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
	 UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/

) TMP
 ) SM_MAX
ON 1=1

INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
 ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
 
INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
 ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
 AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME 

INNER JOIN $$ETLVWDB.SM_RAE_NET_REVENUE SRNR
 on SRNR.NET_REVENUE_KEY = WI_NET.DV_TRANSACTION_KEY
 
INNER JOIN $$ETLVWDB.EL_OM_XXCFI_RAE_NET_REVENUE EOXRNR
 ON EOXRNR.NET_REVENUE_ID = SRNR.SK_NET_REVENUE_ID
 AND EOXRNR.GLOBAL_NAME = NSSC.GLOBAL_NAME 
 AND EOXRNR.SCHEDULE_LINE_ID = SRNR.SCHEDULE_LINE_ID
INNER JOIN  $$FINLGLVWDB.N_AR_TRX NAT
 ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
 ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT                             
 ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
 AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
 AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
 
INNER JOIN $$COMREFVWDB.N_PRODUCT NP
 ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY   

INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
 ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY 
INNER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
 ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY
 
INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
 ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
 AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY  

INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
 ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT          
 AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
 AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')

INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
 on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
 AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME 
 
 left outer join 
                (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                from  $$ETLVWDB.EL_SALES_REP
                                qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                ) ESR_REVERSE
                on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 

left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                
left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME


WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'RAE_REVENUE'

AND NSSC.GLOBAL_NAME IN ('UO','BO')


Post SQL : 



Target4 Name : WI_DRVD_NCR_REVENUE_TRX_BKG_rae_rev


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG;


Source5 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_rae_cogs


Pre SQL : 



SQL Query : 
SELECT
2									AS		BATCH_ID	,
COALESCE(SORA.RULE_ID 	,-999)					AS 		ACCOUNTING_RULE_ID	,
WI_NET.PD_ACCOUNTING_RULE_NAME      AS		ACCOUNTING_RULE_NAME	,
WI_NET.ACCOUNT_CLASS_CODE           AS		ACCOUNT_CLASS	,
NULL	       						AS		ACCOUNT_CODE	,
WI_NET.DV_FUNC_AMT					AS		ACCTD_AMOUNT	,
COALESCE(SRCP.SK_COGS_PERCENT_ID,-9999)				AS		ADJUSTMENT_ID	,
EOXRCP.SCHEDULE_LINE_ID				AS		ADJUSTMENT_NUMBER	,
'RAE_COGS'							AS		ADJUSTMENT_TYPE	,
WI_NET.DV_TRX_AMT					AS	AMOUNT	,
-999								AS	BILL_TO_CUSTOMER_ID	,
-999								AS	BILL_TO_SITE_USE_ID	,
NULL								AS	CODE_COMBINATION_ID	,
CASE WHEN EOXRCP.ATTRIBUTE13 = 'Y' THEN
    CASE WHEN   SUBSTR(NLGA_VW.BK_FINANCIAL_ACCOUNT_CODE,1,2) = '12' THEN 0
      ELSE EOXRCP.COGS_PERCENT
    END
  ELSE EOXRCP.COGS_PERCENT
END 								AS	COGS_PERCENT	,
NULL								AS	COMMENTS	,
NULL								AS	CONTEXT	,
2									AS	CREATED_BY	,
WI_NET.EDW_CREATE_DATETIME       	AS	CREATION_DATE	,
COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT,-9999) 		AS	CUSTOMER_TRX_ID	,
COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999)	AS	CUSTOMER_TRX_LINE_ID	,
-9999								AS	CUST_TRX_LINE_GL_DIST_ID	,
WI_NET.DEFAULT_SC_FLG               AS	DEFAULT_SC_FLAG	,
NULL								AS	EXTENDED_AMOUNT	,
'REV'								AS	EXTRACT_TYPE	,
(WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT			AS	FISCAL_ID	,
WI_NET.FORWARD_REVERSE_CODE          			AS	FORWARD_REVERSE_FLAG	,
WI_NET.PD_FUNCTIONAL_CURRENCY_CODE   			AS	FUNC_CURRENCY_CODE	,
current_timestamp(0)							AS	GES_UPDATE_DATE	,
NSSC.GLOBAL_NAME           			AS	 GLOBAL_NAME	,
WI_NET.GL_DATETIME                   			AS	GL_DATE	,
WI_NET.GL_POSTED_DATE                			AS	GL_POSTED_DATE	,
NULL											AS	GROUPING_ID	,
NP.SK_INVENTORY_ITEM_ID_INT			AS	INVENTORY_ITEM_ID	,
NAT.BK_TRXL_CURRENCY_CODE			AS	INVOICE_CURRENCY_CODE	,
NULL								AS	INVOICE_PERCENT	,
NULL								AS	INVOICING_RULE_ID	,
2									AS	LAST_UPDATED_BY	,
current_timestamp(0)				AS	LAST_UPDATE_DATE	,
WI_NET.LAST_RECORD_FLAG              			AS	LATEST_RECORD_FLAG	,
WI_NET.SK_LINE_SEQ_ID_INT            			AS	SK_LINE_SEQ_ID_INT	,
WI_NET.LINE_TYPE_CODE							AS	LINE_TYPE	,
NULL								AS	LINK_TO_CUST_TRX_LINE_ID	,
COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT,-9999)  	AS	ORDER_HEADER_ID	,
CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR  NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END     		AS	ORDER_LINE_ID	,
NSO.BK_SO_NUMBER_INT   				AS	ORDER_NUMBER	,
EOUGC.SK_ORGANIZATION_ID_INT		AS	ORG_ID	,
NULL								AS	LINE_PERCENT	,
NULL								AS	PREVIOUS_CUSTOMER_TRX_ID	,
NULL								AS	PREVIOUS_CUSTOMER_TRX_LINE_ID	,

/* ESCT.QUOTA_FLAG     AS QUOTA_FLAG */
CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG
                ELSE WI_NET.QUOTA_FLAG
END as   QUOTA_FLAG ,
NULL								AS	REASON_CODE	,
NULL								AS	REBATE_AMOUNT	,
NULL								AS	REBATE_PERCENTAGE_ID	,
CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999   ELSE 999 END 			AS	REQUEST_ID	,
WI_NET.RULE_START_DATETIME          AS	RULE_START_DATE	,
/* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)  AS SALESREP_ID */
CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999)
END as    SALESREP_ID ,

/*COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)     AS SALES_CREDIT_TYPE_ID */
CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) 
END as    SALES_CREDIT_TYPE_ID ,
NULL								AS	SHIP_TO_CUSTOMER_ID	,
-999								AS	SHIP_TO_SITE_USE_ID	,
-999								AS	SOLD_TO_CUSTOMER_ID	,
WI_NET.SCA_SOURCE_TYPE_CD           AS	SCA_SOURCE_TYPE_CD	,
WI_NET.SALES_COMMISSION_PERCENTAGE  AS	SPLIT_PERCENT	,
/*COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT ,-999)          AS TERRITORY_ID */
CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
END as TERRITORY_ID ,
WRSNT.SCA_SOURCE_COMMIT_DTM         AS	TRANSACTION_DATE	,
WI_NET.TRANSACTION_GROUPING_TYPE_CODE			AS	TRANSACTION_GROUPING_TYPE	,
DV_TRX_QTY							AS	TRANSACTION_QUANTITY	,
ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID	  AS	TRANSACTION_SEQUENCE_ID	,
NAT.AR_TRX_DATETIME					AS	TRX_DATE	,
NULL								AS	TRX_NAME	,
NAT.BK_AR_TRX_NUMBER				AS	TRX_NUMBER	,
NATT.AR_TRX_TYPE_SHORT_CODE 		AS	TRX_TYPE	,
NULL								AS	UNIT_SELLING_PRICE	,
NULL								AS	UNIT_STANDARD_PRICE	,
current_timestamp(0)				AS	CREATE_DATETIME	,
'I'									AS	ACTION_CODE	,
WI_NET.DV_TRANSACTION_SOURCE_CD     AS	DV_TRANSACTION_SOURCE_CD	,
WI_NET.DV_TRANSACTION_KEY           AS	DV_TRANSACTION_KEY,
WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD	
FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
INNER JOIN 
 ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
(
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
  union all   
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
  UNION ALL

  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
  UNION ALL

  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
  UNION ALL
  SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
  UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
  union all 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
  union all
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
  union all 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
  /* RCHETTRI : 11/18/2013 : ADDED TABLES */
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
/* CSPP VIP Changes */
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
UNION ALL   /* Added as part of Accruals Q2FY19 */ 
     SELECT MAX(BK_TRANSACTION_SEQ_ID_INT) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHG_REV_ACRL_XAAS 
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG
     UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG
  UNION ALL
     SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
	 UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
 ) TMP
 ) SM_MAX
ON 1=1

INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
	ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
	
INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
	ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
	AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME		

INNER JOIN $$ETLVWDB.SM_RAE_COGS_PERCENT SRCP
	on SRCP.COGS_PERCENT_KEY= WI_NET.DV_TRANSACTION_KEY	
	
INNER JOIN   $$ETLVWDB.EL_OM_XXCFI_RAE_COGS_PERCNT EOXRCP
	ON SRCP.SK_COGS_PERCENT_ID      = EOXRCP.COGS_PERCENT_ID
	AND  NSSC.GLOBAL_NAME = EOXRCP.GLOBAL_NAME		
		
INNER JOIN 
	(
		SELECT NGLA.SK_CODE_COMBINATION_ID_INT, NGLA.SS_CODE , NGLA.BK_FINANCIAL_ACCOUNT_CODE 
		FROM $$FINLGLVWDB. N_GENERAL_LEDGER_ACCOUNT NGLA
		GROUP BY NGLA.SK_CODE_COMBINATION_ID_INT, NGLA.SS_CODE , NGLA.BK_FINANCIAL_ACCOUNT_CODE 
	) NLGA_VW
	ON EOXRCP.CODE_COMBINATION_ID    = NLGA_VW.SK_CODE_COMBINATION_ID_INT
	AND NSSC.SOURCE_SYSTEM_CODE = NLGA_VW.SS_CODE

INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
	ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY
INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
	ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT                             
	ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
	AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
	AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE	

INNER JOIN $$COMREFVWDB.N_PRODUCT NP
	ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY 

INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
	ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY
INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
	ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY	
INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
	ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
	AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY	
	
INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
	ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT          
	AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
	AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')

INNER JOIN  $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
	on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
	AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME
	
left outer join 
                (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                from  $$ETLVWDB.EL_SALES_REP
                                qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                ) ESR_REVERSE
                on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 

left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                
left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME
 
WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'RAE_COGS'
AND NSSC.GLOBAL_NAME IN('UO','BO')


Post SQL : 



Target5 Name : WI_DRVD_NCR_REVENUE_TRX_BKG_rae_cogs


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG;

UPDATE wk
FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG wk,
(SELECT TRANSACTION_SEQUENCE_ID, GLOBAL_NAME FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG   WHERE (ORDER_LINE_ID,GLOBAL_NAME) IN
(SELECT DISTINCT ORDER_LINE_ID,GLOBAL_NAME FROM  $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
WHERE FISCAL_ID = (SELECT  NFM.BK_FISCAL_YEAR_NUMBER_INT*100 + NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_id  
                  FROM $$comrefvwdb.n_fiscal_month nfm, $$etlvwdb.EL_AR_MONTH_PROCESS_DATE el
                  WHERE el.end_date + 1 BETWEEN nfm.fiscal_month_start_date AND nfm.fiscal_month_end_date)
AND TRANSACTION_GROUPING_TYPE     <> 'O'
AND FORWARD_REVERSE_FLAG          = 'F'
AND LATEST_RECORD_FLAG       =        'Y'
AND SOURCE_TYPE            = 'O')
AND  TRANSACTION_GROUPING_TYPE     <> 'O'
AND FORWARD_REVERSE_FLAG     = 'R'
AND LATEST_RECORD_FLAG       =       'N'
AND SOURCE_TYPE            = 'O'
AND  FISCAL_ID = (SELECT fiscal_id  FROM  $$etlvwdb.EL_AR_MONTH_PROCESS_DATE)
) x,
(SELECT NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_month_id,  NFM.BK_FISCAL_YEAR_NUMBER_INT AS fiscal_year_id,  
NFM.BK_FISCAL_YEAR_NUMBER_INT*100 + NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_id 
FROM $$comrefvwdb.n_fiscal_month nfm, $$etlvwdb.EL_AR_MONTH_PROCESS_DATE el
WHERE el.end_date + 1 BETWEEN nfm.fiscal_month_start_date AND nfm.fiscal_month_end_date
) y
SET 
FISCAL_ID  = y.fiscal_id
WHERE wk.TRANSACTION_SEQUENCE_ID = x.TRANSACTION_SEQUENCE_ID
AND wk.GLOBAL_NAME = x.GLOBAL_NAME
AND (CURRENT_DATE = (SELECT END_DATE FROM $$etlvwdb.EL_AR_MONTH_PROCESS_DATE)
                OR CURRENT_DATE >= (SELECT END_DATE FROM $$etlvwdb.EL_AR_MONTH_PROCESS_DATE) );
                                                                

UPDATE wk
FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG wk,
(SELECT TRANSACTION_SEQUENCE_ID, GLOBAL_NAME FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG    WHERE (CUSTOMER_TRX_LINE_ID,GLOBAL_NAME) IN
(SELECT DISTINCT CUSTOMER_TRX_LINE_ID,GLOBAL_NAME FROM  $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG 
WHERE FISCAL_ID = (SELECT  NFM.BK_FISCAL_YEAR_NUMBER_INT*100 + NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_id  
                    FROM $$comrefvwdb.n_fiscal_month nfm, $$etlvwdb.EL_AR_MONTH_PROCESS_DATE el
                    WHERE el.end_date + 1 BETWEEN nfm.fiscal_month_start_date AND nfm.fiscal_month_end_date)
AND TRANSACTION_GROUPING_TYPE     <> 'O'
AND FORWARD_REVERSE_FLAG          = 'F'
AND LATEST_RECORD_FLAG       =        'Y'
AND SOURCE_TYPE            <> 'O')
AND  TRANSACTION_GROUPING_TYPE     <> 'O'
AND FORWARD_REVERSE_FLAG  = 'R'
AND LATEST_RECORD_FLAG       =       'N'
AND SOURCE_TYPE            <> 'O'
AND  FISCAL_ID = (SELECT fiscal_id  FROM  $$etlvwdb.EL_AR_MONTH_PROCESS_DATE)
) x,
(SELECT NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_month_id,  NFM.BK_FISCAL_YEAR_NUMBER_INT AS fiscal_year_id,  
NFM.BK_FISCAL_YEAR_NUMBER_INT*100 + NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_id 
FROM $$comrefvwdb.n_fiscal_month nfm, $$etlvwdb.EL_AR_MONTH_PROCESS_DATE el
WHERE el.end_date + 1 BETWEEN nfm.fiscal_month_start_date AND nfm.fiscal_month_end_date
) y
SET 
FISCAL_ID  = y.fiscal_id
WHERE wk.TRANSACTION_SEQUENCE_ID = x.TRANSACTION_SEQUENCE_ID
AND wk.GLOBAL_NAME = x.GLOBAL_NAME
AND (CURRENT_DATE = (SELECT END_DATE FROM $$etlvwdb.EL_AR_MONTH_PROCESS_DATE)
                OR CURRENT_DATE >= (SELECT END_DATE FROM $$etlvwdb.EL_AR_MONTH_PROCESS_DATE) );


Source6 Name : SQ_WI_OM_XXNCR_REVENUE_TRX_P_2


Pre SQL : 
DELETE FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P EXORT
WHERE (EXORT.GLOBAL_NAME ,EXORT.DV_TRANSACTION_KEY,EXORT.DV_TRANSACTION_SOURCE_CD,EXORT.CUSTOMER_TRX_LINE_ID,EXORT.FISCAL_ID ) IN
( SELECT STOXRT.GLOBAL_NAME ,STOXRT.DV_TRANSACTION_KEY, STOXRT.DV_TRANSACTION_SOURCE_CD,STOXRT.CUSTOMER_TRX_LINE_ID,STOXRT.FISCAL_ID
 FROM $$STGDB.WI_DRVD_NCR_REV_TRX STOXRT
 );
 
DELETE FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P EXORT
WHERE (EXORT.GLOBAL_NAME ,EXORT.DV_TRANSACTION_KEY,EXORT.DV_TRANSACTION_SOURCE_CD,EXORT.CUSTOMER_TRX_LINE_ID, EXORT.FISCAL_ID ) IN
( SELECT STOXRT.GLOBAL_NAME ,STOXRT.DV_TRANSACTION_KEY, STOXRT.DV_TRANSACTION_SOURCE_CD,STOXRT.CUSTOMER_TRX_LINE_ID , STOXRT.FISCAL_ID 
 FROM $$STGDB.WI_DRVD_NCR_REV_TRX STOXRT
  UNION
  SELECT NSSC.GLOBAL_NAME , WDNRTFBKG.DV_TRANSACTION_KEY,WDNRTFBKG.DV_TRANSACTION_SOURCE_CD,NATL.SK_CUSTOMER_TRX_LINE_ID_LINT, WDNRTFBKG.DV_FISCAL_YEAR_MTH_NUMBER_INT 
 FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM WDNRTFBKG ,
  $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC, $$FINLGLVWDB.N_AR_TRX_LINE NATL
 WHERE WDNRTFBKG.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE 
 AND WDNRTFBKG.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY);



UPDATE DRVD
FROM
 $$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD ,
 $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P EX ,
 $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC, 
 $$ETLVWDB.BKG_PROCESS_DT_CNTRL BKGPDT
SET 
 PROCESS_DATE   = BKGPDT.PROCESS_DATE ,
 EDW_UPDATE_USER = USER ,
 EDW_UPDATE_DATETIME  = CURRENT_TIMESTAMP(0)
WHERE
 DRVD.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
 AND DRVD.TRANSACTION_SEQUENCE_ID_INT = EX.TRANSACTION_SEQUENCE_ID       
 AND NSSC.GLOBAL_NAME = EX.GLOBAL_NAME
 AND EX.EXCEPTION_TYPE   = 'FT'
 AND EX.FISCAL_ID = BKGPDT.FISCAL_YEAR_MTH_NUMBER_INT;
 
 
DELETE FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P EX 
WHERE EX.EXCEPTION_TYPE   = 'FT'
AND EX.FISCAL_ID  IN ( SELECT FISCAL_YEAR_MTH_NUMBER_INT FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL);
 
 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REV_TRX;

DELETE FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P ALL;


SQL Query : 
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD,
STOXRT.SALES_MOTION_CD
FROM 
 $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG STOXRT 
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL  
 ON (EORCTL.CUSTOMER_TRX_LINE_ID = STOXRT.CUSTOMER_TRX_LINE_ID
 AND EORCTL.GLOBAL_NAME = STOXRT.GLOBAL_NAME)

LEFT OUTER JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
 ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
 
 
INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
 ON (SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID)
INNER JOIN $$ETLVWDB.SM_AR_TRX  SMARTRX
 ON (  SMARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
 AND  SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE)
INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX   
 ON  ( NARTRX.AR_TRX_KEY = SMARTRX.AR_TRX_KEY)
 INNER JOIN   $$FINLGLVWDB.N_AR_BATCH_SOURCE NBS
ON   ( NBS.AR_BATCH_SOURCE_KEY =NARTRX.AR_BATCH_SOURCE_KEY  )
INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SATL    
 ON (SATL.SK_CUSTOMER_TRX_LINE_ID_LINT = STOXRT.CUSTOMER_TRX_LINE_ID
 AND SATL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
 ON (SATL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT    
 ON     (NATT.BK_COMPANY_CODE = NARTRX.BK_COMPANY_CODE 
 AND NATT.BK_SET_OF_BOOKS_KEY = NARTRX.BK_SET_OF_BOOKS_KEY 
 AND NATT.BK_AR_TRX_TYPE_CODE = NARTRX.BK_AR_TRX_TYPE_CODE)
INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT  
 ON (EORCT.CUSTOMER_TRX_ID = NARTRX.SK_CUSTOMER_TRX_ID_LINT
 AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO   
 ON (STOXRT.ORDER_HEADER_ID = NSO.SK_SALES_ORDER_HEADER_ID_INT
 AND NSSC.SOURCE_SYSTEM_CODE = NSO.SS_CODE) 
WHERE 
(
 STOXRT.EXTRACT_TYPE = 'INV'
 OR ( STOXRT.EXTRACT_TYPE ='REV'

   AND (  COALESCE(SORR.NAME,'Immediate') NOT LIKE '%VARIABLE%' 
     AND UPPER(COALESCE(SORR.NAME,'Immediate')) NOT IN ('DAILY RATES') 
    ) 
  )
)
 AND (
  (NATT.AR_TRX_TYPE_SHORT_CODE IN ('CM','DM','INV')
  AND STOXRT.REQUEST_ID = -999) 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE = 'INV'  AND STOXRT.REQUEST_ID <> -999 
  AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY' OR 
(COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY'  /*Added OR : TNC Feb 2020 Release*/ )) 
  /*Added OR : TNC Feb 2020 Release*/ )
  AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Service Invoice') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 
  AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY' OR 
(COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY'  /*Added OR : TNC Feb 2020 Release*/ ))
 )   /*Added OR : TNC Feb 2020 Release*/ 
  AND NSO.SALES_ORDER_CATEGORY_TYPE='RETURN') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 
  AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY' OR 
(COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY'  /*Added OR : TNC Feb 2020 Release*/ )) 
   /*Added OR : TNC Feb 2020 Release*/ )
  AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Product Credit Memo') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'INV'  AND STOXRT.REQUEST_ID <> -999
  AND  COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'METRIX') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
  AND ( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN('SALES ADJUSTMENTS','ICMS-ADJ','DCA TWO-TIER' ,'COOP TWO-TIER') 
 AND NATL.TRX_LINE_SRC_NAME NOT IN ('XAAS')) ) 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999
  AND COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) In ( 'TAXI','METRIX'))
  )
 AND
( 
( EORCT.BATCH_SOURCE_ID,EORCT.GLOBAL_NAME) NOT IN 
 (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
 FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
 WHERE EORBSA.NAME = 'CM-GLOBAL REBATE')
) 
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 
AND 
(
 EBGA.ACCOUNT_CODE IS NOT NULL   
 OR STOXRT.BATCH_ID = 2
)
 
UNION ALL
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD,
STOXRT.SALES_MOTION_CD
FROM 
 $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG STOXRT 
INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT 
 ON (EORCT.CUSTOMER_TRX_ID =  STOXRT.CUSTOMER_TRX_ID
 AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
 ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
WHERE STOXRT.EXTRACT_TYPE = 'AR_ADJUSTMENT' 
 AND (EORCT.BATCH_SOURCE_ID, EORCT.GLOBAL_NAME) NOT  IN (
  SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
  FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
  WHERE EORBSA.NAME =  'CM-GLOBAL REBATE')   
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
AND 
(
 EBGA.ACCOUNT_CODE IS NOT NULL   
 OR STOXRT.BATCH_ID = 2
) 
 /* RCHETTRI : COMMENTED CORP_ADJ FLOW IN CARBT 
UNION ALL
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD
FROM 
 $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG STOXRT
INNER JOIN $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
 ON ( EOCRATA.REV_ADJ_TRX_ID = STOXRT.ADJUSTMENT_ID 
 AND EOCRATA.GLOBAL_NAME = STOXRT.GLOBAL_NAME ) 
INNER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA  
 ON ( EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID
 AND EOCATA.GLOBAL_NAME = EOCRATA.GLOBAL_NAME )
LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
 ON (EBGA.ACCOUNT_CODE=STOXRT.ACCOUNT_CODE)
WHERE 
 EOCATA.ADJ_TYPE_NAME = 'IBM REBATE' 
 AND STOXRT.EXTRACT_TYPE = 'CORP_ADJ'
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND 
 (
  EBGA.ACCOUNT_CODE IS NOT NULL   
  OR STOXRT.BATCH_ID = 2
 )

 */
/* ----------------------------------------------------------------------  */
 
 
 
UNION ALL 
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.SK_LINE_SEQ_ID_INT AS LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SCA_SOURCE_TYPE_CD AS SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD,
STOXRT.SALES_MOTION_CD
FROM 
 $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P STOXRT
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL  
 ON (EORCTL.CUSTOMER_TRX_LINE_ID = STOXRT.CUSTOMER_TRX_LINE_ID
 AND EORCTL.GLOBAL_NAME = STOXRT.GLOBAL_NAME)

LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
 ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)

INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
 ON (SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID)
INNER JOIN $$ETLVWDB.SM_AR_TRX  SMARTRX
 ON (  SMARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
 AND  SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE)
INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX   
 ON  ( NARTRX.AR_TRX_KEY = SMARTRX.AR_TRX_KEY)
INNER JOIN   $$FINLGLVWDB.N_AR_BATCH_SOURCE NBS
ON   ( NBS.AR_BATCH_SOURCE_KEY =NARTRX.AR_BATCH_SOURCE_KEY  )
INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SATL    
 ON (SATL.SK_CUSTOMER_TRX_LINE_ID_LINT = STOXRT.CUSTOMER_TRX_LINE_ID
 AND SATL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
 ON (SATL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT    
 ON     (NATT.BK_COMPANY_CODE = NARTRX.BK_COMPANY_CODE 
 AND NATT.BK_SET_OF_BOOKS_KEY = NARTRX.BK_SET_OF_BOOKS_KEY 
 AND NATT.BK_AR_TRX_TYPE_CODE = NARTRX.BK_AR_TRX_TYPE_CODE)
INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT  
 ON (EORCT.CUSTOMER_TRX_ID = NARTRX.SK_CUSTOMER_TRX_ID_LINT
 AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO   
 ON (STOXRT.ORDER_HEADER_ID = NSO.SK_SALES_ORDER_HEADER_ID_INT
 AND NSSC.SOURCE_SYSTEM_CODE = NSO.SS_CODE) 
WHERE 
(
 STOXRT.EXTRACT_TYPE = 'INV'
 OR (STOXRT.EXTRACT_TYPE ='REV'
 AND ( COALESCE(SORR.NAME,'Immediate') NOT LIKE '%VARIABLE%'  AND UPPER(COALESCE(SORR.NAME,'Immediate')) NOT IN ('DAILY RATES') ) )  
)
 AND (
  (NATT.AR_TRX_TYPE_SHORT_CODE IN ('CM','DM','INV')
  AND STOXRT.REQUEST_ID = -999) 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE = 'INV'  AND STOXRT.REQUEST_ID <> -999 
  AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY' OR 
(COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY'  /*Added OR : TNC Feb 2020 Release*/ ))
    /*Added OR : TNC Feb 2020 Release*/ )
  AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Service Invoice') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 
  AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY' OR 
(COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY'  /*Added OR : TNC Feb 2020 Release*/ )) 
   /*Added OR : TNC Feb 2020 Release*/ )
  AND NSO.SALES_ORDER_CATEGORY_TYPE='RETURN') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 
  AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY' OR 
(COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY'  /*Added OR : TNC Feb 2020 Release*/ )) 
   /*Added OR : TNC Feb 2020 Release*/ )
  AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Product Credit Memo') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'INV'  AND STOXRT.REQUEST_ID <> -999
  AND  COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'METRIX') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
  AND  (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN('SALES ADJUSTMENTS', 'ICMS-ADJ','DCA TWO-TIER' ,'COOP TWO-TIER')
  AND NATL.TRX_LINE_SRC_NAME NOT IN ('XAAS')) ) 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999
  AND COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) In ( 'TAXI','METRIX'))
  )
 AND
( 
( EORCT.BATCH_SOURCE_ID,EORCT.GLOBAL_NAME) NOT IN 
 (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
 FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
 WHERE EORBSA.NAME = 'CM-GLOBAL REBATE')
) 
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
AND 
(
 EBGA.ACCOUNT_CODE IS NOT NULL   
 OR STOXRT.BATCH_ID = 2
) 
AND STOXRT.EXCEPTION_TYPE = 'RI'                    
 
UNION ALL
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.SK_LINE_SEQ_ID_INT AS LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SCA_SOURCE_TYPE_CD AS SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD,
STOXRT.SALES_MOTION_CD
FROM 
 $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P STOXRT
INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT 
 ON (EORCT.CUSTOMER_TRX_ID =  STOXRT.CUSTOMER_TRX_ID
 AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
LEFT OUTER JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
 ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)

WHERE STOXRT.EXTRACT_TYPE = 'AR_ADJUSTMENT' 
 AND (EORCT.BATCH_SOURCE_ID, EORCT.GLOBAL_NAME) NOT  IN (
  SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
  FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
  WHERE EORBSA.NAME =  'CM-GLOBAL REBATE')   
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND 
 (
  EBGA.ACCOUNT_CODE IS NOT NULL   
  OR STOXRT.BATCH_ID = 2
 )
 AND STOXRT.EXCEPTION_TYPE = 'RI'
 
/* RCHETTRI: COMMENTED CORP_ADJ FLOW IN CARBT  
UNION ALL
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.SK_LINE_SEQ_ID_INT AS LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SCA_SOURCE_TYPE_CD AS SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD
FROM 
 $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P STOXRT
INNER JOIN $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
 ON ( EOCRATA.REV_ADJ_TRX_ID = STOXRT.ADJUSTMENT_ID 
 AND EOCRATA.GLOBAL_NAME = STOXRT.GLOBAL_NAME ) 
INNER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA  
 ON ( EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID
 AND EOCATA.GLOBAL_NAME = EOCRATA.GLOBAL_NAME )

LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
 ON (EBGA.ACCOUNT_CODE=STOXRT.ACCOUNT_CODE)

WHERE 
 EOCATA.ADJ_TYPE_NAME = 'IBM REBATE' 
 AND STOXRT.EXTRACT_TYPE = 'CORP_ADJ'
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND 
 (
  EBGA.ACCOUNT_CODE IS NOT NULL   
  OR STOXRT.BATCH_ID = 2
 )
 AND STOXRT.EXCEPTION_TYPE = 'RI'
 */
/* ----------------------------------------------------------------------  */
UNION ALL
SELECT 
EXORT.BATCH_ID,
EXORT.ACCOUNTING_RULE_ID,
EXORT.ACCOUNTING_RULE_NAME,
EXORT.ACCOUNT_CLASS,
EXORT.ACCOUNT_CODE,
EXORT.ACCTD_AMOUNT,
EXORT.ADJUSTMENT_ID,
EXORT.ADJUSTMENT_NUMBER,
EXORT.ADJUSTMENT_TYPE,
EXORT.AMOUNT,
EXORT.BILL_TO_CUSTOMER_ID,
EXORT.BILL_TO_SITE_USE_ID,
EXORT.CODE_COMBINATION_ID,
EXORT.COGS_PERCENT,
EXORT.COMMENTS,
EXORT.CONTEXT,
EXORT.CREATED_BY,
EXORT.CREATION_DATE,
EXORT.CUSTOMER_TRX_ID,
EXORT.CUSTOMER_TRX_LINE_ID,
EXORT.CUST_TRX_LINE_GL_DIST_ID,
EXORT.DEFAULT_SC_FLAG,
EXORT.EXTENDED_AMOUNT,
EXORT.EXTRACT_TYPE,
EXORT.FISCAL_ID,
EXORT.FORWARD_REVERSE_FLAG,
EXORT.FUNC_CURRENCY_CODE,
EXORT.GES_UPDATE_DATE,
EXORT.GLOBAL_NAME,
EXORT.GL_DATE,
EXORT.GL_POSTED_DATE,
EXORT.GROUPING_ID,
EXORT.INVENTORY_ITEM_ID,
EXORT.INVOICE_CURRENCY_CODE,
EXORT.INVOICE_PERCENT,
EXORT.INVOICING_RULE_ID,
EXORT.LAST_UPDATED_BY,
EXORT.LAST_UPDATE_DATE,
EXORT.LATEST_RECORD_FLAG,
EXORT.SK_LINE_SEQ_ID_INT,
EXORT.LINE_TYPE,
EXORT.LINK_TO_CUST_TRX_LINE_ID,
EXORT.ORDER_HEADER_ID,
EXORT.ORDER_LINE_ID,
EXORT.ORDER_NUMBER,
EXORT.ORG_ID,
EXORT.LINE_PERCENT,
EXORT.PREVIOUS_CUSTOMER_TRX_ID,
EXORT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
EXORT.QUOTA_FLAG,
EXORT.REASON_CODE,
EXORT.REBATE_AMOUNT,
EXORT.REBATE_PERCENTAGE_ID,
EXORT.REQUEST_ID,
EXORT.RULE_START_DATE,
EXORT.SALESREP_ID,
EXORT.SALES_CREDIT_TYPE_ID,
EXORT.SHIP_TO_CUSTOMER_ID,
EXORT.SHIP_TO_SITE_USE_ID,
EXORT.SOLD_TO_CUSTOMER_ID,
EXORT.SCA_SOURCE_TYPE_CD,
EXORT.SPLIT_PERCENT,
EXORT.TERRITORY_ID,
EXORT.TRANSACTION_DATE,
EXORT.TRANSACTION_GROUPING_TYPE,
EXORT.TRANSACTION_QUANTITY,
EXORT.TRANSACTION_SEQUENCE_ID,
EXORT.TRX_DATE,
EXORT.TRX_NAME,
EXORT.TRX_NUMBER,
EXORT.TRX_TYPE,
EXORT.UNIT_SELLING_PRICE,
EXORT.UNIT_STANDARD_PRICE,
EXORT.CREATE_DATETIME,
EXORT.ACTION_CODE,
EXORT.DV_TRANSACTION_KEY,
EXORT.DV_TRANSACTION_SOURCE_CD,
EXORT.SALES_MOTION_CD
FROM 
$$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P EXORT


Post SQL : 



Target6 Name : WI_OM_XXNCR_REVENUE_TRX_P_2


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P;


Source7 Name : SQ_WI_EX_WI_OM_XXNCR_REVENUE_TRX_P_3


Pre SQL : 



SQL Query : 
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE ,
'RI' EXCEPTION_TYPE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD,
STOXRT.SALES_MOTION_CD
FROM   
$$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG STOXRT 
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT  
 ON (EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
 AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
WHERE 
STOXRT.EXTRACT_TYPE IN( 'INV','REV')
AND
( 
 (EORCT.BATCH_SOURCE_ID,EORCT.GLOBAL_NAME) NOT IN 
 (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
 FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
 WHERE EORBSA.NAME = 'CM-GLOBAL REBATE')
) 
AND
(
STOXRT.FISCAL_ID >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
)
AND  
(
 NOT EXISTS 
 (
 SELECT 1 FROM $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL  
 WHERE EORCTL.CUSTOMER_TRX_LINE_ID = STOXRT.CUSTOMER_TRX_LINE_ID
 AND EORCTL.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 )

OR
 NOT EXISTS 
 (
 SELECT 1 FROM $$ETLVWDB.EL_RA_RULES SORR
 WHERE 
 SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID
 )
OR
 NOT EXISTS 
 (
  SELECT 1 FROM $$ETLVWDB.SM_AR_TRX SMARTRX
 WHERE SMARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
 AND  SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
 )
OR
 NOT EXISTS 
 (
  SELECT 1 FROM $$FINLGLVWDB.N_AR_TRX NARTRX
  WHERE NARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
  AND  NARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
 )

OR
 NOT EXISTS 
 (
  SELECT 1 FROM $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT 
 WHERE  EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
  AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 )
OR
 NOT EXISTS 
 (
  SELECT 1 FROM $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT
  INNER JOIN $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
  ON ( EORBSA.BATCH_SOURCE_ID = EORCT.BATCH_SOURCE_ID
  AND EORBSA.GLOBAL_NAME = EORCT.GLOBAL_NAME )
  WHERE 
  EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
  AND  EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 )
OR
 NOT EXISTS 
 (
 SELECT 1 FROM  $$FINLGLVWDB.N_AR_TRX NARTRX
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT    
 ON (NATT.BK_COMPANY_CODE = NARTRX.BK_COMPANY_CODE 
 AND NATT.BK_SET_OF_BOOKS_KEY = NARTRX.BK_SET_OF_BOOKS_KEY 
 AND NATT.BK_AR_TRX_TYPE_CODE = NARTRX.BK_AR_TRX_TYPE_CODE)
 WHERE NARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
 AND  NARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
 )
)
UNION ALL
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE ,
'RI' EXCEPTION_TYPE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD,
STOXRT.SALES_MOTION_CD
FROM 
$$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG STOXRT 
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT  
 ON (EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
 AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
WHERE STOXRT.EXTRACT_TYPE = 'AR_ADJUSTMENT' 
 AND (EORCT.BATCH_SOURCE_ID, EORCT.GLOBAL_NAME) NOT  IN (
  SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
  FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
  WHERE EORBSA.NAME =  'CM-GLOBAL REBATE')   
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
AND  
(
 NOT EXISTS 
 (
  SELECT 1 FROM $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT 
 WHERE  EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
  AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 )
)
/* RCHETTRI : COMMENTED CORP_ADJ FLOW IN CARBT 
UNION ALL
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE ,
'RI' EXCEPTION_TYPE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD
FROM 
$$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG STOXRT 
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
INNER JOIN $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
 ON ( EOCRATA.REV_ADJ_TRX_ID = STOXRT.ADJUSTMENT_ID 
 AND EOCRATA.GLOBAL_NAME = STOXRT.GLOBAL_NAME ) 
INNER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA  
 ON ( EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID)
WHERE
 EOCATA.ADJ_TYPE_NAME = 'IBM REBATE' 
 AND STOXRT.EXTRACT_TYPE = 'CORP_ADJ'
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
AND
(
 NOT EXISTS 
 (
  SELECT 1 FROM $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
  WHERE EOCRATA.REV_ADJ_TRX_ID = STOXRT.ADJUSTMENT_ID 
  AND EOCRATA.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 )
OR 
 NOT EXISTS 
 ( 
 SELECT 1 FROM $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
 INNER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA  
 ON ( EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID)
  WHERE EOCRATA.REV_ADJ_TRX_ID = STOXRT.ADJUSTMENT_ID 
  AND EOCRATA.GLOBAL_NAME = STOXRT.GLOBAL_NAME
 )
)
*/
/*
Rchettri: Load Future Records with no RI failure in Post Sql 
UNION ALL
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE ,
'FT' EXCEPTION_TYPE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD
FROM 
$$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG STOXRT 
WHERE STOXRT.FISCAL_ID > (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
*/


Post SQL : 



Target7 Name : EX_WI_OM_XXNCR_REVENUE_TRX_P_3


Pre SQL : 



Post SQL : 
/* RCHETTRI : 
Load Future Record with no RI failure as 'FT'. 
All RI failure reocrds are loaded to Exception as a part of Main Sql . For this use NOT EXISTS condition below.
*/

INSERT INTO $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
(
BATCH_ID                      	,
ACCOUNTING_RULE_ID            	,
ACCOUNTING_RULE_NAME          	,
ACCOUNT_CLASS                 	,
ACCOUNT_CODE                  	,
ACCTD_AMOUNT                  	,
ADJUSTMENT_ID                 	,
ADJUSTMENT_NUMBER             	,
ADJUSTMENT_TYPE               	,
AMOUNT                        	,
BILL_TO_CUSTOMER_ID           	,
BILL_TO_SITE_USE_ID           	,
CODE_COMBINATION_ID           	,
COGS_PERCENT                  	,
COMMENTS                      	,
CONTEXT                       	,
CREATED_BY                    	,
CREATION_DATE                 	,
CUSTOMER_TRX_ID               	,
CUSTOMER_TRX_LINE_ID          	,
CUST_TRX_LINE_GL_DIST_ID      	,
DEFAULT_SC_FLAG               	,
EXTENDED_AMOUNT               	,
EXTRACT_TYPE                  	,
FISCAL_ID                     	,
FORWARD_REVERSE_FLAG          	,
FUNC_CURRENCY_CODE            	,
GES_UPDATE_DATE               	,
GLOBAL_NAME                   	,
GL_DATE                       	,
GL_POSTED_DATE                	,
GROUPING_ID                   	,
INVENTORY_ITEM_ID             	,
INVOICE_CURRENCY_CODE         	,
INVOICE_PERCENT               	,
INVOICING_RULE_ID             	,
LAST_UPDATED_BY               	,
LAST_UPDATE_DATE              	,
LATEST_RECORD_FLAG            	,
SK_LINE_SEQ_ID_INT            	,
LINE_TYPE                     	,
LINK_TO_CUST_TRX_LINE_ID      	,
ORDER_HEADER_ID               	,
ORDER_LINE_ID                 	,
ORDER_NUMBER                  	,
ORG_ID                        	,
LINE_PERCENT                  	,
PREVIOUS_CUSTOMER_TRX_ID      	,
PREVIOUS_CUSTOMER_TRX_LINE_ID 	,
QUOTA_FLAG                    	,
REASON_CODE                   	,
REBATE_AMOUNT                 	,
REBATE_PERCENTAGE_ID          	,
REQUEST_ID                    	,
RULE_START_DATE               	,
SALESREP_ID                   	,
SALES_CREDIT_TYPE_ID          	,
SHIP_TO_CUSTOMER_ID           	,
SHIP_TO_SITE_USE_ID           	,
SOLD_TO_CUSTOMER_ID           	,
SCA_SOURCE_TYPE_CD            	,
SPLIT_PERCENT                 	,
TERRITORY_ID                  	,
TRANSACTION_DATE              	,
TRANSACTION_GROUPING_TYPE     	,
TRANSACTION_QUANTITY          	,
TRANSACTION_SEQUENCE_ID       	,
TRX_DATE                      	,
TRX_NAME                      	,
TRX_NUMBER                    	,
TRX_TYPE                      	,
UNIT_SELLING_PRICE            	,
UNIT_STANDARD_PRICE           	,
CREATE_DATETIME               	,
ACTION_CODE                   	,
EXCEPTION_TYPE                	,
DV_TRANSACTION_KEY            	,
DV_TRANSACTION_SOURCE_CD      	
)
SELECT 
STOXRT.BATCH_ID,
STOXRT.ACCOUNTING_RULE_ID,
STOXRT.ACCOUNTING_RULE_NAME,
STOXRT.ACCOUNT_CLASS,
STOXRT.ACCOUNT_CODE,
STOXRT.ACCTD_AMOUNT,
STOXRT.ADJUSTMENT_ID,
STOXRT.ADJUSTMENT_NUMBER,
STOXRT.ADJUSTMENT_TYPE,
STOXRT.AMOUNT,
STOXRT.BILL_TO_CUSTOMER_ID,
STOXRT.BILL_TO_SITE_USE_ID,
STOXRT.CODE_COMBINATION_ID,
STOXRT.COGS_PERCENT,
STOXRT.COMMENTS,
STOXRT.CONTEXT,
STOXRT.CREATED_BY,
STOXRT.CREATION_DATE,
STOXRT.CUSTOMER_TRX_ID,
STOXRT.CUSTOMER_TRX_LINE_ID,
STOXRT.CUST_TRX_LINE_GL_DIST_ID,
STOXRT.DEFAULT_SC_FLAG,
STOXRT.EXTENDED_AMOUNT,
STOXRT.EXTRACT_TYPE,
STOXRT.FISCAL_ID,
STOXRT.FORWARD_REVERSE_FLAG,
STOXRT.FUNC_CURRENCY_CODE,
STOXRT.GES_UPDATE_DATE,
STOXRT.GLOBAL_NAME,
STOXRT.GL_DATE,
STOXRT.GL_POSTED_DATE,
STOXRT.GROUPING_ID,
STOXRT.INVENTORY_ITEM_ID,
STOXRT.INVOICE_CURRENCY_CODE,
STOXRT.INVOICE_PERCENT,
STOXRT.INVOICING_RULE_ID,
STOXRT.LAST_UPDATED_BY,
STOXRT.LAST_UPDATE_DATE,
STOXRT.LATEST_RECORD_FLAG,
STOXRT.LINE_SEQ_ID,
STOXRT.LINE_TYPE,
STOXRT.LINK_TO_CUST_TRX_LINE_ID,
STOXRT.ORDER_HEADER_ID,
STOXRT.ORDER_LINE_ID,
STOXRT.ORDER_NUMBER,
STOXRT.ORG_ID,
STOXRT.LINE_PERCENT,
STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
STOXRT.QUOTA_FLAG,
STOXRT.REASON_CODE,
STOXRT.REBATE_AMOUNT,
STOXRT.REBATE_PERCENTAGE_ID,
STOXRT.REQUEST_ID,
STOXRT.RULE_START_DATE,
STOXRT.SALESREP_ID,
STOXRT.SALES_CREDIT_TYPE_ID,
STOXRT.SHIP_TO_CUSTOMER_ID,
STOXRT.SHIP_TO_SITE_USE_ID,
STOXRT.SOLD_TO_CUSTOMER_ID,
STOXRT.SOURCE_TYPE,
STOXRT.SPLIT_PERCENT,
STOXRT.TERRITORY_ID,
STOXRT.TRANSACTION_DATE,
STOXRT.TRANSACTION_GROUPING_TYPE,
STOXRT.TRANSACTION_QUANTITY,
STOXRT.TRANSACTION_SEQUENCE_ID,
STOXRT.TRX_DATE,
STOXRT.TRX_NAME,
STOXRT.TRX_NUMBER,
STOXRT.TRX_TYPE,
STOXRT.UNIT_SELLING_PRICE,
STOXRT.UNIT_STANDARD_PRICE,
STOXRT.CREATE_DATETIME,
STOXRT.ACTION_CODE ,
'FT'   EXCEPTION_TYPE,
STOXRT.DV_TRANSACTION_KEY,
STOXRT.DV_TRANSACTION_SOURCE_CD
FROM 
$$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG STOXRT 
WHERE STOXRT.FISCAL_ID > (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
AND NOT EXISTS ( SELECT 1 FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P EX
				WHERE EX.GLOBAL_NAME = STOXRT.GLOBAL_NAME
				AND EX.TRANSACTION_SEQUENCE_ID = STOXRT.TRANSACTION_SEQUENCE_ID
				) ;
COLLECT STATS ON $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P;


Source8 Name : SQ_WI_DRVD_NCR_SLS_CHNL_CODE_P_4


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_SLS_CHNL_CODE_P ALL;


SQL Query : 
SELECT 
STOXREVTRX.GLOBAL_NAME GLOBAL_NAME,
STOXREVTRX.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
NSSCT.SUPER_SALES_CHANNEL_DESCR SALES_CHANNEL_CODE 
FROM 
 $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P STOXREVTRX
INNER JOIN  $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON (NSSC.GLOBAL_NAME = STOXREVTRX.GLOBAL_NAME)
INNER JOIN ( SELECT WIOXRT.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
WIOXRT.GLOBAL_NAME GLOBAL_NAME,
CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') 
AND  (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE') 
OR ( NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS') ) )/*Added OR : TNC Feb 2020 Release*/ 
AND NABS.BK_BATCH_SOURCE_NAME NOT LIKE 'MANUAL%XAAS%'/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/ 
     THEN NATL.SOLD_TO_CUST_ACCT_KEY  /*ADDED DERIVATION FOR XAAS DATA AS PART OF Q2FY18 SOT XAAS*/
     WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') AND NAT.SOLD_TO_CUSTOMER_KEY <> -999 
	 THEN NAT.SOLD_TO_CUSTOMER_KEY 
ELSE NSORDTV.SOLD_TO_CUSTOMER_KEY END SOLD_TO_CUSTOMER_KEY
FROM 
 $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P WIOXRT
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSORDTV
 ON ( WIOXRT.ORDER_HEADER_ID = NSORDTV.SK_SALES_ORDER_HEADER_ID_INT  
        AND NSSC.SOURCE_SYSTEM_CODE = NSORDTV.SS_CODE)
INNER JOIN $$ETLVWDB.SM_AR_TRX SMARTRX    
 ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
 AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
 ON (SMARTRX.AR_TRX_KEY = NAT.AR_TRX_KEY)
 /*ADDED BELOW JOINS FOR SOLD_TO ENABLEMENT FOR XAAS DATA*/
 INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SATL    
 ON (SATL.SK_CUSTOMER_TRX_LINE_ID_LINT = WIOXRT.CUSTOMER_TRX_LINE_ID
 AND SATL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
 ON (SATL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY) 
INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
 ) SOLD_TO
 ON ( SOLD_TO.TRANSACTION_SEQUENCE_ID = STOXREVTRX.TRANSACTION_SEQUENCE_ID
 AND SOLD_TO.GLOBAL_NAME = STOXREVTRX.GLOBAL_NAME )
INNER JOIN  $$COMREFVWDB.N_CUSTOMER_ACCOUNT CA
 ON (CA.CUSTOMER_ACCOUNT_KEY = SOLD_TO.SOLD_TO_CUSTOMER_KEY )
INNER JOIN  $$COMREFVWDB.N_ERP_PARTY_TV EP
 ON(EP.ERP_PARTY_NUMBER = CA.ERP_CUSTOMER_NUMBER
 AND EP.END_TV_DATE = DATE '3500-01-01')
INNER  JOIN  $$COMREFVWDB.N_ORGANIZATION_PARTY_TV NOPT
 ON (EP.PARTY_KEY=NOPT.ORGANIZATION_PARTY_KEY
 AND NOPT.END_TV_DATE = DATE '3500-01-01')
INNER JOIN  $$COMREFVWDB.N_SALES_CHANNEL_TV NSCT
 ON(NOPT.BK_SALES_CHANNEL_CODE  = NSCT.BK_SALES_CHANNEL_CODE
 AND NSCT.END_TV_DATE = DATE '3500-01-01'
 AND NSCT.BK_SALES_CHANNEL_SOURCE_TYPE='CR')
INNER JOIN  $$COMREFVWDB.N_SUPER_SALES_CHANNEL_TV NSSCT
 ON (NSCT. BK_SUPER_SALES_CHANNEL_CODE = NSSCT. BK_SUPER_SALES_CHANNEL_CODE
 AND NSSCT.END_TV_DATE = DATE '3500-01-01')


Post SQL : 



Target8 Name : WI_DRVD_NCR_SLS_CHNL_CODE_P_4


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_SLS_CHNL_CODE_P;


Source9 Name : SQ_WI_DRVD_NCR_COMP_US_COST_P_5


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_COMP_US_COST_P ALL;


SQL Query : 
SELECT 
WIOXRT.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
WIOXRT.GLOBAL_NAME GLOBAL_NAME,
CAST(NSC.STANDARD_COST_AMOUNT*COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 AS DECIMAL(18,6)) DV_BKGS_COMP_US_COST_AMT
FROM 
	$$STGDB.WI_OM_XXNCR_REVENUE_TRX_P WIOXRT
INNER JOIN $$COMREFVWDB.N_PRODUCT NPT
	ON (NPT.SK_INVENTORY_ITEM_ID_INT = WIOXRT.INVENTORY_ITEM_ID ) 
INNER JOIN $$COMREFVWDB.N_STANDARD_COST NSC
	ON ( NSC.ITEM_KEY = NPT.ITEM_KEY 
	AND NSC.BK_MRP_ORG_NAME = 'GLOBAL ORGANIZATION' )
INNER JOIN (SELECT 
	WIOXRT1.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
	WIOXRT1.GLOBAL_NAME,
	NSCM.BK_MRP_ORG_NAME  BK_MRP_ORG_NAME,
	NSCM.ITEM_KEY ITEM_KEY,
	MAX(NSCM.STANDARD_COST_REVS_DATETIME) STANDARD_COST_REVS_DATETIME
	FROM
	$$STGDB.WI_OM_XXNCR_REVENUE_TRX_P WIOXRT1
	INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
		ON (NSSC.GLOBAL_NAME = WIOXRT1.GLOBAL_NAME )
	INNER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SMSOLN
		ON (SMSOLN.SK_SO_LINE_ID_INT = WIOXRT1.ORDER_LINE_ID 
		AND SMSOLN.SS_CODE = NSSC.SOURCE_SYSTEM_CODE )
	INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN
		ON ( SMSOLN.SALES_ORDER_LINE_KEY = NSOLN.SALES_ORDER_LINE_KEY)
	INNER JOIN $$COMREFVWDB.N_PRODUCT NPT
		ON (NPT.SK_INVENTORY_ITEM_ID_INT = WIOXRT1.INVENTORY_ITEM_ID)
	INNER JOIN $$COMREFVWDB.N_STANDARD_COST NSCM
		ON (NSCM.ITEM_KEY = NPT.ITEM_KEY 
		AND NSCM.BK_MRP_ORG_NAME = 'GLOBAL ORGANIZATION'
		AND NSCM.STANDARD_COST_REVS_DATETIME <= CAST(CAST(COALESCE(NSOLN.BK_SO_SRC_CRT_DATETIME,WIOXRT1.TRANSACTION_DATE) AS DATE)   AS TIMESTAMP(0)))
	GROUP BY NSCM.BK_MRP_ORG_NAME, NSCM.ITEM_KEY, WIOXRT1.TRANSACTION_SEQUENCE_ID, WIOXRT1.GLOBAL_NAME
  ) MAX_DATE
	ON ( MAX_DATE.BK_MRP_ORG_NAME = NSC.BK_MRP_ORG_NAME
	AND  MAX_DATE.ITEM_KEY = NSC.ITEM_KEY
	AND  MAX_DATE.STANDARD_COST_REVS_DATETIME = NSC.STANDARD_COST_REVS_DATETIME
	AND  MAX_DATE.TRANSACTION_SEQUENCE_ID = WIOXRT.TRANSACTION_SEQUENCE_ID
	AND  MAX_DATE.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
WHERE 
WIOXRT.EXTRACT_TYPE <>'CORP_ADJ'


Post SQL : 



Target9 Name : WI_DRVD_NCR_COMP_US_COST_P1_5


Pre SQL : 



Post SQL : 
COLLECT STATS $$STGDB.WI_DRVD_NCR_COMP_US_COST_P;


Source10 Name : SQ_WI_OM_WI_DRVD_NCR_REV_TRX_FOR_BKG_P_6


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_P ALL;


SQL Query : 
SELECT
 WIOXRT.TRANSACTION_SEQUENCE_ID      TRANSACTION_SEQUENCE_ID,
 WIOXRT.GLOBAL_NAME       GLOBAL_NAME, 
 WIOXRT.TRANSACTION_DATE       TRANSACTION_DATE,
 WIOXRT.ACCOUNT_CLASS       ACCOUNT_CLASS_CODE,
 WIOXRT.ACCTD_AMOUNT       GL_DISTRIBUTION_FUNCTIONAL_AMT,
 EOCATA.ADJ_TYPE_NAME       ADJUSTMENT_TYPE_CODE,
 WIOXRT.AMOUNT        GL_DISTRIB_TRANSACTIONAL_AMT,
 WIOXRT.CREATED_BY       CREATED_BY_INT,    
 CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (NATIL.RU_OFFER_ATRBTD_DBT_TRX_AMT + RU_OFFER_ATRBTD_CRDT_TRX_AMT )
 WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'N' THEN (NATIL.RU_DEBIT_EXTENDED_AMOUNT + RU_CREDIT_EXTENDED_AMOUNT )
 END  AR_TRX_LINE_TRANSACTIONAL_AMT,
 WIOXRT.EXTRACT_TYPE       EXTRACT_TYPE_CODE,
 WIOXRT.FORWARD_REVERSE_FLAG      FORWARD_REVERSE_CODE,
 WIOXRT.GL_DATE        GL_DATETIME,
 WIOXRT.GL_DATE        GL_DATE,
 WIOXRT.GL_POSTED_DATE       GL_POSTED_DATE,
 WIOXRT.TRANSACTION_GROUPING_TYPE     TRANSACTION_GROUPING_TYPE_CODE,
 WIOXRT.LAST_UPDATED_BY       LAST_UPDATED_BY_INT,
 WIOXRT.LATEST_RECORD_FLAG      LAST_RECORD_FLAG,
 WIOXRT.LINE_TYPE       LINE_TYPE_CODE,
 WIOXRT.QUOTA_FLAG       QUOTA_FLAG,
 WIOXRT.REBATE_AMOUNT       REBATE_TRANSACTIONAL_AMOUNT,
 CASE WHEN  WIOXRT.REQUEST_ID = -999  THEN 'Y' ELSE 'N' END MANUAL_TRANSACTION_FLAG,
 WIOXRT.RULE_START_DATE       RULE_START_DATETIME, 
 WIOXRT.TRANSACTION_DATE       TRANSACTION_DATETIME,
 CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' 
 OR (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY' )  /*Added OR : TNC Feb 2020 Release*/ ) 
 AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%' THEN WIOXRT.TRANSACTION_QUANTITY 
  ELSE 0 END TRANSACTION_QUANTITY,
 WIOXRT.TRX_DATE        AR_TRX_DATETIME,
 WIOXRT.TRX_NUMBER       AR_TRX_NUMBER,
 WIOXRT.TRX_TYPE        AR_TRX_TYPE_CODE,
 NATIL.RU_CREDIT_UNIT_AMOUNT + NATIL.RU_DEBIT_UNIT_AMOUNT  UNIT_SELLING_PRICE_TRX_AMT,
 NATIL.RU_UNIT_STD_PRICE_LOCAL_AMT     UNIT_STANDARD_PRICE_TRX_AMT,
 WIOXRT.INVOICE_CURRENCY_CODE      PD_INVOICE_CURRENCY_CODE, 
 CASE WHEN WIOXRT.TRANSACTION_GROUPING_TYPE ='O' THEN CAST(WIOXRT.GL_DATE AS DATE) ELSE CAST(WIOXRT.TRANSACTION_DATE AS DATE) END DV_FISCAL_DATE,
 'N'         DV_BKGS_ITEM_TYPE_CODE_FLAG ,
 CASE WHEN SUBSTR(NSORDTV.BK_ORDER_TYPE_NAME,1,8)='Standard' AND NSORDTV.SHIPMENT_PRIORITY_CODE  IN('Demo' ,'Int "" l Demo','Intl Demo') THEN 'Y' ELSE 'N' END DV_BKGS_INTL_DEMO_FLAG,
 CASE WHEN SUBSTR(NSOT.DV_SALES_ORDER_TYPE_ALT_NAME,1,12)='Replacements' AND NSORDTV.SHIPMENT_PRIORITY_CODE IN ( 'Demo','Evaluation','Int"" l Demo','Intl Demo') THEN 'Y' ELSE 'N' END DV_BKGS_REPL_DEMO_FLAG,
 CASE WHEN NSOT.SO_TYPE_REVENUE_GEN_FLAG IS NULL THEN 'Y' ELSE SO_TYPE_REVENUE_GEN_FLAG END DV_BKGS_REVENUE_FLAG,
 CASE WHEN (UCH.TERRITORY_ID IS NULL OR UCH.TERRITORY_ID = -999) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG,
 CASE WHEN WIOXRT.SALESREP_ID = -999 THEN 'Y'ELSE 'N' END DV_BKGS_SALESREP_FLAG ,
 NULL         DV_BKGS_IC_REVENUE_FLAG,
 CASE WHEN NPT.BK_PRODUCT_TYPE_ID='CHARGES' THEN 'Y' ELSE 'N' END DV_BKGS_CHARGES_FLAG,
 CASE WHEN SUBSTR(NPT.BK_PRODUCT_ID,1,4)='MISC' THEN 'Y' ELSE 'N' END DV_BKGS_MISC_FLAG,
 CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' THEN 'Y' ELSE 'N' END DV_BKGS_SERVICE_FLAG,
 CASE WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' 
 THEN CAST(EOCRATA.ADJUSTMENT_REVENUE_USD * COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 AS DECIMAL(18,6)) WHEN WIOXRT.EXTRACT_TYPE IN ('INV' ,'REV','AR_ADJUSTMENT') 
 THEN CAST(((CAST (COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)*
 (COALESCE(WIOXRT.AMOUNT,0.000000)- COALESCE(WIOXRT.REBATE_AMOUNT,0.000000)) AS DECIMAL(18,6)))* 
 (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
 NCCDR.PL_CONVERSION_RATE END)/100.000000) AS DECIMAL(18,6))
 ELSE 0.000000 END DV_BKGS_COMP_US_NET_PRC_AMT,
 CASE WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' 
 THEN 0 
 ELSE (CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' 
 THEN 0 
 ELSE CAST((CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NPPT.LIST_PRICE_AMOUNT ELSE NPPT.LIST_PRICE_AMOUNT  END *
 ( CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' 
 OR (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY' )  /*Added OR : TNC Feb 2020 Release*/ ) 
 AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%' THEN DNATIL.TRANSACTION_QUANTITY
  WHEN (UPPER(EORCTL.INTERFACE_LINE_CONTEXT) IN ( 'SALES ADJUSTMENTS' ,'ICMS-ADJ')  AND NATL.TRX_LINE_SRC_NAME NOT IN ('XAAS'))
  AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM'  AND /*NACAR.SAF_TYPE_CD = 'CREDIT_REBILL' */ UPPER(NACAR.INTERFACE_HEADER_ATTRIBUTE10) = 'CREDIT_REBILL'  THEN DNATIL.TRANSACTION_QUANTITY 
 ELSE 0
 END)*WIOXRT.SPLIT_PERCENT)/100 AS DECIMAL(18,6))
 END) 
 END DV_BKGS_COMP_US_LST_PRC_AMT, /*OA Q1FY15 : Modified logic*/
 
 CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' THEN 0 ELSE CASE WHEN (COALESCE(NSORDTV.PURCHASE_ORDER_TYPE_CODE,'~') = 'Demo/Eval'
 OR (COALESCE(NSORDTV.PURCHASE_ORDER_TYPE_CODE,'~') <> 'Demo/Eval' AND NSOT.BK_ORDER_TYPE_NAME NOT LIKE   'Invoice Only%' )) 
 THEN (CASE WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' THEN EOCRATA.ADJUSTMENT_COGS_USD* COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 
 ELSE 
 WDNCUC.DV_BKGS_COMP_US_COST_AMT*
 (CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' 
 OR (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY' )  /*Added OR : TNC Feb 2020 Release*/ ) 
 AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%' THEN WIOXRT.TRANSACTION_QUANTITY 
  ELSE 0 END) END ) ELSE 0.0000000 END END DV_BKGS_COMP_US_COST_AMT,
 0         DV_BKGS_EXTENDED_QUANTITY,
 WIOXRT.SPLIT_PERCENT       SALES_COMMISSION_PERCENTAGE,
 0         DV_COMP_US_STANDARD_PRICE_AMT ,
 COALESCE( NPT.ITEM_KEY,-998) PRODUCT_KEY,
 
 /* rchettri
 CASE WHEN NSORDTV.SALES_ORDER_KEY in (-9999,-8888) THEN
 (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.SALES_ORDER_KEY ELSE (CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END)   END)
 WHEN NSORDTV.SALES_ORDER_KEY IS NULL  THEN 
 (CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END)  
 ELSE NSORDTV.SALES_ORDER_KEY END SALES_ORDER_KEY, */
 CASE WHEN NSORDTV.SALES_ORDER_KEY in (-9999,-8888) THEN
 (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.SALES_ORDER_KEY END)
 WHEN NSORDTV.SALES_ORDER_KEY IS NULL THEN 
 (CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END) 
 ELSE NSORDTV.SALES_ORDER_KEY END SALES_ORDER_KEY,
 
 CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NULL THEN ( CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END) ELSE NSOLN.SALES_ORDER_LINE_KEY END SALES_ORDER_LINE_KEY,
 CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') THEN NAT.SHIP_TO_CUSTOMER_KEY ELSE 
 COALESCE(NSORDTV.SHIP_TO_CUSTOMER_KEY, -999) END SHIP_TO_CUSTOMER_KEY,
CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') 
AND (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE')
 OR ( NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')  ) )/*Added OR : TNC Feb 2020 Release*/ 
AND NABS.BK_BATCH_SOURCE_NAME NOT LIKE 'MANUAL%XAAS%' /*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
     THEN NATL.SOLD_TO_CUST_ACCT_KEY  /*ADDED DERIVATION FOR XAAS DATA AS PART OF Q2FY18 SOT XAAS*/
     WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') AND NAT.SOLD_TO_CUSTOMER_KEY <> -999 
	 THEN NAT.SOLD_TO_CUSTOMER_KEY ELSE 
 COALESCE(NSORDTV.SOLD_TO_CUSTOMER_KEY,-999) END SOLD_TO_CUSTOMER_KEY ,

 CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') THEN NAT.BILL_TO_CUSTOMER_KEY 
 ELSE COALESCE(NSORDTV.BILL_TO_CUSTOMER_KEY, -999) END  BILL_TO_CUSTOMER_KEY,
 
 /* rchettri
 CASE 
 WHEN NSORDTV.SALES_ORDER_KEY in (-9999,-8888) THEN
 (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.BK_SO_NUMBER_INT ELSE -9999 END)
 WHEN NSORDTV.BK_SO_NUMBER_INT IS NULL THEN -9999 
 ELSE NSORDTV.BK_SO_NUMBER_INT  END REPORTED_SALES_ORDER_NUM_INT  , */
 CASE 
 WHEN NSORDTV.SALES_ORDER_KEY in (-9999,-8888) THEN
 (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.BK_SO_NUMBER_INT END)
 WHEN NSORDTV.BK_SO_NUMBER_INT IS NULL THEN -9999 
 ELSE NSORDTV.BK_SO_NUMBER_INT END REPORTED_SALES_ORDER_NUM_INT ,
 
 CASE WHEN NCCDR.PL_CONVERSION_RATE  =0 OR NCCDR.PL_CONVERSION_RATE  IS NULL THEN 1 ELSE NCCDR.PL_CONVERSION_RATE  END CONVERSION_RT,
 WIOXRT.SK_LINE_SEQ_ID_INT,
 WIOXRT.SCA_SOURCE_TYPE_CD,
 WIOXRT.DEFAULT_SC_FLAG,
 WIOXRT.DV_TRANSACTION_KEY,
 WIOXRT.DV_TRANSACTION_SOURCE_CD,
 CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY' )  /*Added OR : TNC Feb 2020 Release*/ ) AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%'
AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
THEN 
        CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000)*NSOLN.UNIT_LIST_PRICE  ELSE NSOLN.UNIT_LIST_PRICE END 
		 * DNATIL.TRANSACTION_QUANTITY * (WIOXRT.SPLIT_PERCENT)/100 AS DECIMAL(18,6))    
ELSE 0
END AS DV_LOCAL_EXTND_LIST_PRICE_AMT  ,

CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY TNC' AND NATL.TRX_LINE_SRC_NAME = 'ORDER ENTRY' )  /*Added OR : TNC Feb 2020 Release*/ ) 
AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%'
AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
THEN 
    CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000)*
    NSOLN.UNIT_LIST_PRICE ELSE NSOLN.UNIT_LIST_PRICE END * (WIOXRT.SPLIT_PERCENT/100) AS DECIMAL(18,6))    
ELSE 0
END AS LOCAL_UNIT_LIST_PRICE_AMT1,
CAST(LOCAL_UNIT_LIST_PRICE_AMT1*(CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
        NCCDR.PL_CONVERSION_RATE END) AS DECIMAL(18,6)) AS DV_UNIT_LIST_PRICE_USD_AMT,
WIOXRT.SALES_MOTION_CD
 FROM 
 $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P WIOXRT
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
 INNER JOIN $$ETLVWDB.SM_AR_TRX SMARTRX
 ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
 AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
 ON (SMARTRX.AR_TRX_KEY = NAT.AR_TRX_KEY)
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
 ON (NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
 AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY           
 AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE)
 LEFT OUTER JOIN $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
 ON ( EOCRATA.REV_ADJ_TRX_ID = WIOXRT.ADJUSTMENT_ID 
 AND EOCRATA.GLOBAL_NAME = WIOXRT.GLOBAL_NAME
 AND WIOXRT.EXTRACT_TYPE IN('CORP_ADJ','INV' ,'REV') ) 
 LEFT OUTER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA 
 ON (EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID
 AND EOCATA.GLOBAL_NAME = EOCRATA.GLOBAL_NAME)
 LEFT OUTER JOIN $$ETLVWDB.EL_SALES_TERRITORY UCH 
 ON ( UCH.TERRITORY_ID = WIOXRT.TERRITORY_ID
 AND UCH.GLOBAL_NAME = WIOXRT.GLOBAL_NAME 
 AND UCH.HIERARCHY_TYPE_CODE LIKE 'CORP%.%REVENUE') 
 LEFT OUTER JOIN $$STGDB.WI_DRVD_NCR_COMP_US_COST_P WDNCUC
 ON (WDNCUC.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID
 AND WDNCUC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME )
 LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SSOL
 ON ( SSOL.SK_SO_LINE_ID_INT = WIOXRT.ORDER_LINE_ID 
 AND SSOL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE)
 LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN
 ON ( SSOL.SALES_ORDER_LINE_KEY = NSOLN.SALES_ORDER_LINE_KEY )
 
 LEFT OUTER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LN_ORD_LN EL
 ON WIOXRT.CUSTOMER_TRX_LINE_ID = EL.CUSTOMER_TRX_LINE_ID
 AND WIOXRT.GLOBAL_NAME=EL.GLOBAL_NAME
 /*OA Q1FY15 >>*/
 LEFT OUTER  JOIN  
  (SELECT NATIL.SK_CUSTOMER_TRX_LINE_ID_LINT,NATIL.AR_TRX_LINE_KEY AS AR_TRX_LINE_KEY ,NATIL_PAR.AR_TRX_LINE_KEY  AS PARENT_AR_TRX_LINE_KEY , 
  NATIL_PAR.SK_CUSTOMER_TRX_LINE_ID_LINT AS P_SK_CUSTOMER_TRX_LINE_ID_LINT,
 NATIL_PAR.PRODUCT_KEY AS PARENT_PRODUCT_KEY, NATIL.PRODUCT_KEY, NATIL.OFFER_ATTRIBUTED_FLG, NATIL.WITH_PARENT_ROLE, NATIL.SS_CODE  
, CASE WHEN NAAT.AR_TRX_TYPE_SHORT_CODE ='CM' and NATL.BK_AR_TRX_LINE_TYPE  = 'LINE' THEN
    NATIL_PAR.RU_CREDIT_QUANTITY 
   ELSE NATIL_PAR.RU_DEBIT_QUANTITY  
 END  as TRANSACTION_QUANTITY   
  FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL
INNER JOIN  $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON (NATIL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY)
 INNER JOIN  $$FINLGLVWDB.N_AR_TRX_TYPE NAAT
  ON (NATL.BK_COMPANY_CODE = NAAT.BK_COMPANY_CODE
  AND NATL.BK_SET_OF_BOOKS_KEY = NAAT.BK_SET_OF_BOOKS_KEY
  AND NATL.BK_AR_TRX_TYPE_CODE = NAAT.BK_AR_TRX_TYPE_CODE)  
  INNER JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL_PAR  
  ON COALESCE(NATIL.RU_PARENT_AR_TRX_LINE_KEY,0)  = NATIL_PAR.AR_TRX_LINE_KEY  ) DNATIL 
   ON  WIOXRT.CUSTOMER_TRX_LINE_ID = DNATIL.SK_CUSTOMER_TRX_LINE_ID_LINT
   AND NSSC.SOURCE_SYSTEM_CODE=DNATIL.SS_CODE                   
      LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT NP
         ON(NP.ITEM_KEY= CASE WHEN DNATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN DNATIL.PARENT_PRODUCT_KEY ELSE DNATIL.PRODUCT_KEY END)
 /* << OA Q1FY15 */
 
 LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT NPT 
 ON ( NPT.SK_INVENTORY_ITEM_ID_INT = WIOXRT.INVENTORY_ITEM_ID) 
 
 LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT_PRICE_TV NPPT /*OA Q1FY15: Modified join */
 ON ( NPPT.ITEM_KEY = NP.ITEM_KEY
 AND NPPT.BK_PRICE_LIST_NAME = 'Base Price List' 
 AND CAST(COALESCE(NSOLN.BK_SO_SRC_CRT_DATETIME,WIOXRT.TRANSACTION_DATE) AS DATE)  BETWEEN NPPT.START_TV_DATE AND NPPT.END_TV_DATE )
 LEFT OUTER JOIN $$FINLGLVWDB.N_CURRENCY_CONV_DAILY_RATE NCCDR
 ON ( NCCDR.BK_FROM_CURRENCY_CODE = WIOXRT.INVOICE_CURRENCY_CODE
 AND NCCDR.BK_TO_CURRENCY_CODE ='USD'
 AND NCCDR.BK_CONVERSION_DATE= CAST (WIOXRT.GL_DATE AS DATE))
 LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSORDTV
 ON ( WIOXRT.ORDER_HEADER_ID = NSORDTV.SK_SALES_ORDER_HEADER_ID_INT  
 AND NSSC.SOURCE_SYSTEM_CODE = NSORDTV.SS_CODE)
 LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT
 ON (NSOT.BK_ORDER_TYPE_NAME = NSORDTV.BK_ORDER_TYPE_NAME)
 LEFT OUTER JOIN $$ETLVWDB.SM_AR_TRX_LINE SMATL
 ON ( WIOXRT.CUSTOMER_TRX_LINE_ID = SMATL.SK_CUSTOMER_TRX_LINE_ID_LINT
 AND NSSC.SOURCE_SYSTEM_CODE = SMATL.SS_CODE )
 LEFT OUTER JOIN $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL
 ON (SMATL.AR_TRX_LINE_KEY = NATIL.AR_TRX_LINE_KEY)
   
 INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL
 ON ( EORCTL.CUSTOMER_TRX_LINE_ID = WIOXRT.CUSTOMER_TRX_LINE_ID 
 AND EORCTL.GLOBAL_NAME  = WIOXRT.GLOBAL_NAME)
 LEFT JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
 ON(NATL.AR_TRX_LINE_KEY = SMATL.AR_TRX_LINE_KEY)
 /* LEFT OUTER JOIN $$FINLGLVWDB.N_AR_CMDM_ADJ_REQUEST NACAR 
   ON ( NACAR.BK_SAF_ID_INT = NATL.BK_SAF_ID_INT 
   AND NACAR.SET_OF_BOOKS_KEY = NATL.BK_SAF_SET_OF_BOOKS_KEY
   AND NACAR.BK_COMPANY_CD                  = NATL.BK_SAF_COMPANY_CODE  )*/
 LEFT OUTER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX NACAR
 ON NACAR.CUSTOMER_TRX_ID  = WIOXRT.CUSTOMER_TRX_ID
 AND NACAR.GLOBAL_NAME     = WIOXRT.GLOBAL_NAME
 /*ADDED BELOW JOIN FOR XAAS SOLD TO CUSTOMER KEY CHANGES*/
 INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY


Post SQL : 



Target10 Name : WI_DRVD_NCR_REV_TRX_FOR_BKG_P_6


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_P;


Source11 Name : SQ_W_MT_DRVD_NCR_REV_TRX_FOR_BKG_7


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM ALL;


SQL Query : 
SELECT 
1			DRVD_NCR_REV_TRX_BKG_KEY,
WDNRTFB.TRANSACTION_SEQUENCE_ID_INT			TRANSACTION_SEQUENCE_ID_INT,
NSSC.SOURCE_SYSTEM_CODE					SOURCE_SYSTEM_CODE,
WDNRTFB.TRANSACTION_DATE				TRANSACTION_DATE,
WIOXRT.TRANSACTION_SEQUENCE_ID				SK_PH_TRANSACTION_SEQ_ID_INT, 
NAAR.BK_ACCOUNTING_RULE_NAME				ACCOUNTING_RULE_NAME, 
WDNRTFB.ACCOUNT_CLASS_CODE				ACCOUNT_CLASS_CODE,
WDNRTFB.GL_DISTRIBUTION_FUNCTIONAL_AMT			GL_DISTRIBUTION_FUNCTIONAL_AMT,
WDNRTFB.ADJUSTMENT_TYPE_CODE				ADJUSTMENT_TYPE_CODE,
WDNRTFB.GL_DISTRIB_TRANSACTIONAL_AMT			GL_DISTRIB_TRANSACTIONAL_AMT,
WDNRTFB.CREATED_BY_INT					CREATED_BY_INT,
WDNRTFB.AR_TRX_LINE_TRANSACTIONAL_AMT			AR_TRX_LINE_TRANSACTIONAL_AMT,
WDNRTFB.EXTRACT_TYPE_CODE				EXTRACT_TYPE_CODE,
WDNRTFB.FORWARD_REVERSE_CODE				FORWARD_REVERSE_CODE,
WDNRTFB.GL_DATETIME					GL_DATETIME,
WDNRTFB.GL_DATE						GL_DATE, 
WDNRTFB.GL_POSTED_DATE					GL_POSTED_DATE,
WDNRTFB.TRANSACTION_GROUPING_TYPE_CODE			TRANSACTION_GROUPING_TYPE_CODE,
WDNRTFB.LAST_UPDATED_BY_INT				LAST_UPDATED_BY_INT,
WDNRTFB.LAST_RECORD_FLAG				LAST_RECORD_FLAG,
NATL.BK_AR_TRX_LINE_TYPE				LINE_TYPE_CODE,
WDNRTFB.QUOTA_FLAG					QUOTA_FLAG,
COALESCE(WDNRTFB.REBATE_TRANSACTIONAL_AMOUNT,0)		REBATE_TRANSACTIONAL_AMOUNT,
WDNRTFB.MANUAL_TRANSACTION_FLAG				MANUAL_TRANSACTION_FLAG,
WDNRTFB.RULE_START_DATETIME				RULE_START_DATETIME,
WDNRTFB.TRANSACTION_DATETIME				TRANSACTION_DATETIME,
WDNRTFB.TRANSACTION_QUANTITY				TRANSACTION_QUANTITY,
WDNRTFB.AR_TRX_DATETIME					AR_TRX_DATETIME,
WDNRTFB.AR_TRX_NUMBER					AR_TRX_NUMBER,
WDNRTFB.AR_TRX_TYPE_CODE				AR_TRX_TYPE_CODE,
COALESCE(WDNRTFB.UNIT_SELLING_PRICE_TRX_AMT,0)		UNIT_SELLING_PRICE_TRX_AMT,
COALESCE(WDNRTFB.UNIT_STANDARD_PRICE_TRX_AMT,0)		UNIT_STANDARD_PRICE_TRX_AMT,
ELST.SALES_TERRITORY_KEY				PD_SALES_TERRITORY_KEY,
ELSALER.SALES_REP_NUMBER				PD_SALES_REP_NUMBER,
CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN 'UNKNOWN' ELSE EAAT.BK_AR_ADJ_NUMBER END PD_AR_ADJUSTMENT_NUMBER,
CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN (CASE WHEN NSSC.SOURCE_SYSTEM_CODE='BV' THEN '555' ELSE '020' END) ELSE EAAT.BK_COMPANY_CODE END PD_AR_ADJUSTMENT_COMPANY_CODE,
CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN (CASE WHEN NSSC.SOURCE_SYSTEM_CODE='BV' THEN 11 ELSE 1 END) ELSE EAAT.BK_SET_OF_BOOKS_KEY END PD_AR_ADJ_SET_OF_BOOKS_KEY,
NULL							PD_FUNCTIONAL_CURRENCY_CODE,
WDNRTFB.PD_INVOICE_CURRENCY_CODE			PD_INVOICE_CURRENCY_CODE,
NFM.BK_FISCAL_CALENDAR_CODE				DV_FISCAL_CALENDAR_CODE,
SUBSTR(CAST(WIOXRT.FISCAL_ID AS VARCHAR(6)),5,2)	DV_FISCAL_MONTH_NUMBER_INT,
SUBSTR(CAST(WIOXRT.FISCAL_ID AS VARCHAR(6)),1,4) 	DV_FISCAL_YEAR_NUMBER_INT,
'FOR BOOKINGS REPORTING'				REPORTING_MEASURE_TYPE,
CASE WHEN SSORCTLG.BK_AR_TRX_LINE_GL_DISTRIB_KEY IS NULL THEN(CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END) ELSE SSORCTLG.BK_AR_TRX_LINE_GL_DISTRIB_KEY END BK_AR_TRX_LINE_GL_DISTRIB_KEY, 
WDNRTFB.DV_FISCAL_DATE					DV_FISCAL_DATE, 
WDNRTFB.DV_BKGS_ITEM_TYPE_CODE_FLAG			DV_BKGS_ITEM_TYPE_CODE_FLAG,
WDNRTFB.DV_BKGS_INTL_DEMO_FLAG				DV_BKGS_INTL_DEMO_FLAG,
WDNRTFB.DV_BKGS_REPL_DEMO_FLAG				DV_BKGS_REPL_DEMO_FLAG,
WDNRTFB.DV_BKGS_REVENUE_FLAG				DV_BKGS_REVENUE_FLAG,
WDNRTFB.DV_BKGS_OVERLAY_FLAG				DV_BKGS_OVERLAY_FLAG,
WDNRTFB.DV_BKGS_SALESREP_FLAG				DV_BKGS_SALESREP_FLAG,
CASE WHEN NCA.ERP_CUSTOMER_TYPE_CODE='I' THEN 'N' ELSE 'Y' END DV_BKGS_IC_REVENUE_FLAG,
WDNRTFB.DV_BKGS_CHARGES_FLAG				DV_BKGS_CHARGES_FLAG,
WDNRTFB.DV_BKGS_MISC_FLAG				DV_BKGS_MISC_FLAG,
WDNRTFB.DV_BKGS_SERVICE_FLAG				DV_BKGS_SERVICE_FLAG,
/*CASE WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  AND DV_BKGS_INTL_DEMO_FLAG='N' AND DV_BKGS_REPL_DEMO_FLAG='N' AND DV_BKGS_REVENUE_FLAG='Y' AND DV_BKGS_CHARGES_FLAG='N' AND DV_BKGS_OVERLAY_FLAG='N' AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' AND DV_BKGS_MISC_FLAG='N' AND DV_BKGS_SALESREP_FLAG='N' THEN 'Y' ELSE 'N' END DV_BKGS_CORP_BKG_FLAG , */
CASE WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999
THEN (CASE	WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL 
	OR	NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
	AND	DV_BKGS_INTL_DEMO_FLAG='N' 
	AND	DV_BKGS_REPL_DEMO_FLAG='N' 
	AND	DV_BKGS_REVENUE_FLAG='Y' 
	AND	DV_BKGS_CHARGES_FLAG='N' 
	AND	DV_BKGS_OVERLAY_FLAG='N' 
	AND	DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
	AND	DV_BKGS_MISC_FLAG='N' 
	AND	DV_BKGS_SALESREP_FLAG='N'
    AND ELST.TERRITORY_NODE_LEVEL1_CODE <> 'WW Distribution' THEN 'Y' 
    ELSE	'N' 
    END)
ELSE 
(CASE	WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL 
	OR	NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
	AND	DV_BKGS_INTL_DEMO_FLAG='N' 
	AND	DV_BKGS_REPL_DEMO_FLAG='N' 
	AND	DV_BKGS_REVENUE_FLAG='Y' 
	AND	DV_BKGS_CHARGES_FLAG='N' 
	AND	DV_BKGS_OVERLAY_FLAG='N' 
	AND	DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
	AND	DV_BKGS_MISC_FLAG='N' 
	AND	DV_BKGS_SALESREP_FLAG='N' 
	AND ELST.TERRITORY_NODE_LEVEL1_CODE <> 'WW Distribution'THEN 'Y' 
    ELSE	'N' 
END ) END DV_BKGS_CORP_BKG_FLAG, /* Modified as part of true demand bkgs definition*/
COALESCE(WDNRTFB.DV_BKGS_COMP_US_NET_PRC_AMT,0)		DV_BKGS_COMP_US_NET_PRC_AMT,
COALESCE(WDNRTFB.DV_BKGS_COMP_US_LST_PRC_AMT,0)		DV_BKGS_COMP_US_LST_PRC_AMT,
COALESCE(WDNRTFB.DV_BKGS_COMP_US_COST_AMT,0)		DV_BKGS_COMP_US_COST_AMT,
COALESCE(WDNRTFB.DV_BKGS_EXTENDED_QUANTITY,0)		DV_BKGS_EXTENDED_QUANTITY,
CASE WHEN WIOXRT.ORDER_LINE_ID IN (-9999,0) THEN 'UNKNOWN' ELSE ELSALER.SALES_REP_NUMBER END BK_SCAA_SALES_REP_NUMBER,
CASE WHEN WIOXRT.ORDER_LINE_ID IN (-9999,0) THEN ELSALER.SALES_REP_NUMBER ELSE 'UNKNOWN' END BK_SCAN_SALES_REP_NUMBER,
WDNRTFB.SALES_COMMISSION_PERCENTAGE			SALES_COMMISSION_PERCENTAGE,
COALESCE(WDNSCC.SALES_CHANNEL_CODE,'NC/ADJ')		SALES_CHANNEL_CODE,
WDNRTFB.DV_COMP_US_STANDARD_PRICE_AMT			DV_COMP_US_STANDARD_PRICE_AMT,
WIOXRT.FISCAL_ID					DV_FISCAL_YEAR_MTH_NUMBER_INT,
WDNRTFB.REPORTED_SALES_ORDER_NUM_INT			REPORTED_SALES_ORDER_NUM_INT, 
CASE	WHEN WIOXRT.FISCAL_ID <= BKGPDT.FISCAL_YEAR_MTH_NUMBER_INT  THEN BKGPDT.PROCESS_DATE
		ELSE CAST('1900-01-01' AS DATE) 
END PROCESS_DATE,
NARTRX.AR_TRX_KEY					AR_TRX_KEY,
SMATL.AR_TRX_LINE_KEY					AR_TRX_LINE_KEY,
WDNRTFB.PRODUCT_KEY					PRODUCT_KEY,
WDNRTFB.SALES_ORDER_KEY					SALES_ORDER_KEY,
WDNRTFB.SALES_ORDER_LINE_KEY				SALES_ORDER_LINE_KEY,
WDNRTFB.SHIP_TO_CUSTOMER_KEY 				SHIP_TO_CUSTOMER_KEY ,
WDNRTFB.SOLD_TO_CUSTOMER_KEY   				SOLD_TO_CUSTOMER_KEY  ,
WDNRTFB.BILL_TO_CUSTOMER_KEY 				BILL_TO_CUSTOMER_KEY ,
ESCT.NAME						SALES_CREDIT_TYPE_CODE,
USER EDW_CREATE_USER, 
USER EDW_UPDATE_USER, 
CURRENT_TIMESTAMP(0) EDW_CREATE_DATETIME, 
CURRENT_TIMESTAMP(0)EDW_UPDATE_DATETIME, 
WDNRTFB.CONVERSION_RT					CONVERSION_RT,
CASE	WHEN WDNRTFB.EXTRACT_TYPE_CODE IN ('REV','INV') THEN NARTRX.BK_AR_TRX_TYPE_CODE 
		WHEN WDNRTFB.EXTRACT_TYPE_CODE IN ('CORP_ADJ','AR_ADJUSTMENT') THEN WDNRTFB.EXTRACT_TYPE_CODE 
		ELSE 'UNKNOWN' 
END DV_TRANSACTION_NAME,
WIOXRT.DEFAULT_SC_FLAG  DEFAULT_SC_FLG,
WIOXRT.SK_LINE_SEQ_ID_INT,
WIOXRT.SCA_SOURCE_TYPE_CD,
WIOXRT.DV_TRANSACTION_SOURCE_CD, 
WIOXRT.DV_TRANSACTION_KEY,
COALESCE(WIOXRT.AMOUNT,0) AS AMOUNT,
COALESCE(WIOXRT.ACCTD_AMOUNT,0) AS ACCTD_AMOUNT,
COALESCE(WIOXRT.TRANSACTION_QUANTITY,0) AS TRANSACTION_QUANTITY1 ,
CASE WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999
THEN (
CASE	WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL 
	OR	NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
	AND	DV_BKGS_INTL_DEMO_FLAG='N' 
	AND	DV_BKGS_REPL_DEMO_FLAG='N' 
	AND	DV_BKGS_REVENUE_FLAG='Y' 
	AND	DV_BKGS_CHARGES_FLAG='N' 
	AND	DV_BKGS_OVERLAY_FLAG='N' 
	AND	DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
	AND	DV_BKGS_MISC_FLAG='N' 
	AND	DV_BKGS_SALESREP_FLAG='N' THEN 'Y' 
ELSE	'N' 
END)
ELSE 
(CASE	WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL 
	OR	NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
	AND	DV_BKGS_INTL_DEMO_FLAG='N' 
	AND	DV_BKGS_REPL_DEMO_FLAG='N' 
	AND	DV_BKGS_REVENUE_FLAG='Y' 
	AND	DV_BKGS_CHARGES_FLAG='N' 
	AND	DV_BKGS_OVERLAY_FLAG='N' 
	AND	DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
	AND	DV_BKGS_MISC_FLAG='N' 
	AND	DV_BKGS_SALESREP_FLAG='N' THEN 'Y' 
ELSE	'N' 
END )  END DV_REVENUE_RECOGNITION_FLG, /* Added as part of true demand bkgs definition*/
CASE WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999
THEN (CASE	WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL 
	OR	NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
	AND	DV_BKGS_INTL_DEMO_FLAG='N' 
	AND	DV_BKGS_REPL_DEMO_FLAG='N' 
	AND	DV_BKGS_REVENUE_FLAG='Y' 
	AND	DV_BKGS_CHARGES_FLAG='N' 
	AND	DV_BKGS_OVERLAY_FLAG='N' 
	AND	DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
	AND	DV_BKGS_MISC_FLAG='N' 
	AND	DV_BKGS_SALESREP_FLAG='N' 
	AND ELST.TERRITORY_NODE_LEVEL1_CODE = 'WW Distribution'THEN 'Y' 
    ELSE	'N' 
    END)
ELSE 
(CASE	WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL 
	OR	NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
	AND	DV_BKGS_INTL_DEMO_FLAG='N' 
	AND	DV_BKGS_REPL_DEMO_FLAG='N' 
	AND	DV_BKGS_REVENUE_FLAG='Y' 
	AND	DV_BKGS_CHARGES_FLAG='N' 
	AND	DV_BKGS_OVERLAY_FLAG='N' 
	AND	DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
	AND	DV_BKGS_MISC_FLAG='N' 
	AND	DV_BKGS_SALESREP_FLAG='N' 
	AND ELST.TERRITORY_NODE_LEVEL1_CODE = 'WW Distribution'THEN 'Y' 
ELSE	'N' 
END )
END DV_NET_SPREAD_FLG,  /* Added as part of true demand bkgs definition*/   
WIOXRT.ACTION_CODE ACTION_CODE,
'I' AS DML_TYPE,
WIOXRT.GLOBAL_NAME ,
COALESCE(WDNRTFB.DV_LOCAL_EXTND_LIST_PRICE_AMT,0)   DV_LOCAL_EXTND_LIST_PRICE_AMT,
COALESCE(WDNRTFB.LOCAL_UNIT_LIST_PRICE_AMT,0)		LOCAL_UNIT_LIST_PRICE_AMT,
COALESCE(WDNRTFB.DV_UNIT_LIST_PRICE_USD_AMT,0)		DV_UNIT_LIST_PRICE_USD_AMT,
WIOXRT.SALES_MOTION_CD
FROM	
	(SELECT PROCESS_DATE , FISCAL_YEAR_MTH_NUMBER_INT FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL )  BKGPDT,
	$$STGDB.WI_OM_XXNCR_REVENUE_TRX_P WIOXRT
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
	ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
INNER JOIN   $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_P WDNRTFB
	ON ( WDNRTFB.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID
	AND WDNRTFB.GLOBAL_NAME = WIOXRT.GLOBAL_NAME )
INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
	ON (SORR.RULE_ID = WIOXRT.ACCOUNTING_RULE_ID
	AND SORR.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
INNER JOIN $$FINLGLVWDB.N_AR_ACCOUNTING_RULE NAAR
	ON (NAAR.BK_ACCOUNTING_RULE_NAME = SORR.NAME)
INNER JOIN $$ETLVWDB.EL_SALES_REP ELSALER
	ON ( ELSALER.SALES_REP_ID = WIOXRT.SALESREP_ID 
	AND ELSALER.GLOBAL_NAME = WIOXRT.GLOBAL_NAME )
INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SMATL
	ON ( WIOXRT.CUSTOMER_TRX_LINE_ID = SMATL.SK_CUSTOMER_TRX_LINE_ID_LINT
	AND NSSC.SOURCE_SYSTEM_CODE = SMATL.SS_CODE) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
	ON ( SMATL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY )
INNER JOIN $$ETLVWDB.EL_SALES_TERRITORY ELST 
	ON (ELST.TERRITORY_ID = WIOXRT.TERRITORY_ID
	AND ELST.GLOBAL_NAME = WIOXRT.GLOBAL_NAME) 
INNER JOIN $$ETLVWDB.SM_AR_TRX SMARTRX
	ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
	AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX
	ON (SMARTRX.AR_TRX_KEY = NARTRX.AR_TRX_KEY) 
INNER JOIN $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA 
	ON (NCA.CUSTOMER_ACCOUNT_KEY = NARTRX.SOLD_TO_CUSTOMER_KEY) 
INNER JOIN $$COMREFVWDB.N_ERP_CUST_ACCT_LOC_USE NECAL   
	ON (NECAL.ERP_CUST_ACCOUNT_LOCATION_KEY = NARTRX.BILL_TO_CUSTOMER_KEY) 
INNER JOIN 	$$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA1  
	ON (NCA1.CUSTOMER_ACCOUNT_KEY = NECAL.CUSTOMER_ACCOUNT_KEY) 
INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT 
	ON (WIOXRT.SALES_CREDIT_TYPE_ID = ESCT.SK_CREDIT_TYPE_ID
	AND WIOXRT.GLOBAL_NAME = ESCT.GLOBAL_NAME)
LEFT OUTER JOIN $$ETLVWDB.EL_AR_ADJUSTMENT_TRX EAAT 
	ON (EAAT.SK_ADJUSTMENT_ID_INT = WIOXRT.ADJUSTMENT_ID
	AND EAAT.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
	AND WIOXRT.EXTRACT_TYPE='AR_ADJUSTMENT' ) 
LEFT OUTER JOIN $$ETLVWDB.SM_ST_OM_RA_CUST_TRX_LN_GLDT SSORCTLG 
	ON ( SSORCTLG.CUST_TRX_LINE_GL_DIST_ID = WIOXRT.CUST_TRX_LINE_GL_DIST_ID 
	AND SSORCTLG.SS_CODE = NSSC.SOURCE_SYSTEM_CODE ) 
LEFT OUTER JOIN $$COMREFVWDB.N_FISCAL_MONTH NFM
	ON ( CAST(WIOXRT.GL_DATE AS DATE) >= NFM.FISCAL_MONTH_START_DATE 
	AND CAST(WIOXRT.GL_DATE AS DATE) <= NFM.FISCAL_MONTH_END_DATE)
LEFT OUTER JOIN $$STGDB.WI_DRVD_NCR_SLS_CHNL_CODE_P WDNSCC
	ON (WDNSCC.TRANSACTION_SEQUENCE_ID = WIOXRT.TRANSACTION_SEQUENCE_ID	
	AND WDNSCC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)


Post SQL : 



Target11 Name : WI_DRVD_NCR_REV_FOR_BKG_OM_7


Pre SQL : 



Post SQL : 
UPDATE WREV FROM 
$$STGDB .WI_DRVD_NCR_REV_FOR_BKG_OM WREV,
$$STGDB .WI_DRVD_NCR_REVENUE_TRX_BKG WOM,
$$COMREFVWDB .N_PRODUCT NP,
$$COMREFVWDB .N_PRODUCT_FAMILY NPF
SET DV_BKGS_CORP_BKG_FLAG = 'N',
DV_REVENUE_RECOGNITION_FLG='N',
DV_NET_SPREAD_FLG= 'N'
WHERE WREV.TRANSACTION_SEQUENCE_ID_INT=WOM.TRANSACTION_SEQUENCE_ID 
AND WREV.GLOBAL_NAME=WOM.GLOBAL_NAME
AND WOM.INVENTORY_ITEM_ID = NP.SK_INVENTORY_ITEM_ID_INT
AND NP.RU_BK_PRODUCT_FAMILY_ID = NPF.BK_PRODUCT_FAMILY_ID
AND NPF.BK_BUSINESS_UNIT_ID ='CDBU'
AND NP.GOODS_OR_SERVICE_TYPE = 'GOODS'
AND WOM.ACCOUNT_CODE NOT IN ('40100','50100','50120');

/*MARGIN_ACQUISITIONS_DIVESTITURE*/

UPDATE WREV FROM 
$$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM WREV,
$$STGDB .WI_DRVD_NCR_REVENUE_TRX_BKG WOM,
$$COMREFVWDB.N_PRODUCT NP
SET DV_BKGS_CORP_BKG_FLAG = 'N',
 DV_REVENUE_RECOGNITION_FLG='N',
 DV_NET_SPREAD_FLG= 'N'
 WHERE WREV.TRANSACTION_SEQUENCE_ID_INT=WOM.TRANSACTION_SEQUENCE_ID 
 AND WREV.GLOBAL_NAME=WOM.GLOBAL_NAME
 AND WOM.INVENTORY_ITEM_ID = NP.SK_INVENTORY_ITEM_ID_INT
  AND NP.DIVESTITURE_TYPE_CD <>'UNKNOWN'
  AND WOM.ACCOUNT_CODE  IN ('40111','50300','42710','42305')
AND WREV.DV_FISCAL_YEAR_MTH_NUMBER_INT IN (SELECT FISCAL_ID FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE);

COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM;


Source12 Name : SQ_EX_OM_XXNCR_REVENUE_TRX_P_8


Pre SQL : 
DELETE FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P ALL;


SQL Query : 
SELECT 
 WIOXRT.BATCH_ID,
 WIOXRT.ACCOUNTING_RULE_ID,
 WIOXRT.ACCOUNTING_RULE_NAME,
 WIOXRT.ACCOUNT_CLASS,
 WIOXRT.ACCOUNT_CODE,
 WIOXRT.ACCTD_AMOUNT,
 WIOXRT.ADJUSTMENT_ID,
 WIOXRT.ADJUSTMENT_NUMBER,
 WIOXRT.ADJUSTMENT_TYPE,
 WIOXRT.AMOUNT,
 WIOXRT.BILL_TO_CUSTOMER_ID,
 WIOXRT.BILL_TO_SITE_USE_ID,
 WIOXRT.CODE_COMBINATION_ID,
 WIOXRT.COGS_PERCENT,
 WIOXRT.COMMENTS,
 WIOXRT.CONTEXT,
 WIOXRT.CREATED_BY,
 WIOXRT.CREATION_DATE,
 WIOXRT.CUSTOMER_TRX_ID,
 WIOXRT.CUSTOMER_TRX_LINE_ID,
 WIOXRT.CUST_TRX_LINE_GL_DIST_ID,
 WIOXRT.DEFAULT_SC_FLAG,
 WIOXRT.EXTENDED_AMOUNT,
 WIOXRT.EXTRACT_TYPE,
 WIOXRT.FISCAL_ID,
 WIOXRT.FORWARD_REVERSE_FLAG,
 WIOXRT.FUNC_CURRENCY_CODE,
 WIOXRT.GES_UPDATE_DATE,
 WIOXRT.GLOBAL_NAME,
 WIOXRT.GL_DATE,
 WIOXRT.GL_POSTED_DATE,
 WIOXRT.GROUPING_ID,
 WIOXRT.INVENTORY_ITEM_ID,
 WIOXRT.INVOICE_CURRENCY_CODE,
 WIOXRT.INVOICE_PERCENT,
 WIOXRT.INVOICING_RULE_ID,
 WIOXRT.LAST_UPDATED_BY,
 WIOXRT.LAST_UPDATE_DATE,
 WIOXRT.LATEST_RECORD_FLAG,
 WIOXRT.SK_LINE_SEQ_ID_INT,
 WIOXRT.LINE_TYPE,
 WIOXRT.LINK_TO_CUST_TRX_LINE_ID,
 WIOXRT.ORDER_HEADER_ID,
 WIOXRT.ORDER_LINE_ID,
 WIOXRT.ORDER_NUMBER,
 WIOXRT.ORG_ID,
 WIOXRT.LINE_PERCENT,
 WIOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 WIOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 WIOXRT.QUOTA_FLAG,
 WIOXRT.REASON_CODE,
 WIOXRT.REBATE_AMOUNT,
 WIOXRT.REBATE_PERCENTAGE_ID,
 WIOXRT.REQUEST_ID,
 WIOXRT.RULE_START_DATE,
 WIOXRT.SALESREP_ID,
 WIOXRT.SALES_CREDIT_TYPE_ID,
 WIOXRT.SHIP_TO_CUSTOMER_ID,
 WIOXRT.SHIP_TO_SITE_USE_ID,
 WIOXRT.SOLD_TO_CUSTOMER_ID,
 WIOXRT.SCA_SOURCE_TYPE_CD,
 WIOXRT.SPLIT_PERCENT,
 WIOXRT.TERRITORY_ID,
 WIOXRT.TRANSACTION_DATE,
 WIOXRT.TRANSACTION_GROUPING_TYPE,
 WIOXRT.TRANSACTION_QUANTITY,
 WIOXRT.TRANSACTION_SEQUENCE_ID,
 WIOXRT.TRX_DATE,
 WIOXRT.TRX_NAME,
 WIOXRT.TRX_NUMBER,
 WIOXRT.TRX_TYPE,
 WIOXRT.UNIT_SELLING_PRICE,
 WIOXRT.UNIT_STANDARD_PRICE,
 WIOXRT.CREATE_DATETIME,
 WIOXRT.ACTION_CODE ,
'RI' EXCEPTION_TYPE,
WIOXRT.DV_TRANSACTION_KEY, 
WIOXRT.DV_TRANSACTION_SOURCE_CD,
WIOXRT.SALES_MOTION_CD
FROM   
	$$STGDB.WI_OM_XXNCR_REVENUE_TRX_P WIOXRT
LEFT OUTER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
	ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
WHERE
(
NOT EXISTS ( SELECT 1 FROM $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC	
	WHERE NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
OR
NOT EXISTS (SELECT 1 FROM $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_P WDNRTFB
	WHERE WDNRTFB.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID
	AND WDNRTFB.GLOBAL_NAME = WIOXRT.GLOBAL_NAME ) 
OR
NOT EXISTS (SELECT 1 FROM $$ETLVWDB.EL_RA_RULES SORR,	
	$$FINLGLVWDB.N_AR_ACCOUNTING_RULE NAAR
	WHERE SORR.RULE_ID = WIOXRT.ACCOUNTING_RULE_ID
	AND SORR.GLOBAL_NAME= WIOXRT.GLOBAL_NAME
	AND NAAR.BK_ACCOUNTING_RULE_NAME = SORR.NAME) 
OR 
NOT EXISTS (SELECT 1 FROM $$ETLVWDB.EL_SALES_REP ELSALER
	WHERE ELSALER.SALES_REP_ID =  WIOXRT.SALESREP_ID 
	AND ELSALER.GLOBAL_NAME =  WIOXRT.GLOBAL_NAME ) 
OR
NOT EXISTS (SELECT 1 FROM $$ETLVWDB.SM_SALES_ORDER_LINE SMSOL ,
			  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
	WHERE SMSOL.SK_SO_LINE_ID_INT = WIOXRT.ORDER_LINE_ID
	AND SMSOL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
	AND SMSOL.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY ) 
OR
NOT EXISTS (SELECT 1 FROM  $$ETLVWDB.EL_SALES_TERRITORY UCH
	WHERE  UCH.TERRITORY_ID  =  WIOXRT.TERRITORY_ID
	AND UCH.GLOBAL_NAME = WIOXRT.GLOBAL_NAME ) 		
OR
NOT EXISTS (SELECT 1 FROM  $$ETLVWDB.SM_AR_TRX_LINE SMATL
	WHERE WIOXRT.CUSTOMER_TRX_LINE_ID = SMATL.SK_CUSTOMER_TRX_LINE_ID_LINT
	AND NSSC.SOURCE_SYSTEM_CODE = SMATL.SS_CODE ) 
OR
NOT EXISTS ( SELECT 1 FROM $$ETLVWDB.SM_AR_TRX SMARTRX , 
		      $$FINLGLVWDB.N_AR_TRX NARTRX, 
		      $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA
	WHERE SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
	AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
	AND SMARTRX.AR_TRX_KEY = NARTRX.AR_TRX_KEY
	AND NCA.CUSTOMER_ACCOUNT_KEY = NARTRX.SOLD_TO_CUSTOMER_KEY)
OR 
NOT EXISTS (SELECT 1 FROM $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT 
		WHERE WIOXRT.SALES_CREDIT_TYPE_ID = ESCT.SK_CREDIT_TYPE_ID
		AND WIOXRT.GLOBAL_NAME = ESCT.GLOBAL_NAME)
)


Post SQL : 



Target12 Name : EX_OM_XXNCR_REVENUE_TRX_P1_8


Pre SQL : 



Post SQL : 
COLLECT STATS ON $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P;