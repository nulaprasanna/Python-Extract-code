ETL Name:	wf_WI_DRVD_NCR_REV_FOR_BKG_CG.XML


Session 1: 	s_m_WI_DRVD_NCR_REV_FOR_BKG_CG
Mapping 1: 	m_WI_DRVD_NCR_REV_FOR_BKG_CGm_WI_DRVD_NCR_REV_FOR_BKG_CG


Source1 Name : SQ_WI_DRVD_NCR_REV_TRX_1


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG ALL;


SQL Query : 
SELECT 
   BATCH_ID  , 
   ACCOUNTING_RULE_ID  , 
   ACCOUNTING_RULE_NAME  , 
   ACCOUNT_CLASS  , 
   ACCOUNT_CODE  , 
   ACCTD_AMOUNT  , 
   ADJUSTMENT_ID  , 
   ADJUSTMENT_NUMBER  , 
   ADJUSTMENT_TYPE  , 
   AMOUNT  , 
   BILL_TO_CUSTOMER_ID  , 
   BILL_TO_SITE_USE_ID  , 
   CODE_COMBINATION_ID  , 
   COGS_PERCENT  , 
   COMMENTS  , 
   CONTEXT  , 
   CREATED_BY  , 
   CREATION_DATE  , 
   CUSTOMER_TRX_ID  , 
   CUSTOMER_TRX_LINE_ID  , 
   CUST_TRX_LINE_GL_DIST_ID  , 
   DEFAULT_SC_FLAG  , 
   EXTENDED_AMOUNT  , 
   EXTRACT_TYPE  , 
   FISCAL_ID  , 
   FORWARD_REVERSE_FLAG  , 
   FUNC_CURRENCY_CODE  , 
   GES_UPDATE_DATE  , 
   GLOBAL_NAME  , 
   GL_DATE  , 
   GL_POSTED_DATE  , 
   GROUPING_ID  , 
   INVENTORY_ITEM_ID  , 
   INVOICE_CURRENCY_CODE  , 
   INVOICE_PERCENT  , 
   INVOICING_RULE_ID  , 
   LAST_UPDATED_BY  , 
   LAST_UPDATE_DATE  , 
   LATEST_RECORD_FLAG  , 
   LINE_SEQ_ID  , 
   LINE_TYPE  , 
   LINK_TO_CUST_TRX_LINE_ID  , 
   ORDER_HEADER_ID  , 
   ORDER_LINE_ID  , 
   ORDER_NUMBER  , 
   ORG_ID  , 
   LINE_PERCENT  , 
   PREVIOUS_CUSTOMER_TRX_ID  , 
   PREVIOUS_CUSTOMER_TRX_LINE_ID  , 
   QUOTA_FLAG  , 
   REASON_CODE  , 
   REBATE_AMOUNT  , 
   REBATE_PERCENTAGE_ID  , 
   REQUEST_ID  , 
   RULE_START_DATE  , 
   SALESREP_ID  , 
   SALES_CREDIT_TYPE_ID  , 
   SHIP_TO_CUSTOMER_ID  , 
   SHIP_TO_SITE_USE_ID  , 
   SOLD_TO_CUSTOMER_ID  , 
   SOURCE_TYPE  , 
   SPLIT_PERCENT  , 
   TERRITORY_ID  , 
   TRANSACTION_DATE  , 
   TRANSACTION_GROUPING_TYPE  , 
   TRANSACTION_QUANTITY  , 
   TRANSACTION_SEQUENCE_ID  , 
   TRX_DATE  , 
   TRX_NAME  , 
   TRX_NUMBER  , 
   TRX_TYPE  , 
   UNIT_SELLING_PRICE  , 
   UNIT_STANDARD_PRICE  , 
   CREATE_DATETIME  , 
   ACTION_CODE  , 
   DV_TRANSACTION_SOURCE_CD  , 
   DV_TRANSACTION_KEY ,
   SALES_REP_NUMBER, 
   /*SALES_TERRITORY_KEY, */ /*commented as part of AR default sc logic change q1fy21*/
   CASE WHEN (NABS.BK_BATCH_SOURCE_NAME IN ('DCA TWO-TIER','DCA TWO TIER') AND DRVD.DEFAULT_SC_FLAG='Y')
        THEN RSH.SALES_TERRITORY_KEY ELSE DRVD.SALES_TERRITORY_KEY END AS SALES_TERRITORY_KEY,
   BK_SALES_CREDIT_TYPE_CODE,
   SK_SC_AGENT_ID_INT,
   SOURCE_DATA_KEY5,
   'UNKNOWN' AS SALES_MOTION_CD,   
  /*COALESCE( SMC.SALES_MOTION_CD, 'UNKNOWN' ) SALES_MOTION_CD,*/ /* Commented as part of SQ Net change removal - Day1 FY21 */
  CASE WHEN ( NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE') 
                OR ( NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ')  AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))
	   THEN (CASE WHEN NSOLN_XAAS.RU_SERVICE_CONTRACT_START_DTM IN ('1900-01-01 00:00:00','3500-01-01 00:00:00') THEN NULL ELSE NSOLN_XAAS.RU_SERVICE_CONTRACT_START_DTM END)
	   ELSE (CASE WHEN NSOLN.RU_SERVICE_CONTRACT_START_DTM IN ('1900-01-01 00:00:00','3500-01-01 00:00:00') THEN NULL ELSE NSOLN.RU_SERVICE_CONTRACT_START_DTM END)
	   END AS RU_SERVICE_CONTRACT_START_DTM1,
  CASE WHEN ( NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE') 
                OR ( NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ')  AND NATL.TRX_LINE_SRC_NAME IN ('XAAS'))) 
	   THEN (CASE WHEN NSOLN_XAAS.RU_SERVICE_CONTRACT_END_DTM IN ('1900-01-01 00:00:00','3500-01-01 00:00:00') THEN NULL ELSE NSOLN_XAAS.RU_SERVICE_CONTRACT_END_DTM END) 
	   ELSE (CASE WHEN NSOLN.RU_SERVICE_CONTRACT_END_DTM IN ('1900-01-01 00:00:00','3500-01-01 00:00:00') THEN NULL ELSE NSOLN.RU_SERVICE_CONTRACT_END_DTM END) 
	   END AS RU_SERVICE_CONTRACT_END_DTM1,
  CASE WHEN ( NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE') 
                OR ( NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ')  AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')
       )) THEN NSOLV_XAAS.RU_SRVC_CNTRCT_DRTN_MNTHS_CNT ELSE NSOLV.RU_SRVC_CNTRCT_DRTN_MNTHS_CNT END AS RU_SRVC_CNTRCT_DRTN_MNTHS_CNT
FROM
   $$STGDB.WI_DRVD_NCR_REV_TRX DRVD
   LEFT JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
   ON DRVD.AR_BATCH_SOURCE_KEY = NABS.AR_BATCH_SOURCE_KEY
   INNER JOIN (SELECT SALES_TERRITORY_KEY FROM $$COMREFVWDB.R_SALES_HIERARCHY WHERE L6_SALES_TERRITORY_DESCR='WW Distribution-MISCL6'
   QUALIFY ROW_NUMBER() OVER(PARTITION BY SALES_TERRITORY_KEY ORDER BY SALES_TERRITORY_KEY DESC)=1)RSH
   ON 1=1
  /*LEFT JOIN $$STGDB.WI_AR_SALES_MOTION_CHANGE SMC
  ON DRVD.ORDER_LINE_ID = SMC.SK_SO_LINE_ID_INT*/ /* Commented as part of SQ Net change removal - Day1 FY21 */
  LEFT JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON DRVD.CUSTOMER_TRX_LINE_ID=NATL.SK_CUSTOMER_TRX_LINE_ID_LINT
  /*acv changes*/
  LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SSOL
   ON ( SSOL.SK_SO_LINE_ID_INT = DRVD.ORDER_LINE_ID 
        AND SSOL.SS_CODE = 'CG')
   LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN
   ON ( SSOL.SALES_ORDER_LINE_KEY = NSOLN.SALES_ORDER_LINE_KEY
   AND NSOLN.END_TV_DATETIME = '3500-01-01 00:00:00' )
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV NSOLV
   ON(SSOL.SALES_ORDER_LINE_KEY = NSOLV.SALES_ORDER_LINE_KEY
   AND NSOLV.END_TV_DTM = '3500-01-01 00:00:00')
   LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN_XAAS
   ON ( NATL.RU_EXAAS_SUBSCRIPTION_SOL_KEY = NSOLN_XAAS.SALES_ORDER_LINE_KEY
   AND NSOLN.END_TV_DATETIME = '3500-01-01 00:00:00' )
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV NSOLV_XAAS
   ON(NATL.RU_EXAAS_SUBSCRIPTION_SOL_KEY = NSOLV_XAAS.SALES_ORDER_LINE_KEY
   AND NSOLV.END_TV_DTM = '3500-01-01 00:00:00')
  
   WHERE  GLOBAL_NAME IN( 'CG' ,'CDC' )
   /*AND NABS.BK_BATCH_SOURCE_NAME <> 'ICMS-XAAS'*/
   AND (NABS.BK_BATCH_SOURCE_NAME NOT LIKE ('ICMS-XAAS%')
   OR (NABS.BK_BATCH_SOURCE_NAME IN ('ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME NOT IN ('XAAS')) )  /*ADDED AS PART OF Q1FY19 CE-BRAZIL*/ 
   AND DRVD.ROL_TRX_LINE_GL_DISTRI_KEY < 0
   
   UNION ALL
   
   SELECT 
   BATCH_ID  , 
   ACCOUNTING_RULE_ID  , 
   ACCOUNTING_RULE_NAME  , 
   ACCOUNT_CLASS  , 
   ACCOUNT_CODE  , 
   ACCTD_AMOUNT  , 
   ADJUSTMENT_ID  , 
   ADJUSTMENT_NUMBER  , 
   ADJUSTMENT_TYPE  , 
   AMOUNT  , 
   BILL_TO_CUSTOMER_ID  , 
   BILL_TO_SITE_USE_ID  , 
   CODE_COMBINATION_ID  , 
   COGS_PERCENT  , 
   COMMENTS  , 
   CONTEXT  , 
   CREATED_BY  , 
   CREATION_DATE  , 
   CUSTOMER_TRX_ID  , 
   CUSTOMER_TRX_LINE_ID  , 
   CUST_TRX_LINE_GL_DIST_ID  , 
   DEFAULT_SC_FLAG  , 
   EXTENDED_AMOUNT  , 
   EXTRACT_TYPE  , 
   FISCAL_ID  , 
   FORWARD_REVERSE_FLAG  , 
   FUNC_CURRENCY_CODE  , 
   GES_UPDATE_DATE  , 
   GLOBAL_NAME  , 
   GL_DATE  , 
   GL_POSTED_DATE  , 
   GROUPING_ID  , 
   INVENTORY_ITEM_ID  , 
   INVOICE_CURRENCY_CODE  , 
   INVOICE_PERCENT  , 
   INVOICING_RULE_ID  , 
   LAST_UPDATED_BY  , 
   LAST_UPDATE_DATE  , 
   LATEST_RECORD_FLAG  , 
   LINE_SEQ_ID  , 
   LINE_TYPE  , 
   LINK_TO_CUST_TRX_LINE_ID  , 
   ORDER_HEADER_ID  , 
   ORDER_LINE_ID  , 
   ORDER_NUMBER  , 
   ORG_ID  , 
   LINE_PERCENT  , 
   PREVIOUS_CUSTOMER_TRX_ID  , 
   PREVIOUS_CUSTOMER_TRX_LINE_ID  , 
   QUOTA_FLAG  , 
   REASON_CODE  , 
   REBATE_AMOUNT  , 
   REBATE_PERCENTAGE_ID  , 
   REQUEST_ID  , 
   RULE_START_DATE  , 
   SALESREP_ID  , 
   SALES_CREDIT_TYPE_ID  , 
   SHIP_TO_CUSTOMER_ID  , 
   SHIP_TO_SITE_USE_ID  , 
   SOLD_TO_CUSTOMER_ID  , 
   SOURCE_TYPE  , 
   SPLIT_PERCENT  , 
   TERRITORY_ID  , 
   TRANSACTION_DATE  , 
   TRANSACTION_GROUPING_TYPE  , 
   TRANSACTION_QUANTITY  , 
   TRANSACTION_SEQUENCE_ID  , 
   TRX_DATE  , 
   TRX_NAME  , 
   TRX_NUMBER  , 
   TRX_TYPE  , 
   UNIT_SELLING_PRICE  , 
   UNIT_STANDARD_PRICE  , 
   CREATE_DATETIME  , 
   ACTION_CODE  , 
   DV_TRANSACTION_SOURCE_CD  , 
   DV_TRANSACTION_KEY ,
   SALES_REP_NUMBER, 
   SALES_TERRITORY_KEY, 
   BK_SALES_CREDIT_TYPE_CODE ,
   SK_SC_AGENT_ID_INT,
   'UNKNOWN' AS SOURCE_DATA_KEY5,
   'UNKNOWN' AS SALES_MOTION_CD,
  /* COALESCE( SMC.SALES_MOTION_CD, 'UNKNOWN' ) SALES_MOTION_CD,*/ /* Commented as part of SQ Net change removal - Day1 FY21 */
  CASE WHEN NSOLN.RU_SERVICE_CONTRACT_START_DTM IN ('1900-01-01 00:00:00','3500-01-01 00:00:00') THEN NULL ELSE NSOLN.RU_SERVICE_CONTRACT_START_DTM END AS RU_SERVICE_CONTRACT_START_DTM1,
  CASE WHEN NSOLN.RU_SERVICE_CONTRACT_END_DTM IN ('1900-01-01 00:00:00','3500-01-01 00:00:00') THEN NULL ELSE NSOLN.RU_SERVICE_CONTRACT_END_DTM END AS RU_SERVICE_CONTRACT_END_DTM1,
  NSOLV.RU_SRVC_CNTRCT_DRTN_MNTHS_CNT
 FROM
   $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS	XAAS
   /*LEFT JOIN $$STGDB.WI_AR_SALES_MOTION_CHANGE SMC
   ON XAAS.ORDER_LINE_ID = SMC.SK_SO_LINE_ID_INT*/ /* Commented as part of SQ Net change removal - Day1 FY21 */
   /*acv changes*/
  LEFT OUTER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON ( XAAS.CUSTOMER_TRX_LINE_ID =NATL.SK_CUSTOMER_TRX_LINE_ID_LINT 
        AND NATL.SS_CODE = 'CG')
   LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN
   ON ( NATL.RU_EXAAS_SUBSCRIPTION_SOL_KEY = NSOLN.SALES_ORDER_LINE_KEY
   AND NSOLN.END_TV_DATETIME = '3500-01-01 00:00:00' )
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV NSOLV
   ON(NATL.RU_EXAAS_SUBSCRIPTION_SOL_KEY  = NSOLV.SALES_ORDER_LINE_KEY
   AND NSOLV.END_TV_DTM = '3500-01-01 00:00:00')
   WHERE  GLOBAL_NAME IN( 'CG' ,'CDC' )


Post SQL : 



Target1 Name : WI_DRVD_NCR_REV_BKG_CG_1


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_BKG_CG','D');


Source2 Name : SQ_WI_DRVD_NCR_REV_BKG_CG_NET_CHG_XAAS_REV_INV


Pre SQL : 



SQL Query : 
SELECT
   2         AS BATCH_ID ,
   COALESCE(SORA.RULE_ID,-999)        AS ACCOUNTING_RULE_ID ,
   WI_NET.PD_ACCOUNTING_RULE_NAME      AS ACCOUNTING_RULE_NAME ,
   WI_NET.ACCOUNT_CLASS_CODE           AS ACCOUNT_CLASS ,
   NULL        AS ACCOUNT_CODE ,
   WI_NET.DV_FUNC_AMT     AS ACCTD_AMOUNT ,
   -9999        AS ADJUSTMENT_ID ,
   NULL        AS ADJUSTMENT_NUMBER ,
   NULL        AS ADJUSTMENT_TYPE ,
   WI_NET.DV_TRX_AMT     AS AMOUNT ,
   -999        AS BILL_TO_CUSTOMER_ID ,
   -999        AS BILL_TO_SITE_USE_ID ,
   NULL        AS CODE_COMBINATION_ID ,
   NULL        AS COGS_PERCENT ,
   NULL        AS COMMENTS ,
   NULL        AS CONTEXT ,
   2         AS CREATED_BY ,
   WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE ,
   COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)  AS CUSTOMER_TRX_ID ,
   COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT ,-9999) AS CUSTOMER_TRX_LINE_ID ,
   COALESCE(NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT,-9999) AS CUST_TRX_LINE_GL_DIST_ID ,
   WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
   NULL        AS EXTENDED_AMOUNT ,
   CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN 'REV'  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN 'INV' END         AS  EXTRACT_TYPE ,
   (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
   WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
   WI_NET.PD_FUNCTIONAL_CURRENCY_CODE AS  FUNC_CURRENCY_CODE ,
   current_timestamp(0)   AS GES_UPDATE_DATE ,
   NSSC.GLOBAL_NAME             AS GLOBAL_NAME ,
   WI_NET.GL_DATETIME                    AS GL_DATE ,
   WI_NET.GL_POSTED_DATE                 AS GL_POSTED_DATE ,
   NULL         AS GROUPING_ID ,
  NP.SK_INVENTORY_ITEM_ID_INT    AS INVENTORY_ITEM_ID ,
   NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
   NULL         AS INVOICE_PERCENT ,
   NULL         AS INVOICING_RULE_ID ,
   2          AS LAST_UPDATED_BY ,
   current_timestamp(0)     AS LAST_UPDATE_DATE ,
   WI_NET.LAST_RECORD_FLAG               AS LATEST_RECORD_FLAG ,
   WI_NET.SK_LINE_SEQ_ID_INT             AS SK_LINE_SEQ_ID_INT ,
   WI_NET.LINE_TYPE_CODE AS LINE_TYPE, 
   NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
   -9999   AS ORDER_HEADER_ID ,
   -9999   AS ORDER_LINE_ID ,
   NULL    AS ORDER_NUMBER ,
   EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
   NULL         AS LINE_PERCENT ,
   NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
   NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
   NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG AS QUOTA_FLAG ,
   NULL         AS REASON_CODE ,
   NULL         AS REBATE_AMOUNT ,
   NULL         AS REBATE_PERCENTAGE_ID ,
   CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999   ELSE 999 END  AS REQUEST_ID ,
   WI_NET.RULE_START_DATETIME            AS RULE_START_DATE ,
   COALESCE(ESR_ALL.SALES_REP_ID,-999)AS SALESREP_ID,
   COALESCE(ESCT_ALL.SK_CREDIT_TYPE_ID , -999)  AS  SALES_CREDIT_TYPE_ID,
   NULL         AS SHIP_TO_CUSTOMER_ID ,
   -999         AS SHIP_TO_SITE_USE_ID ,
   -999         AS SOLD_TO_CUSTOMER_ID ,
   WI_NET.SCA_SOURCE_TYPE_CD             AS SCA_SOURCE_TYPE_CD ,
   WI_NET.SALES_COMMISSION_PERCENTAGE    AS SPLIT_PERCENT ,
   COALESCE(EST_ALL.TERRITORY_ID, -999) AS TERRITORY_ID ,
   COALESCE(WRSNT.SOURCE_COMMIT_DTM,CURRENT_DATE)     AS TRANSACTION_DATE1 ,
   WI_NET.TRANSACTION_GROUPING_TYPE_CODE AS TRANSACTION_GROUPING_TYPE ,
   WI_NET.DV_TRX_QTY AS  TRANSACTION_QUANTITY ,
   /*ROW_NUMBER()  OVER( ORDER BY WRSNT.SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,*/
   ROW_NUMBER()  OVER( ORDER BY TRANSACTION_DATE1 )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
   NAT.AR_TRX_DATETIME    AS TRX_DATE ,
   NULL       AS TRX_NAME ,
   NAT.BK_AR_TRX_NUMBER   AS TRX_NUMBER ,
   NATT.AR_TRX_TYPE_SHORT_CODE  AS TRX_TYPE ,
   NULL       AS UNIT_SELLING_PRICE ,
   NULL       AS UNIT_STANDARD_PRICE ,
   current_timestamp(0)   AS CREATE_DATETIME ,
   'I'        AS ACTION_CODE ,
   WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
   WI_NET.DV_TRANSACTION_KEY       AS DV_TRANSACTION_KEY ,
   WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
   WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
   WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE,   
   WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT, 
   'UNKNOWN' AS SALES_MOTION_CD,
   WI_NET.RU_SERVICE_CONTRACT_START_DTM ,
WI_NET.RU_SERVICE_CONTRACT_END_DTM   ,
WI_NET.DV_CONTRACT_DURATION          ,
WI_NET.DV_ANNUALIZED_FLG             ,
WI_NET.DV_ANNUALIZED_US_NET_AMT      ,
WI_NET.DV_MULTIYEAR_US_NET_AMT       ,
WI_NET.BOOKINGS_POLICY_CD

   FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_NET
   
   INNER JOIN 
    ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
   (
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
     union all   
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
     UNION ALL
     SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
     UNION ALL 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
     union all 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
     union all
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
     union all 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
     
     /* CSPP VIP Changes */
   UNION ALL
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
      UNION ALL 
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
   
     /* RCHETTRI : 11/18/2013 : ADDED TABLES */
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS DRVD_XAAS_BKG
   UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_SWSS_CG /*SWSS CHANGES*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_SWSS_CG /*SWSS CHANGES*/
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/ 
  ) TMP
    ) SM_MAX
   ON 1=1
   
   INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
    ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
   
   INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
    ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
    AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
    ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
    ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
    
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
    on WI_NET.DV_TRANSACTION_KEY =  NATLGD.BK_AR_TRX_LINE_GL_DISTRIB_KEY
   
   INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
   ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
   
   INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY      
   
INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
    ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
    AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY 
    
  LEFT OUTER JOIN (SELECT AR_TRX_LINE_KEY,SOURCE_COMMIT_DTM,EVENT_TYPE FROM  $$STGDB.WI_BKG_SCA_NRT_XAAS_TV GROUP BY 1,2,3 )WRSNT
   ON WRSNT.AR_TRX_LINE_KEY  = WI_NET.AR_TRX_LINE_KEY  
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE') /*CHANGED JOIN TO L.O.J FOR ENABLING ANNUITY NET CHANGES*/
 
   
   LEFT OUTER JOIN 
   ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
    FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
    QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
   ) NSCTT
    ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
    
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT             
    ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
    AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
    AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
    
   LEFT OUTER JOIN 
                   (   SELECT SALES_REP_ID,GLOBAL_NAME, SALES_REP_NUMBER 
                       FROM  $$ETLVWDB.EL_SALES_REP
                       QUALIFY ROW_NUMBER() OVER(PARTITION BY GLOBAL_NAME, SALES_REP_NUMBER ORDER BY SALES_REP_ID DESC) = 1
                   ) ESR_ALL
                   ON ESR_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                   AND ESR_ALL.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
   
   LEFT OUTER JOIN $$ETLVWDB.EL_SALES_TERRITORY EST_ALL
                   ON EST_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                   AND EST_ALL.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                   
   LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_ALL
                   ON ESCT_ALL.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                   AND ESCT_ALL.GLOBAL_NAME = NSSC.GLOBAL_NAME
   WHERE WI_NET.DV_TRANSACTION_SOURCE_CD IN ('REV','INV')
   AND NSSC.GLOBAL_NAME ='CG'
   AND WI_NET.XAAS_OFFER_ATRBTN_REV_LINE_KEY=-999       
   /*AND NABS.BK_BATCH_SOURCE_NAME IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
   AND (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
   OR (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))
   AND (WRSNT.AR_TRX_LINE_KEY IS NOT NULL OR WI_NET.OLD_TRANSACTION_SEQ_ID IN (SEL TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_CONTRACT_CHANGE_AR_FWD_XAAS))


Post SQL : 



Target2 Name : WI_DRVD_NCR_REV_BKG_CG_NET_CHG_XAAS_REV_INV


Pre SQL : 



Post SQL : 



Source3 Name : SQ_WI_DRVD_NCR_REV_BKG_CG_NET_CHG_XAAS_REV_INV_CDC


Pre SQL : 



SQL Query : 
SELECT
   2         AS BATCH_ID ,
   COALESCE(SORA.RULE_ID,-999)        AS ACCOUNTING_RULE_ID ,
   WI_NET.PD_ACCOUNTING_RULE_NAME      AS ACCOUNTING_RULE_NAME ,
   WI_NET.ACCOUNT_CLASS_CODE           AS ACCOUNT_CLASS ,
   NULL        AS ACCOUNT_CODE ,
   WI_NET.DV_FUNC_AMT     AS ACCTD_AMOUNT ,
   -9999        AS ADJUSTMENT_ID ,
   NULL        AS ADJUSTMENT_NUMBER ,
   NULL        AS ADJUSTMENT_TYPE ,
   WI_NET.DV_TRX_AMT     AS AMOUNT ,
   -999        AS BILL_TO_CUSTOMER_ID ,
   -999        AS BILL_TO_SITE_USE_ID ,
   NULL        AS CODE_COMBINATION_ID ,
   NULL        AS COGS_PERCENT ,
   NULL        AS COMMENTS ,
   NULL        AS CONTEXT ,
   2         AS CREATED_BY ,
   WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE ,
   COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)  AS CUSTOMER_TRX_ID ,
   COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT ,-9999) AS CUSTOMER_TRX_LINE_ID ,
   COALESCE(NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT,-9999) AS CUST_TRX_LINE_GL_DIST_ID ,
   WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
   NULL        AS EXTENDED_AMOUNT ,
   CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN 'REV'  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN 'INV' END         AS  EXTRACT_TYPE ,
   (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
   WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
   WI_NET.PD_FUNCTIONAL_CURRENCY_CODE AS  FUNC_CURRENCY_CODE ,
   current_timestamp(0)   AS GES_UPDATE_DATE ,
   NSSC.GLOBAL_NAME             AS GLOBAL_NAME ,
   WI_NET.GL_DATETIME                    AS GL_DATE ,
   WI_NET.GL_POSTED_DATE                 AS GL_POSTED_DATE ,
   NULL         AS GROUPING_ID ,
  ELMTL.INVENTORY_ITEM_ID    AS INVENTORY_ITEM_ID ,
   NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
   NULL         AS INVOICE_PERCENT ,
   NULL         AS INVOICING_RULE_ID ,
   2          AS LAST_UPDATED_BY ,
   current_timestamp(0)     AS LAST_UPDATE_DATE ,
   WI_NET.LAST_RECORD_FLAG               AS LATEST_RECORD_FLAG ,
   WI_NET.SK_LINE_SEQ_ID_INT             AS SK_LINE_SEQ_ID_INT ,
   WI_NET.LINE_TYPE_CODE AS LINE_TYPE, 
   NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
   -9999   AS ORDER_HEADER_ID ,
   -9999   AS ORDER_LINE_ID ,
   NULL    AS ORDER_NUMBER ,
   EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
   NULL         AS LINE_PERCENT ,
   NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
   NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
   NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG AS QUOTA_FLAG ,
   NULL         AS REASON_CODE ,
   NULL         AS REBATE_AMOUNT ,
   NULL         AS REBATE_PERCENTAGE_ID ,
   CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999   ELSE 999 END  AS REQUEST_ID ,
   WI_NET.RULE_START_DATETIME            AS RULE_START_DATE ,
   COALESCE(ESR_ALL.SALES_REP_ID,-999)AS SALESREP_ID,
   COALESCE(ESCT_ALL.SK_CREDIT_TYPE_ID , -999)  AS  SALES_CREDIT_TYPE_ID,
   NULL         AS SHIP_TO_CUSTOMER_ID ,
   -999         AS SHIP_TO_SITE_USE_ID ,
   -999         AS SOLD_TO_CUSTOMER_ID ,
   WI_NET.SCA_SOURCE_TYPE_CD             AS SCA_SOURCE_TYPE_CD ,
   WI_NET.SALES_COMMISSION_PERCENTAGE    AS SPLIT_PERCENT ,
   COALESCE(EST_ALL.TERRITORY_ID, -999) AS TERRITORY_ID ,
   WRSNT.SOURCE_COMMIT_DTM     AS TRANSACTION_DATE ,
   WI_NET.TRANSACTION_GROUPING_TYPE_CODE AS TRANSACTION_GROUPING_TYPE ,
   WI_NET.DV_TRX_QTY AS  TRANSACTION_QUANTITY ,
   ROW_NUMBER()  OVER( ORDER BY WRSNT.SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
   NAT.AR_TRX_DATETIME    AS TRX_DATE ,
   NULL       AS TRX_NAME ,
   NAT.BK_AR_TRX_NUMBER   AS TRX_NUMBER ,
   NATT.AR_TRX_TYPE_SHORT_CODE  AS TRX_TYPE ,
   NULL       AS UNIT_SELLING_PRICE ,
   NULL       AS UNIT_STANDARD_PRICE ,
   current_timestamp(0)   AS CREATE_DATETIME ,
   'I'        AS ACTION_CODE ,
   WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
   WI_NET.DV_TRANSACTION_KEY       AS DV_TRANSACTION_KEY ,
   WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
   WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
   WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE,   
   WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT, 
   'UNKNOWN' AS SALES_MOTION_CD
   FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_NET
   
   INNER JOIN 
    ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
   (
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
     union all   
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
     UNION ALL
     SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
     UNION ALL 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
     union all 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
     union all
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
     union all 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
     
     /* CSPP VIP Changes */
   UNION ALL
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
      UNION ALL 
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
   
     /* RCHETTRI : 11/18/2013 : ADDED TABLES */
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS DRVD_XAAS_BKG
   UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/

 
    ) TMP
    ) SM_MAX
   ON 1=1
   
   INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
    ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
   
   INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
    ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
    AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
    ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
    ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
    
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
    on WI_NET.DV_TRANSACTION_KEY =  NATLGD.BK_AR_TRX_LINE_GL_DISTRIB_KEY
   
   INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
   ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
   
   INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY      
   
 INNER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
   ON (NP.BK_PRODUCT_ID = ELMTL.SEGMENT1 )


INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
    ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
    AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY 
    
  INNER JOIN (SELECT AR_TRX_LINE_KEY,SOURCE_COMMIT_DTM,EVENT_TYPE FROM  $$STGDB.WI_BKG_SCA_NRT_XAAS_TV GROUP BY 1,2,3 )WRSNT
   ON WRSNT.AR_TRX_LINE_KEY  = WI_NET.AR_TRX_LINE_KEY  
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')
 
   
   LEFT OUTER JOIN 
   ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
    FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
    QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
   ) NSCTT
    ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
    
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT             
    ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
    AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
    AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
    
   LEFT OUTER JOIN 
                   (   SELECT SALES_REP_ID,GLOBAL_NAME, SALES_REP_NUMBER 
                       FROM  $$ETLVWDB.EL_SALES_REP
                       QUALIFY ROW_NUMBER() OVER(PARTITION BY GLOBAL_NAME, SALES_REP_NUMBER ORDER BY SALES_REP_ID DESC) = 1
                   ) ESR_ALL
                   ON ESR_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                   AND ESR_ALL.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
   
   LEFT OUTER JOIN $$ETLVWDB.EL_SALES_TERRITORY EST_ALL
                   ON EST_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                   AND EST_ALL.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                   
   LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_ALL
                   ON ESCT_ALL.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                   AND ESCT_ALL.GLOBAL_NAME = NSSC.GLOBAL_NAME
   WHERE WI_NET.DV_TRANSACTION_SOURCE_CD IN ('REV','INV')
   AND NSSC.GLOBAL_NAME ='CDC'
   AND WI_NET.XAAS_OFFER_ATRBTN_REV_LINE_KEY=-999       
   /*AND NABS.BK_BATCH_SOURCE_NAME IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
   AND NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/


Post SQL : 



Target3 Name : WI_DRVD_NCR_REV_BKG_CG_NET_CHG_XAAS_REV_INV_CDC


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_TRX_FOR_BKG_CG','D');


Source4 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_rev_inv


Pre SQL : 
/* insert default records which will be used by Net Change , Reversal records for EVENT_TYPE =INSERT and OLD_DEFAULT_SC_FLG = Y  */
/* Need to change once we get rebok implementation*/

DELETE FROM $$STGDB.WI_BKG_SCA_NRT_TV WHERE SALES_CREDIT_ASSIGNMENT_KEY IN ( -7777)
AND SCA_SOURCE_TYPE_CD = 'D'
AND SK_LINE_SEQ_ID_INT IN ( -7777)
AND EP_SOURCE_LINE_ID_INT = -9999
AND EP_SK_SALESREP_ID_INT IN ( 2063  )
AND EP_SK_SALES_CREDIT_TYPE_ID_INT = 1000
AND EP_SK_TERRITORY_ID_INT IN ( 1329  )
AND BK_SALES_CREDIT_TYPE_CODE IN ( 'Direct Sales' );


INSERT INTO $$STGDB.WI_BKG_SCA_NRT_TV
(
SALES_CREDIT_ASSIGNMENT_KEY   ,
SCA_SOURCE_TYPE_CD            ,
SK_LINE_SEQ_ID_INT            ,
SS_CD                         ,
EP_SOURCE_LINE_ID_INT         ,
EP_SK_SALESREP_ID_INT         ,
SCA_SALES_COMMISSION_PCT      ,
START_TV_DTM                  ,
END_TV_DTM                    ,
SCA_SOURCE_COMMIT_DTM         ,
EDW_CREATE_DTM                ,
EDW_UPDATE_DTM                ,
RU_SALES_ORDER_LINE_KEY       ,
RU_AR_TRANSACTION_LINE_KEY    ,
EP_SK_SALES_CREDIT_TYPE_ID_INT,
EP_SK_TERRITORY_ID_INT        ,
QUOTA_FLAG                    ,
BK_SALES_CREDIT_TYPE_CODE     ,
BK_FISCAL_MONTH_NUMBER_INT    ,
BK_FISCAL_YEAR_NUMBER_INT     ,
DV_FISCAL_YEAR_MONTH_NUM_INT  ,
EVENT_TYPE        ,
SALES_REP_NUMBER              ,
SALES_TERRITORY_KEY                       
)
SELECT
	-7777			AS		SALES_CREDIT_ASSIGNMENT_KEY   ,
	'D'				AS		SCA_SOURCE_TYPE_CD            ,
	-7777			AS		SK_LINE_SEQ_ID_INT            ,
	'CG'			AS		SS_CD                         ,
	-9999			AS		EP_SOURCE_LINE_ID_INT         ,
	2063			AS		EP_SK_SALESREP_ID_INT         , 
	100				AS		SCA_SALES_COMMISSION_PCT      ,
	'1900-01-01 00:00:00'		AS		START_TV_DTM                  ,
	'3500-01-01 00:00:00'		AS		END_TV_DTM                    ,
	CURRENT_TIMESTAMP(0)		AS		SCA_SOURCE_COMMIT_DTM         ,
	CURRENT_TIMESTAMP(0)		AS		EDW_CREATE_DTM                ,
	CURRENT_TIMESTAMP(0)		AS		EDW_UPDATE_DTM                ,
	-7777			AS		RU_SALES_ORDER_LINE_KEY       ,
	-7777			AS		RU_AR_TRANSACTION_LINE_KEY    ,
	1000			AS		EP_SK_SALES_CREDIT_TYPE_ID_INT,
	1329			AS		EP_SK_TERRITORY_ID_INT        , 
	'Y'				AS		QUOTA_FLAG                    ,
	'Direct Sales'							AS		BK_SALES_CREDIT_TYPE_CODE     ,
	NFISMN.BK_FISCAL_MONTH_NUMBER_INT		AS		BK_FISCAL_MONTH_NUMBER_INT    ,
	NFISMN.BK_FISCAL_YEAR_NUMBER_INT		AS		BK_FISCAL_YEAR_NUMBER_INT     ,
	EL.FISCAL_ID							AS		DV_FISCAL_YEAR_MONTH_NUM_INT  ,
	'INSERT'								AS		EVENT_TYPE 	,
	'99998'									AS		SALES_REP_NUMBER,
	73106									AS 		SALES_TERRITORY_KEY
	FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE EL
	INNER JOIN  $$COMREFVWDB.N_FISCAL_MONTH NFISMN		
	ON  EL.FISCAL_ID = ( (NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100) + NFISMN.BK_FISCAL_MONTH_NUMBER_INT );


SQL Query : 
SELECT
   2         AS BATCH_ID ,
   COALESCE(SORA.RULE_ID,-999)        AS ACCOUNTING_RULE_ID ,
   WI_NET.PD_ACCOUNTING_RULE_NAME      AS ACCOUNTING_RULE_NAME ,
   WI_NET.ACCOUNT_CLASS_CODE           AS ACCOUNT_CLASS ,
   NULL        AS ACCOUNT_CODE ,
   WI_NET.DV_FUNC_AMT     AS ACCTD_AMOUNT ,
   -9999        AS ADJUSTMENT_ID ,
   NULL        AS ADJUSTMENT_NUMBER ,
   NULL        AS ADJUSTMENT_TYPE ,
   WI_NET.DV_TRX_AMT     AS AMOUNT ,
   -999        AS BILL_TO_CUSTOMER_ID ,
   -999        AS BILL_TO_SITE_USE_ID ,
   NULL        AS CODE_COMBINATION_ID ,
   NULL        AS COGS_PERCENT ,
   NULL        AS COMMENTS ,
   NULL        AS CONTEXT ,
   2         AS CREATED_BY ,
   WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE ,
   COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)  AS CUSTOMER_TRX_ID ,
   COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT ,-9999) AS CUSTOMER_TRX_LINE_ID ,
   COALESCE(NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT,-9999) AS CUST_TRX_LINE_GL_DIST_ID ,
   WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
   NULL        AS EXTENDED_AMOUNT ,
   CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN 'REV'  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN 'INV' END         AS  EXTRACT_TYPE ,
   (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
   WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
   /*
   CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN WI_NET.PD_FUNCTIONAL_CURRENCY_CODE
     WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN NULL
   END        AS  FUNC_CURRENCY_CODE ,
   */
   WI_NET.PD_FUNCTIONAL_CURRENCY_CODE AS  FUNC_CURRENCY_CODE ,
   current_timestamp(0)   AS GES_UPDATE_DATE ,
   NSSC.GLOBAL_NAME             AS GLOBAL_NAME ,
   WI_NET.GL_DATETIME                    AS GL_DATE ,
   WI_NET.GL_POSTED_DATE                 AS GL_POSTED_DATE ,
   NULL         AS GROUPING_ID ,
   NP.SK_INVENTORY_ITEM_ID_INT    AS INVENTORY_ITEM_ID ,
   NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
   NULL         AS INVOICE_PERCENT ,
   NULL         AS INVOICING_RULE_ID ,
   2          AS LAST_UPDATED_BY ,
   current_timestamp(0)     AS LAST_UPDATE_DATE ,
   WI_NET.LAST_RECORD_FLAG               AS LATEST_RECORD_FLAG ,
   WI_NET.SK_LINE_SEQ_ID_INT             AS SK_LINE_SEQ_ID_INT ,
   /*
   CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN NATL.BK_AR_TRX_LINE_TYPE
     WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN NULL
   END          AS LINE_TYPE ,
   */
   WI_NET.LINE_TYPE_CODE AS LINE_TYPE, 
   NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
   
   /* Q2FY19 Dec Rel : XAAS Non reference trx change for below 3 ORDER attributes  */  
   CASE WHEN (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE') OR 
   (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))
   THEN -9999 ELSE COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999) END AS ORDER_HEADER_ID ,
   CASE WHEN (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE') OR 
   (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))
   THEN -9999
        WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END       AS ORDER_LINE_ID ,
   CASE WHEN (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE') OR 
   (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT', 'ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))
   THEN NULL ELSE NSO.BK_SO_NUMBER_INT END AS ORDER_NUMBER ,
  EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
   NULL         AS LINE_PERCENT ,
   NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
   NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
  /* RCHETTRI : REBOK CHANGES 
   ESCT.QUOTA_FLAG       AS QUOTA_FLAG  */
   CASE WHEN NSSC.GLOBAL_NAME ='CG' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
    ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG   ELSE WI_NET.QUOTA_FLAG END 
   END as   QUOTA_FLAG ,
   NULL         AS REASON_CODE ,
   NULL         AS REBATE_AMOUNT ,
   NULL         AS REBATE_PERCENTAGE_ID ,
   CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999   ELSE 999 END  AS REQUEST_ID ,
   WI_NET.RULE_START_DATETIME            AS RULE_START_DATE ,
   /* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)       AS SALESREP_ID */
   CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999) ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999) END as    SALESREP_ID,
   /* COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)   AS SALES_CREDIT_TYPE_ID  */
   CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999) ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) END as    SALES_CREDIT_TYPE_ID,
   NULL         AS SHIP_TO_CUSTOMER_ID ,
   -999         AS SHIP_TO_SITE_USE_ID ,
   -999         AS SOLD_TO_CUSTOMER_ID ,
   WI_NET.SCA_SOURCE_TYPE_CD             AS SCA_SOURCE_TYPE_CD ,
   WI_NET.SALES_COMMISSION_PERCENTAGE    AS SPLIT_PERCENT ,
   /* COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)      AS TERRITORY_ID */
   CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999) ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) END as TERRITORY_ID ,
   COALESCE(WRSNT.SCA_SOURCE_COMMIT_DTM,CURRENT_DATE)     AS TRANSACTION_DATE1 ,
   WI_NET.TRANSACTION_GROUPING_TYPE_CODE AS TRANSACTION_GROUPING_TYPE ,
   /* CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN NULL
     WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN WI_NET.DV_TRX_QTY 
   END        AS  TRANSACTION_QUANTITY ,
   */
   WI_NET.DV_TRX_QTY AS  TRANSACTION_QUANTITY ,
   /*ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,*/
   ROW_NUMBER()  OVER( ORDER BY TRANSACTION_DATE1 )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
   NAT.AR_TRX_DATETIME    AS TRX_DATE ,
   NULL       AS TRX_NAME ,
   NAT.BK_AR_TRX_NUMBER   AS TRX_NUMBER ,
   NATT.AR_TRX_TYPE_SHORT_CODE  AS TRX_TYPE ,
   NULL       AS UNIT_SELLING_PRICE ,
   NULL       AS UNIT_STANDARD_PRICE ,
   current_timestamp(0)   AS CREATE_DATETIME ,
   'I'        AS ACTION_CODE ,
   WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
   WI_NET.DV_TRANSACTION_KEY       AS DV_TRANSACTION_KEY ,
   WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
   WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
   WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE   ,
   WI_NET.SK_SC_AGENT_ID_INT   AS  SK_SC_AGENT_ID_INT ,
   WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD   ,
  /*CASE WHEN WI_NET.FORWARD_REVERSE_CODE='F' THEN NSOL.RU_SERVICE_CONTRACT_START_DTM  ELSE WI_NET.RU_SERVICE_CONTRACT_START_DTM  END AS RU_SERVICE_CONTRACT_START_DTM,
  CASE WHEN WI_NET.FORWARD_REVERSE_CODE='F' THEN NSOL.RU_SERVICE_CONTRACT_END_DTM ELSE WI_NET.RU_SERVICE_CONTRACT_END_DTM END AS RU_SERVICE_CONTRACT_END_DTM,
  CASE WHEN WI_NET.FORWARD_REVERSE_CODE='F' THEN NSOLV.RU_SRVC_CNTRCT_DRTN_MNTHS_CNT ELSE WI_NET.DV_CONTRACT_DURATION END AS DV_CONTRACT_DURATION,*/
  WI_NET.RU_SERVICE_CONTRACT_START_DTM,
  WI_NET.RU_SERVICE_CONTRACT_END_DTM,
  WI_NET.DV_CONTRACT_DURATION,
  WI_NET.DV_ANNUALIZED_FLG             ,
  WI_NET.DV_ANNUALIZED_US_NET_AMT      ,
  WI_NET.DV_MULTIYEAR_US_NET_AMT       ,
  WI_NET.BOOKINGS_POLICY_CD
  
 FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
   INNER JOIN 
    ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
   (
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
     union all   
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
     UNION ALL
     SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
     UNION ALL 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
     union all 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
     union all
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
     union all 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
     
    /* CSPP VIP Changes */
   UNION ALL
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
      UNION ALL 
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
   
  /* RCHETTRI : 11/18/2013 : ADDED TABLES */
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS 
   UNION ALL /*XAAS SC CHANGES*/
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_DRVD_XAAS
  UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_SWSS_CG /*SWSS CHANGES*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_SWSS_CG /*SWSS CHANGES*/ 
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
  ) TMP
    ) SM_MAX
   ON 1=1
   
   INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
    ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
   
   INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
    ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
    AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
    ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
    ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
    
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
    on WI_NET.DV_TRANSACTION_KEY =  NATLGD.BK_AR_TRX_LINE_GL_DISTRIB_KEY 
   
 INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
   ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
   
   INNER JOIN $$COMREFVWDB.N_PRODUCT NP
    ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY    	

   INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
    ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY
   INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
    ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY
	
	   /*LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV NSOLV
   ON(NSOL.SALES_ORDER_LINE_KEY = NSOLV.SALES_ORDER_LINE_KEY
   AND NSOLV.END_TV_DTM = '3500-01-01 00:00:00')*/
   
   INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
    ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
    AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY 
    
   LEFT OUTER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
    ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT 
    AND WRSNT.SK_SC_AGENT_ID_INT = WI_NET.SK_SC_AGENT_ID_INT
    AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE   
    AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')
   
   /* rchettri: left join instead of inner join 
   INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
   */
   LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
    on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
    AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME
   
   /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
   LEFT OUTER JOIN 
   ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
    FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
    QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
   ) NSCTT
    ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
    
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT             
    ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
    AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
    AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
    
   left outer join 
                   (   select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                       from  $$ETLVWDB.EL_SALES_REP
                       qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                   ) ESR_REVERSE
                   on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                   and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
   
   left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                   on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                   and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                   
   left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                   on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                   AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME
   WHERE WI_NET.DV_TRANSACTION_SOURCE_CD IN ('REV','INV')
   AND NSSC.GLOBAL_NAME ='CG'
   AND WI_NET.XAAS_OFFER_ATRBTN_REV_LINE_KEY=-999  
   AND WI_NET.MERAKI_REV_TRX_KEY=-999   /*MERAKI CHANGES*/
   /*AND NABS.BK_BATCH_SOURCE_NAME NOT IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
   AND ( (NABS.BK_BATCH_SOURCE_NAME NOT LIKE ALL  ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
   OR (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME NOT IN ('XAAS')))
         /* Q2FY19 Dec Rel : Added below exists to consider XAAS Non reference trx */   
         OR  EXISTS (SELECT 1 FROM $$ETLVWDB.EL_XAAS_TRX_FROM_ERP_SC EL WHERE EL.AR_TRX_LINE_KEY = WI_NET.AR_TRX_LINE_KEY AND EL.NON_REF_TRX_FLAG = 'Y' )
		)
   AND (WRSNT.SK_LINE_SEQ_ID_INT IS NOT NULL OR WI_NET.OLD_TRANSACTION_SEQ_ID IN (SEL TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_CONTRACT_CHANGE_AR_FWD))


Post SQL : 



Target4 Name : WI_DRVD_NCR_REV_BKG_CG_rev_inv


Pre SQL : 



Post SQL : 
/*knarlapu: Updating Account Code for REV Net-Chnage Records*/

UPDATE  STG
FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG STG
,$$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
,$$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST GLDT
,$$ETLVWDB.EL_XLA_DISTRIBUTION_LINKS_AR EXDLA
,$$ETLVWDB.EL_XLA_AE_LINES_AR EXALA	
,$$ETLVWDB.EL_XLA_AE_HEADERS_AR EXAHA	
,$$ETLVWDB.EL_AR_LEDGER EAL
,$$ETLVWDB.EV_N_GENERAL_LEDGER_ACCOUNT  ENGLA 
SET ACCOUNT_CODE=ENGLA.BK_FINANCIAL_ACCOUNT_CODE
WHERE STG.DV_TRANSACTION_SOURCE_CD IN ('REV') AND LAST_UPDATED_BY<>1
AND STG.GLOBAL_NAME = NSSC.GLOBAL_NAME 
AND STG.CUST_TRX_LINE_GL_DIST_ID = GLDT.SK_CST_TRX_LIN_GL_DIST_ID_LINT
AND GLDT.SS_CODE = NSSC.SOURCE_SYSTEM_CODE	
AND GLDT.ACCOUNT_CLASS_CODE = 'REV'  
AND EXDLA.SOURCE_DISTRIBUTION_ID_NUM_1 = GLDT.SK_CST_TRX_LIN_GL_DIST_ID_LINT
                AND EXDLA.GLOBAL_NAME = NSSC.GLOBAL_NAME
                AND EXDLA.SOURCE_DISTRIBUTION_TYPE = 'RA_CUST_TRX_LINE_GL_DIST_ALL'
                AND EXDLA.APPLICATION_ID = 222
AND EXALA.AE_LINE_NUM = EXDLA.AE_LINE_NUM
                AND EXALA.AE_HEADER_ID = EXDLA.AE_HEADER_ID
                AND EXALA.APPLICATION_ID = EXDLA.APPLICATION_ID
                AND EXALA.GLOBAL_NAME = EXDLA.GLOBAL_NAME
AND EXAHA.AE_HEADER_ID = EXALA.AE_HEADER_ID
                  AND EXAHA.APPLICATION_ID = EXALA.APPLICATION_ID
                  AND EXAHA.GLOBAL_NAME = EXALA.GLOBAL_NAME
                  AND EXAHA.BALANCE_TYPE_CODE = 'A'
AND EXAHA.LEDGER_ID = EAL.LEDGER_ID
AND  ENGLA.CODE_COMBINATION_ID = EXALA.CODE_COMBINATION_ID
AND ENGLA.GLOBAL_NAME = EXALA.GLOBAL_NAME ;

/*knarlapu: Updating Account Code for INV Net-Chnage Records*/

UPDATE STG
FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG STG,
(SELECT NATL.SK_CUSTOMER_TRX_LINE_ID_LINT, NATL.SS_CODE,MAX(ENGLA.GENERAL_LEDGER_ACCOUNT_KEY) AS GENERAL_LEDGER_ACCOUNT_KEY
 FROM
 $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE  NATL
 				ON NATL.AR_TRX_LINE_KEY= CASE  WHEN NATLGD.SUB_PRD_AR_TRX_LINE_KEY>0 THEN NATLGD.SUB_PRD_AR_TRX_LINE_KEY ELSE NATLGD.AR_TRX_LINE_KEY END
 				AND NATLGD.SS_CODE = NATL.SS_CODE	
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
                ON NATLGD.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
 INNER JOIN $$ETLVWDB.EL_XLA_DISTRIBUTION_LINKS_AR EXDLA
                 ON EXDLA.SOURCE_DISTRIBUTION_ID_NUM_1 = NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT
                 AND EXDLA.GLOBAL_NAME = NSSC.GLOBAL_NAME
                 AND EXDLA.SOURCE_DISTRIBUTION_TYPE = 'RA_CUST_TRX_LINE_GL_DIST_ALL'
                 AND EXDLA.APPLICATION_ID = 222
 INNER JOIN $$ETLVWDB.EL_XLA_AE_LINES_AR EXALA
                 ON EXALA.AE_LINE_NUM = EXDLA.AE_LINE_NUM
                 AND EXALA.AE_HEADER_ID = EXDLA.AE_HEADER_ID
                 AND EXALA.APPLICATION_ID = EXDLA.APPLICATION_ID
                 AND EXALA.GLOBAL_NAME = EXDLA.GLOBAL_NAME
 INNER JOIN $$ETLVWDB.EL_XLA_AE_HEADERS_AR EXAHA
                 ON EXAHA.AE_HEADER_ID = EXALA.AE_HEADER_ID
                 AND EXAHA.APPLICATION_ID = EXALA.APPLICATION_ID
                 AND EXAHA.GLOBAL_NAME = EXALA.GLOBAL_NAME
                 AND EXAHA.BALANCE_TYPE_CODE = 'A'
 INNER JOIN $$ETLVWDB.EV_N_GENERAL_LEDGER_ACCOUNT  ENGLA 
      ON (ENGLA.CODE_COMBINATION_ID = EXALA.CODE_COMBINATION_ID
      AND ENGLA.GLOBAL_NAME = EXALA.GLOBAL_NAME )         
WHERE EXISTS (SELECT 1 FROM $$ETLVWDB.EL_AR_LEDGER EAL WHERE EXAHA.LEDGER_ID = EAL.LEDGER_ID)
AND NATLGD.ACCOUNT_CLASS_CODE = 'REV'
AND NSSC.GLOBAL_NAME = 'CG'
GROUP BY  NATL.SK_CUSTOMER_TRX_LINE_ID_LINT, NATL.SS_CODE
)ACCT
,$$ETLVWDB.EV_N_GENERAL_LEDGER_ACCOUNT  ENGLA1 
SET ACCOUNT_CODE=ENGLA1.BK_FINANCIAL_ACCOUNT_CODE
WHERE STG.DV_TRANSACTION_SOURCE_CD IN ('INV')  AND LAST_UPDATED_BY<>1
AND STG.CUSTOMER_TRX_LINE_ID = ACCT.SK_CUSTOMER_TRX_LINE_ID_LINT 
AND STG.GLOBAL_NAME = ACCT.SS_CODE
AND ACCT.GENERAL_LEDGER_ACCOUNT_KEY=ENGLA1.GENERAL_LEDGER_ACCOUNT_KEY
AND ACCT.SS_CODE='CG';


Source5 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_rev_inv_CDC


Pre SQL : 
DELETE FROM $$STGDB.WI_BKG_SCA_NRT_TV WHERE SALES_CREDIT_ASSIGNMENT_KEY IN ( -4444)
 AND SCA_SOURCE_TYPE_CD = 'D'
 AND SK_LINE_SEQ_ID_INT IN ( -4444)
 AND EP_SOURCE_LINE_ID_INT = -9999
 AND EP_SK_SALESREP_ID_INT IN ( 2063  )
 AND EP_SK_SALES_CREDIT_TYPE_ID_INT = 1000
 AND EP_SK_TERRITORY_ID_INT IN ( 1329  )
 AND BK_SALES_CREDIT_TYPE_CODE IN ( 'Direct Sales' );
 
 
 INSERT INTO $$STGDB.WI_BKG_SCA_NRT_TV
 (
 SALES_CREDIT_ASSIGNMENT_KEY   ,
 SCA_SOURCE_TYPE_CD            ,
 SK_LINE_SEQ_ID_INT            ,
 SS_CD                         ,
 EP_SOURCE_LINE_ID_INT         ,
 EP_SK_SALESREP_ID_INT         ,
 SCA_SALES_COMMISSION_PCT      ,
 START_TV_DTM                  ,
 END_TV_DTM                    ,
 SCA_SOURCE_COMMIT_DTM         ,
 EDW_CREATE_DTM                ,
 EDW_UPDATE_DTM                ,
 RU_SALES_ORDER_LINE_KEY       ,
 RU_AR_TRANSACTION_LINE_KEY    ,
 EP_SK_SALES_CREDIT_TYPE_ID_INT,
 EP_SK_TERRITORY_ID_INT        ,
 QUOTA_FLAG                    ,
 BK_SALES_CREDIT_TYPE_CODE     ,
 BK_FISCAL_MONTH_NUMBER_INT    ,
 BK_FISCAL_YEAR_NUMBER_INT     ,
 DV_FISCAL_YEAR_MONTH_NUM_INT  ,
 EVENT_TYPE        ,
 SALES_REP_NUMBER              ,
 SALES_TERRITORY_KEY                       
 )
 SELECT
  -4444   AS  SALES_CREDIT_ASSIGNMENT_KEY   ,
  'D'    AS  SCA_SOURCE_TYPE_CD            ,
  -4444   AS  SK_LINE_SEQ_ID_INT            ,
  'CDC'   AS  SS_CD                         ,
  -9999   AS  EP_SOURCE_LINE_ID_INT         ,
  2063   AS  EP_SK_SALESREP_ID_INT         , 
  100    AS  SCA_SALES_COMMISSION_PCT      ,
  '1900-01-01 00:00:00'  AS  START_TV_DTM                  ,
  '3500-01-01 00:00:00'  AS  END_TV_DTM                    ,
  CURRENT_TIMESTAMP(0)  AS  SCA_SOURCE_COMMIT_DTM         ,
  CURRENT_TIMESTAMP(0)  AS  EDW_CREATE_DTM                ,
  CURRENT_TIMESTAMP(0)  AS  EDW_UPDATE_DTM                ,
  -4444   AS  RU_SALES_ORDER_LINE_KEY       ,
  -4444   AS  RU_AR_TRANSACTION_LINE_KEY    ,
  1000   AS  EP_SK_SALES_CREDIT_TYPE_ID_INT,
  1329   AS  EP_SK_TERRITORY_ID_INT        , 
  'Y'    AS  QUOTA_FLAG                    ,
  'Direct Sales'       AS  BK_SALES_CREDIT_TYPE_CODE     ,
  NFISMN.BK_FISCAL_MONTH_NUMBER_INT  AS  BK_FISCAL_MONTH_NUMBER_INT    ,
  NFISMN.BK_FISCAL_YEAR_NUMBER_INT  AS  BK_FISCAL_YEAR_NUMBER_INT     ,
  EL.FISCAL_ID       AS  DV_FISCAL_YEAR_MONTH_NUM_INT  ,
  'INSERT'        AS  EVENT_TYPE  ,
  '99998'         AS  SALES_REP_NUMBER,
  73106         AS   SALES_TERRITORY_KEY
  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE EL
  INNER JOIN  $$COMREFVWDB.N_FISCAL_MONTH NFISMN  
  ON  EL.FISCAL_ID = ( (NFISMN.BK_FISCAL_YEAR_NUMBER_INT *100) + NFISMN.BK_FISCAL_MONTH_NUMBER_INT );


SQL Query : 
SELECT
   2         AS BATCH_ID ,
   COALESCE(SORA.RULE_ID,-999)        AS ACCOUNTING_RULE_ID ,
   WI_NET.PD_ACCOUNTING_RULE_NAME      AS ACCOUNTING_RULE_NAME ,
   WI_NET.ACCOUNT_CLASS_CODE           AS ACCOUNT_CLASS ,
   NULL        AS ACCOUNT_CODE ,
   WI_NET.DV_FUNC_AMT     AS ACCTD_AMOUNT ,
   -9999        AS ADJUSTMENT_ID ,
   NULL        AS ADJUSTMENT_NUMBER ,
   NULL        AS ADJUSTMENT_TYPE ,
   WI_NET.DV_TRX_AMT     AS AMOUNT ,
   -999        AS BILL_TO_CUSTOMER_ID ,
   -999        AS BILL_TO_SITE_USE_ID ,
   NULL        AS CODE_COMBINATION_ID ,
   NULL        AS COGS_PERCENT ,
   NULL        AS COMMENTS ,
   NULL        AS CONTEXT ,
   2         AS CREATED_BY ,
   WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE ,
   COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)  AS CUSTOMER_TRX_ID ,
   COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT ,-9999) AS CUSTOMER_TRX_LINE_ID ,
   COALESCE(NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT,-9999) AS CUST_TRX_LINE_GL_DIST_ID ,
   WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
   NULL        AS EXTENDED_AMOUNT ,
   CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN 'REV'  WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN 'INV' END         AS  EXTRACT_TYPE ,
   (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
   WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
   /*
   CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN WI_NET.PD_FUNCTIONAL_CURRENCY_CODE
     WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN NULL
   END        AS  FUNC_CURRENCY_CODE ,
   */
   WI_NET.PD_FUNCTIONAL_CURRENCY_CODE AS  FUNC_CURRENCY_CODE ,
   current_timestamp(0)   AS GES_UPDATE_DATE ,
   NSSC.GLOBAL_NAME             AS GLOBAL_NAME ,
   WI_NET.GL_DATETIME                    AS GL_DATE ,
   WI_NET.GL_POSTED_DATE                 AS GL_POSTED_DATE ,
   NULL         AS GROUPING_ID ,
   ELMTL.INVENTORY_ITEM_ID    AS INVENTORY_ITEM_ID ,
   NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
   NULL         AS INVOICE_PERCENT ,
   NULL         AS INVOICING_RULE_ID ,
   2          AS LAST_UPDATED_BY ,
   current_timestamp(0)     AS LAST_UPDATE_DATE ,
   WI_NET.LAST_RECORD_FLAG               AS LATEST_RECORD_FLAG ,
   WI_NET.SK_LINE_SEQ_ID_INT             AS SK_LINE_SEQ_ID_INT ,
   /*
   CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN NATL.BK_AR_TRX_LINE_TYPE
     WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN NULL
   END          AS LINE_TYPE ,
   */
   WI_NET.LINE_TYPE_CODE AS LINE_TYPE, 
   NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
   
  /* Q2FY19 Dec Rel : XAAS Non reference trx change for below 3 ORDER attributes  */  
   CASE WHEN NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE') THEN -9999 ELSE COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999) END AS ORDER_HEADER_ID ,
   CASE WHEN NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE') THEN -9999
        WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END       AS ORDER_LINE_ID ,
   CASE WHEN NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE') THEN NULL ELSE NSO.BK_SO_NUMBER_INT END AS ORDER_NUMBER ,
   EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
   NULL         AS LINE_PERCENT ,
   NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
   NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
   /* RCHETTRI : REBOK CHANGES 
   ESCT.QUOTA_FLAG       AS QUOTA_FLAG  */
   CASE WHEN NSSC.GLOBAL_NAME ='CDC' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
    ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG   ELSE WI_NET.QUOTA_FLAG END 
   END as   QUOTA_FLAG ,
   NULL         AS REASON_CODE ,
   NULL         AS REBATE_AMOUNT ,
   NULL         AS REBATE_PERCENTAGE_ID ,
   CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999   ELSE 999 END  AS REQUEST_ID ,
   WI_NET.RULE_START_DATETIME            AS RULE_START_DATE ,
   /* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)       AS SALESREP_ID */
   CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999) ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999) END as    SALESREP_ID,
   /* COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)   AS SALES_CREDIT_TYPE_ID  */
   CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999) ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) END as    SALES_CREDIT_TYPE_ID,
   NULL         AS SHIP_TO_CUSTOMER_ID ,
   -999         AS SHIP_TO_SITE_USE_ID ,
   -999         AS SOLD_TO_CUSTOMER_ID ,
   WI_NET.SCA_SOURCE_TYPE_CD             AS SCA_SOURCE_TYPE_CD ,
   WI_NET.SALES_COMMISSION_PERCENTAGE    AS SPLIT_PERCENT ,
   /* COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)      AS TERRITORY_ID */
   CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999) ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) END as TERRITORY_ID ,
   WRSNT.SCA_SOURCE_COMMIT_DTM     AS TRANSACTION_DATE ,
   WI_NET.TRANSACTION_GROUPING_TYPE_CODE AS TRANSACTION_GROUPING_TYPE ,
   /* CASE WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'REV' THEN NULL
     WHEN WI_NET.DV_TRANSACTION_SOURCE_CD = 'INV' THEN WI_NET.DV_TRX_QTY 
   END        AS  TRANSACTION_QUANTITY ,
   */
   WI_NET.DV_TRX_QTY AS  TRANSACTION_QUANTITY ,
   ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
   NAT.AR_TRX_DATETIME    AS TRX_DATE ,
   NULL       AS TRX_NAME ,
   NAT.BK_AR_TRX_NUMBER   AS TRX_NUMBER ,
   NATT.AR_TRX_TYPE_SHORT_CODE  AS TRX_TYPE ,
   NULL       AS UNIT_SELLING_PRICE ,
   NULL       AS UNIT_STANDARD_PRICE ,
   current_timestamp(0)   AS CREATE_DATETIME ,
   'I'        AS ACTION_CODE ,
   WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
   WI_NET.DV_TRANSACTION_KEY       AS DV_TRANSACTION_KEY ,
   WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
   WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
   WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE   ,
   WI_NET.SK_SC_AGENT_ID_INT   AS  SK_SC_AGENT_ID_INT ,
   WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD   
 FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
   INNER JOIN 
    ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
   (
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
     union all   
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
     UNION ALL
     SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
     UNION ALL 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
     union all 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
     union all
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
     union all 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
     
    /* CSPP VIP Changes */
   UNION ALL
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
      UNION ALL 
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
   
  /* RCHETTRI : 11/18/2013 : ADDED TABLES */
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS 
   UNION ALL /*XAAS SC CHANGES*/
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_DRVD_XAAS
   UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
   /* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
    ) TMP
    ) SM_MAX
   ON 1=1
   
   INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
    ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
   
   INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
    ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
    AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
    ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
    ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
    
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
    on WI_NET.DV_TRANSACTION_KEY =  NATLGD.BK_AR_TRX_LINE_GL_DISTRIB_KEY 
   
 INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
   ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
   
   INNER JOIN $$COMREFVWDB.N_PRODUCT NP
    ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY    	

 INNER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
   ON (NP.BK_PRODUCT_ID = ELMTL.SEGMENT1 )

   INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
    ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY
   INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
    ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY
   
   INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
    ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
    AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY 
    
   INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
    ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT 
    AND WRSNT.SK_SC_AGENT_ID_INT = WI_NET.SK_SC_AGENT_ID_INT
    AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE   
    AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')
   
   /* rchettri: left join instead of inner join 
   INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
   */
   LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
    on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
    AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME
   
   /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
   LEFT OUTER JOIN 
   ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
    FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
    QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
   ) NSCTT
    ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
    
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT             
    ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
    AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
    AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
    
   left outer join 
                   (   select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                       from  $$ETLVWDB.EL_SALES_REP
                       qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                   ) ESR_REVERSE
                   on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                   and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
   
   left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                   on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                   and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                   
   left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                   on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                   AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME
   WHERE WI_NET.DV_TRANSACTION_SOURCE_CD IN ('REV','INV')
   AND NSSC.GLOBAL_NAME ='CDC'
   AND WI_NET.XAAS_OFFER_ATRBTN_REV_LINE_KEY=-999          
   /*AND NABS.BK_BATCH_SOURCE_NAME NOT IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
   AND ( NABS.BK_BATCH_SOURCE_NAME NOT LIKE ALL  ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/ 
         /* Q2FY19 Dec Rel : Added below exists to consider XAAS Non reference trx */   
         OR  EXISTS (SELECT 1 FROM $$ETLVWDB.EL_XAAS_TRX_FROM_ERP_SC EL WHERE EL.AR_TRX_LINE_KEY = WI_NET.AR_TRX_LINE_KEY AND EL.NON_REF_TRX_FLAG = 'Y' )
		)
   AND 1=2


Post SQL : 



Target5 Name : WI_DRVD_NCR_REV_BKG_CG_rev_inv_CDC


Pre SQL : 



Post SQL : 
UPDATE  STG
FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG STG
,$$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
,$$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST GLDT
,$$ETLVWDB.EL_XLA_DISTRIBUTION_LINKS_AR EXDLA
,$$ETLVWDB.EL_XLA_AE_LINES_AR EXALA	
,$$ETLVWDB.EL_XLA_AE_HEADERS_AR EXAHA	
,$$ETLVWDB.EL_AR_LEDGER EAL
,(SELECT 
	ELCDC.CODE_COMBINATION_ID ,
	ELCDC.SEGMENT4 AS BK_FINANCIAL_ACCOUNT_CODE,
	NSSC.GLOBAL_NAME  as GLOBAL_NAME
FROM
$$ETLVWDB.EL_CDC_GL_CODE_COMBINATIONS ELCDC
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
ON ELCDC.GLOBAL_NAME = NSSC.GLOBAL_NAME
LEFT JOIN $$ETLVWDB.EV_N_GENERAL_LEDGER_ACCOUNT EV_NGLA
ON	(		
		 ELCDC.SEGMENT1=EV_NGLA.BK_COMPANY_CODE
AND ELCDC.SEGMENT2=EV_NGLA.BK_FINANCIAL_LOCATION_CODE
AND ELCDC.SEGMENT3=EV_NGLA.BK_DEPARTMENT_CODE
AND ELCDC.SEGMENT4=EV_NGLA.BK_FINANCIAL_ACCOUNT_CODE
AND ELCDC.SEGMENT5=EV_NGLA.BK_SUBACCOUNT_CODE
AND ELCDC.SEGMENT6=EV_NGLA.BK_PROJECT_CODE
) 
QUALIFY ROW_NUMBER() OVER(PARTITION BY  ELCDC.SEGMENT1,  ELCDC.SEGMENT2,  ELCDC.SEGMENT3,  ELCDC.SEGMENT4,
ELCDC.SEGMENT5, ELCDC.SEGMENT6 ORDER BY  GENERAL_LEDGER_ACCOUNT_KEY DESC)=1 )ENGLA
SET ACCOUNT_CODE=ENGLA.BK_FINANCIAL_ACCOUNT_CODE
WHERE STG.DV_TRANSACTION_SOURCE_CD IN ('REV') AND LAST_UPDATED_BY<>1
AND STG.GLOBAL_NAME = NSSC.GLOBAL_NAME 
AND STG.CUST_TRX_LINE_GL_DIST_ID = GLDT.SK_CST_TRX_LIN_GL_DIST_ID_LINT
AND GLDT.SS_CODE = NSSC.SOURCE_SYSTEM_CODE	
AND GLDT.ACCOUNT_CLASS_CODE = 'REV'  
AND EXDLA.SOURCE_DISTRIBUTION_ID_NUM_1 = GLDT.SK_CST_TRX_LIN_GL_DIST_ID_LINT
                AND EXDLA.GLOBAL_NAME = NSSC.GLOBAL_NAME
                AND EXDLA.SOURCE_DISTRIBUTION_TYPE = 'RA_CUST_TRX_LINE_GL_DIST_ALL'
                AND EXDLA.APPLICATION_ID = 222
AND EXALA.AE_LINE_NUM = EXDLA.AE_LINE_NUM
                AND EXALA.AE_HEADER_ID = EXDLA.AE_HEADER_ID
                AND EXALA.APPLICATION_ID = EXDLA.APPLICATION_ID
                AND EXALA.GLOBAL_NAME = EXDLA.GLOBAL_NAME
AND EXAHA.AE_HEADER_ID = EXALA.AE_HEADER_ID
                  AND EXAHA.APPLICATION_ID = EXALA.APPLICATION_ID
                  AND EXAHA.GLOBAL_NAME = EXALA.GLOBAL_NAME
                  AND EXAHA.BALANCE_TYPE_CODE = 'A'
AND EXAHA.LEDGER_ID = EAL.LEDGER_ID
AND  ENGLA.CODE_COMBINATION_ID = EXALA.CODE_COMBINATION_ID
AND ENGLA.GLOBAL_NAME = EXALA.GLOBAL_NAME 
AND NSSC.GLOBAL_NAME='CDC';



UPDATE STG
FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG STG,
(SELECT NATL.SK_CUSTOMER_TRX_LINE_ID_LINT, ENGLA.GLOBAL_NAME,ENGLA.BK_FINANCIAL_ACCOUNT_CODE,
MAX(ENGLA.GENERAL_LEDGER_ACCOUNT_KEY) AS GENERAL_LEDGER_ACCOUNT_KEY
 FROM
 $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE  NATL
 				ON NATL.AR_TRX_LINE_KEY= CASE  WHEN NATLGD.SUB_PRD_AR_TRX_LINE_KEY>0 THEN NATLGD.SUB_PRD_AR_TRX_LINE_KEY ELSE NATLGD.AR_TRX_LINE_KEY END
 				AND NATLGD.SS_CODE = NATL.SS_CODE	
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
                ON NATLGD.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
 INNER JOIN $$ETLVWDB.EL_XLA_DISTRIBUTION_LINKS_AR EXDLA
                 ON EXDLA.SOURCE_DISTRIBUTION_ID_NUM_1 = NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT
                 AND EXDLA.GLOBAL_NAME = NSSC.GLOBAL_NAME
                 AND EXDLA.SOURCE_DISTRIBUTION_TYPE = 'RA_CUST_TRX_LINE_GL_DIST_ALL'
                 AND EXDLA.APPLICATION_ID = 222
 INNER JOIN $$ETLVWDB.EL_XLA_AE_LINES_AR EXALA
                 ON EXALA.AE_LINE_NUM = EXDLA.AE_LINE_NUM
                 AND EXALA.AE_HEADER_ID = EXDLA.AE_HEADER_ID
                 AND EXALA.APPLICATION_ID = EXDLA.APPLICATION_ID
                 AND EXALA.GLOBAL_NAME = EXDLA.GLOBAL_NAME
 INNER JOIN $$ETLVWDB.EL_XLA_AE_HEADERS_AR EXAHA
                 ON EXAHA.AE_HEADER_ID = EXALA.AE_HEADER_ID
                 AND EXAHA.APPLICATION_ID = EXALA.APPLICATION_ID
                 AND EXAHA.GLOBAL_NAME = EXALA.GLOBAL_NAME
                 AND EXAHA.BALANCE_TYPE_CODE = 'A'
 INNER JOIN (SELECT 
	COALESCE(EV_NGLA.GENERAL_LEDGER_ACCOUNT_KEY,-995) AS GENERAL_LEDGER_ACCOUNT_KEY,
	ELCDC.CODE_COMBINATION_ID ,
	ELCDC.SEGMENT4 AS BK_FINANCIAL_ACCOUNT_CODE,
	NSSC.GLOBAL_NAME  as GLOBAL_NAME
FROM
$$ETLVWDB.EL_CDC_GL_CODE_COMBINATIONS ELCDC
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
ON ELCDC.GLOBAL_NAME = NSSC.GLOBAL_NAME
LEFT JOIN $$ETLVWDB.EV_N_GENERAL_LEDGER_ACCOUNT EV_NGLA
ON	(		
		 ELCDC.SEGMENT1=EV_NGLA.BK_COMPANY_CODE
AND ELCDC.SEGMENT2=EV_NGLA.BK_FINANCIAL_LOCATION_CODE
AND ELCDC.SEGMENT3=EV_NGLA.BK_DEPARTMENT_CODE
AND ELCDC.SEGMENT4=EV_NGLA.BK_FINANCIAL_ACCOUNT_CODE
AND ELCDC.SEGMENT5=EV_NGLA.BK_SUBACCOUNT_CODE
AND ELCDC.SEGMENT6=EV_NGLA.BK_PROJECT_CODE
)
QUALIFY ROW_NUMBER() OVER(PARTITION BY  ELCDC.SEGMENT1,  ELCDC.SEGMENT2,  ELCDC.SEGMENT3,  ELCDC.SEGMENT4,
ELCDC.SEGMENT5, ELCDC.SEGMENT6 ORDER BY  GENERAL_LEDGER_ACCOUNT_KEY DESC)=1 )ENGLA
ON (ENGLA.CODE_COMBINATION_ID = EXALA.CODE_COMBINATION_ID
      AND ENGLA.GLOBAL_NAME = EXALA.GLOBAL_NAME )   	  
WHERE EXISTS (SELECT 1 FROM $$ETLVWDB.EL_AR_LEDGER EAL WHERE EXAHA.LEDGER_ID = EAL.LEDGER_ID)
AND NATLGD.ACCOUNT_CLASS_CODE = 'REV'
AND NSSC.GLOBAL_NAME = 'CDC'
GROUP BY  NATL.SK_CUSTOMER_TRX_LINE_ID_LINT, ENGLA.GLOBAL_NAME,ENGLA.BK_FINANCIAL_ACCOUNT_CODE
)ACCT
,$$ETLVWDB.EV_N_GENERAL_LEDGER_ACCOUNT  ENGLA1 
SET ACCOUNT_CODE=ACCT.BK_FINANCIAL_ACCOUNT_CODE
WHERE STG.DV_TRANSACTION_SOURCE_CD IN ('INV')  AND LAST_UPDATED_BY<>1
AND STG.CUSTOMER_TRX_LINE_ID = ACCT.SK_CUSTOMER_TRX_LINE_ID_LINT 
AND STG.GLOBAL_NAME = ACCT.GLOBAL_NAME
AND ACCT.GENERAL_LEDGER_ACCOUNT_KEY=ENGLA1.GENERAL_LEDGER_ACCOUNT_KEY;

COLLECT STATS ON $$STGDB.WI_DRVD_NCR_REV_BKG_CG;


Source6 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_aradj_XAAS


Pre SQL : 



SQL Query : 
SELECT
  2           AS BATCH_ID ,
  -999          AS ACCOUNTING_RULE_ID ,
  'UNKNOWN'          AS ACCOUNTING_RULE_NAME ,
  WI_NET.ACCOUNT_CLASS_CODE          AS ACCOUNT_CLASS ,
  NULL          AS ACCOUNT_CODE ,
  WI_NET.DV_FUNC_AMT       AS ACCTD_AMOUNT ,
  COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)     AS ADJUSTMENT_ID ,
  NAAT.BK_AR_ADJ_NUMBER      AS ADJUSTMENT_NUMBER ,
  NATT.BK_AR_TRX_TYPE_CODE     AS ADJUSTMENT_TYPE ,
  WI_NET.DV_TRX_AMT       AS AMOUNT,
  -999        AS BILL_TO_CUSTOMER_ID,
  -999        AS BILL_TO_SITE_USE_ID,
  NULL        AS CODE_COMBINATION_ID,
  NULL        AS COGS_PERCENT,
  NULL        AS COMMENTS,
  NULL        AS CONTEXT,
  2         AS CREATED_BY,
  WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE,
  COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT,-9999)   AS CUSTOMER_TRX_ID ,
  COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999) AS CUSTOMER_TRX_LINE_ID ,
  COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)   AS CUST_TRX_LINE_GL_DIST_ID ,
  WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
  NULL        AS EXTENDED_AMOUNT ,
  'AR_ADJUSTMENT'      AS EXTRACT_TYPE ,
  (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
  WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
  WI_NET.PD_FUNCTIONAL_CURRENCY_CODE      AS FUNC_CURRENCY_CODE ,
  current_timestamp(0)       AS GES_UPDATE_DATE ,
  NSSC.GLOBAL_NAME                AS GLOBAL_NAME ,
  WI_NET.GL_DATETIME                      AS GL_DATE ,
  WI_NET.GL_POSTED_DATE                   AS GL_POSTED_DATE ,
  NULL         AS GROUPING_ID ,
  NP.SK_INVENTORY_ITEM_ID_INT    AS INVENTORY_ITEM_ID ,
  NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
  NULL         AS INVOICE_PERCENT ,
  NULL         AS INVOICING_RULE_ID ,
  2          AS LAST_UPDATED_BY ,
  current_timestamp(0)     AS LAST_UPDATE_DATE ,
  WI_NET.LAST_RECORD_FLAG                 AS LATEST_RECORD_FLAG ,
  WI_NET.SK_LINE_SEQ_ID_INT               AS SK_LINE_SEQ_ID_INT ,
  WI_NET.LINE_TYPE_CODE         AS LINE_TYPE ,
  NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
 /*  COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999)   AS ORDER_HEADER_ID , */
  -9999 AS ORDER_HEADER_ID,
 /*  CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR   NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END          AS ORDER_LINE_ID , */
  -9999 AS ORDER_LINE_ID,
  /* NSO.BK_SO_NUMBER_INT              AS ORDER_NUMBER , */
  NULL AS ORDER_NUMBER,
  EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
  NULL         AS LINE_PERCENT ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
  /* ESCT.QUOTA_FLAG       AS QUOTA_FLAG  */
  /* CASE WHEN NSSC.GLOBAL_NAME = 'CG' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
   ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG    ELSE WI_NET.QUOTA_FLAG END 
  END as   QUOTA_FLAG , */
  NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG AS QUOTA_FLAG,
  NULL         AS REASON_CODE ,
  NULL         AS REBATE_AMOUNT ,
  NULL         AS REBATE_PERCENTAGE_ID ,
  CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999 ELSE 999 END    AS REQUEST_ID ,
  cast( NULL as timestamp(0))   AS RULE_START_DATE ,
  /* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)  AS SALESREP_ID */
  /* CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                  ELSE  */
  COALESCE(ESR_ALL.SALES_REP_ID,-999) AS SALESREP_ID ,
  /*COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)     AS SALES_CREDIT_TYPE_ID */
  /* CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                  ELSE  */
  COALESCE(ESCT_ALL.SK_CREDIT_TYPE_ID , -999) AS SALES_CREDIT_TYPE_ID ,
  NULL   AS SHIP_TO_CUSTOMER_ID ,
  -999   AS SHIP_TO_SITE_USE_ID ,
  -999   AS SOLD_TO_CUSTOMER_ID ,
  WI_NET.SCA_SOURCE_TYPE_CD               AS SCA_SOURCE_TYPE_CD ,
  WI_NET.SALES_COMMISSION_PERCENTAGE      AS SPLIT_PERCENT ,
  /*COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT ,-999)          AS TERRITORY_ID */
 /*  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                  ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
  END as TERRITORY_ID , */
  COALESCE(EST_ALL.TERRITORY_ID, -999) AS TERRITORY_ID,
  COALESCE(WRSNT.SOURCE_COMMIT_DTM,CURRENT_DATE)            AS TRANSACTION_DATE1 ,
  WI_NET.TRANSACTION_GROUPING_TYPE_CODE   AS TRANSACTION_GROUPING_TYPE ,
  WI_NET.DV_TRX_QTY        AS TRANSACTION_QUANTITY ,
  /*ROW_NUMBER()  OVER( ORDER BY WRSNT.SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,*/
  ROW_NUMBER()  OVER( ORDER BY TRANSACTION_DATE1 )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
  NAT.AR_TRX_DATETIME        AS TRX_DATE ,
  NULL           AS TRX_NAME ,
  NAT.BK_AR_TRX_NUMBER       AS TRX_NUMBER ,
  NATT.AR_TRX_TYPE_SHORT_CODE      AS TRX_TYPE ,
  NULL           AS UNIT_SELLING_PRICE ,
  NULL           AS UNIT_STANDARD_PRICE ,
  current_timestamp(0)       AS CREATE_DATETIME ,
  'I'            AS ACTION_CODE ,
  WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
  WI_NET.DV_TRANSACTION_KEY               AS DV_TRANSACTION_KEY ,
  WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
  WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
  WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE  ,
  WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT,
 'UNKNOWN' AS SALES_MOTION_CD,
 WI_NET.RU_SERVICE_CONTRACT_START_DTM ,
WI_NET.RU_SERVICE_CONTRACT_END_DTM   ,
WI_NET.DV_CONTRACT_DURATION          ,
WI_NET.DV_ANNUALIZED_FLG             ,
WI_NET.DV_ANNUALIZED_US_NET_AMT      ,
WI_NET.DV_MULTIYEAR_US_NET_AMT       ,
WI_NET.BOOKINGS_POLICY_CD  

  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_NET
  INNER JOIN 
   ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
  (
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
    union all   
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
    UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
    union all
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
    /* RCHETTRI : 11/18/2013 : ADDED TABLES */
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
   /*Added RTE Exception tables */
   UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_RT  
    UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT  
    UNION ALL 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS /*thvarghe :Q3FY16 XAAS-SC Solution*/ 
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_DRVD_XAAS
       /* CSPP VIP Changes*/
      UNION ALL 
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
      UNION ALL
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
	  UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_MERK_CG /*CARBT*/ 
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_SWSS_CG /*SWSS CHANGES*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_SWSS_CG /*SWSS CHANGES*/
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/   
   ) TMP
   ) SM_MAX
  ON 1=1
  
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
   ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
  
  INNER JOIN $$ETLVWDB.SM_AR_ADJUSTMENT_TRX SAAT
   on SAAT.AR_ADJUSTMENT_KEY =  WI_NET.DV_TRANSACTION_KEY  
   
  INNER JOIN $$FINLGLVWDB.N_AR_ADJUSTMENT_TRX NAAT
   on NAAT.SK_ADJUSTMENT_ID_INT = SAAT.SK_ADJUSTMENT_ID_INT
   AND NAAT.SS_CODE = SAAT.SS_CD 
  
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON WI_NET.AR_TRX_KEY = NAT.AR_TRX_KEY
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY 
   
  INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
  ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
   
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
   ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
   AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
   AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
   
  INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY       
 
 /*  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
   ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY 
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
   ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY  */
   
  INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
   ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
   AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY  
  
 /*  INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
   ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT   
   AND WRSNT.SK_SC_AGENT_ID_INT = WI_NET.SK_SC_AGENT_ID_INT 
   AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE') */
   
    LEFT OUTER JOIN (SELECT AR_TRX_LINE_KEY,SOURCE_COMMIT_DTM,EVENT_TYPE FROM $$STGDB.WI_BKG_SCA_NRT_XAAS_TV GROUP BY 1,2,3) WRSNT
    ON  WRSNT.AR_TRX_LINE_KEY  = WI_NET.AR_TRX_LINE_KEY  
    AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE') /*CHANGED JOIN TO L.O.J TO ENABLE ANNUITY NET CHANGES*/
   
   
  /* rchettri: left join instead of inner join 
  INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT */
  /* LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
   on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
   AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME  */
   
  /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
  LEFT OUTER JOIN 
  ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
   FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
   QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
  ) NSCTT
   ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
   
  LEFT OUTER JOIN 
                  (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                  from  $$ETLVWDB.EL_SALES_REP
                                  qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                  ) ESR_ALL
                  on ESR_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and ESR_ALL.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
  
  LEFT OUTER JOIN $$ETLVWDB.EL_SALES_TERRITORY EST_ALL
                  on EST_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and EST_ALL.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                  
  LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_ALL
                  on ESCT_ALL.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                  AND ESCT_ALL.GLOBAL_NAME = NSSC.GLOBAL_NAME
  WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'AR_ADJUSTMENT'
  AND NSSC.GLOBAL_NAME ='CG'
  /*AND NABS.BK_BATCH_SOURCE_NAME IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
  AND (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
  OR (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))
  AND (WRSNT.AR_TRX_LINE_KEY IS NOT NULL OR WI_NET.OLD_TRANSACTION_SEQ_ID IN (SEL TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_CONTRACT_CHANGE_AR_FWD_XAAS))


Post SQL : 



Target6 Name : WI_DRVD_NCR_REV_BKG_CG_aradj_XAAS


Pre SQL : 



Post SQL : 



Source7 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_aradj_XAAS_CDC


Pre SQL : 



SQL Query : 
SELECT
  2           AS BATCH_ID ,
  -999          AS ACCOUNTING_RULE_ID ,
  'UNKNOWN'          AS ACCOUNTING_RULE_NAME ,
  WI_NET.ACCOUNT_CLASS_CODE          AS ACCOUNT_CLASS ,
  NULL          AS ACCOUNT_CODE ,
  WI_NET.DV_FUNC_AMT       AS ACCTD_AMOUNT ,
  COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)     AS ADJUSTMENT_ID ,
  NAAT.BK_AR_ADJ_NUMBER      AS ADJUSTMENT_NUMBER ,
  NATT.BK_AR_TRX_TYPE_CODE     AS ADJUSTMENT_TYPE ,
  WI_NET.DV_TRX_AMT       AS AMOUNT,
  -999        AS BILL_TO_CUSTOMER_ID,
  -999        AS BILL_TO_SITE_USE_ID,
  NULL        AS CODE_COMBINATION_ID,
  NULL        AS COGS_PERCENT,
  NULL        AS COMMENTS,
  NULL        AS CONTEXT,
  2         AS CREATED_BY,
  WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE,
  COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT,-9999)   AS CUSTOMER_TRX_ID ,
  COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999) AS CUSTOMER_TRX_LINE_ID ,
  COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)   AS CUST_TRX_LINE_GL_DIST_ID ,
  WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
  NULL        AS EXTENDED_AMOUNT ,
  'AR_ADJUSTMENT'      AS EXTRACT_TYPE ,
  (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
  WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
  WI_NET.PD_FUNCTIONAL_CURRENCY_CODE      AS FUNC_CURRENCY_CODE ,
  current_timestamp(0)       AS GES_UPDATE_DATE ,
  NSSC.GLOBAL_NAME                AS GLOBAL_NAME ,
  WI_NET.GL_DATETIME                      AS GL_DATE ,
  WI_NET.GL_POSTED_DATE                   AS GL_POSTED_DATE ,
  NULL         AS GROUPING_ID ,
  ELMTL.INVENTORY_ITEM_ID    AS INVENTORY_ITEM_ID ,
  NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
  NULL         AS INVOICE_PERCENT ,
  NULL         AS INVOICING_RULE_ID ,
  2          AS LAST_UPDATED_BY ,
  current_timestamp(0)     AS LAST_UPDATE_DATE ,
  WI_NET.LAST_RECORD_FLAG                 AS LATEST_RECORD_FLAG ,
  WI_NET.SK_LINE_SEQ_ID_INT               AS SK_LINE_SEQ_ID_INT ,
  WI_NET.LINE_TYPE_CODE         AS LINE_TYPE ,
  NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
 /*  COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999)   AS ORDER_HEADER_ID , */
  -9999 AS ORDER_HEADER_ID,
 /*  CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR   NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END          AS ORDER_LINE_ID , */
  -9999 AS ORDER_LINE_ID,
  /* NSO.BK_SO_NUMBER_INT              AS ORDER_NUMBER , */
  NULL AS ORDER_NUMBER,
  EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
  NULL         AS LINE_PERCENT ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
  /* ESCT.QUOTA_FLAG       AS QUOTA_FLAG  */
  /* CASE WHEN NSSC.GLOBAL_NAME = 'CG' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
   ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG    ELSE WI_NET.QUOTA_FLAG END 
  END as   QUOTA_FLAG , */
  NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG AS QUOTA_FLAG,
  NULL         AS REASON_CODE ,
  NULL         AS REBATE_AMOUNT ,
  NULL         AS REBATE_PERCENTAGE_ID ,
  CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999 ELSE 999 END    AS REQUEST_ID ,
  cast( NULL as timestamp(0))   AS RULE_START_DATE ,
  /* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)  AS SALESREP_ID */
  /* CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                  ELSE  */
  COALESCE(ESR_ALL.SALES_REP_ID,-999) AS SALESREP_ID ,
  /*COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)     AS SALES_CREDIT_TYPE_ID */
  /* CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                  ELSE  */
  COALESCE(ESCT_ALL.SK_CREDIT_TYPE_ID , -999) AS SALES_CREDIT_TYPE_ID ,
  NULL   AS SHIP_TO_CUSTOMER_ID ,
  -999   AS SHIP_TO_SITE_USE_ID ,
  -999   AS SOLD_TO_CUSTOMER_ID ,
  WI_NET.SCA_SOURCE_TYPE_CD               AS SCA_SOURCE_TYPE_CD ,
  WI_NET.SALES_COMMISSION_PERCENTAGE      AS SPLIT_PERCENT ,
  /*COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT ,-999)          AS TERRITORY_ID */
 /*  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                  ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
  END as TERRITORY_ID , */
  COALESCE(EST_ALL.TERRITORY_ID, -999) AS TERRITORY_ID,
  WRSNT.SOURCE_COMMIT_DTM            AS TRANSACTION_DATE ,
  WI_NET.TRANSACTION_GROUPING_TYPE_CODE   AS TRANSACTION_GROUPING_TYPE ,
  WI_NET.DV_TRX_QTY        AS TRANSACTION_QUANTITY ,
  ROW_NUMBER()  OVER( ORDER BY WRSNT.SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
  NAT.AR_TRX_DATETIME        AS TRX_DATE ,
  NULL           AS TRX_NAME ,
  NAT.BK_AR_TRX_NUMBER       AS TRX_NUMBER ,
  NATT.AR_TRX_TYPE_SHORT_CODE      AS TRX_TYPE ,
  NULL           AS UNIT_SELLING_PRICE ,
  NULL           AS UNIT_STANDARD_PRICE ,
  current_timestamp(0)       AS CREATE_DATETIME ,
  'I'            AS ACTION_CODE ,
  WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
  WI_NET.DV_TRANSACTION_KEY               AS DV_TRANSACTION_KEY ,
  WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
  WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
  WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE  ,
  WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT,
 'UNKNOWN' AS SALES_MOTION_CD

  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_NET
  INNER JOIN 
   ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
  (
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
    union all   
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
    UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
    union all
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
    /* RCHETTRI : 11/18/2013 : ADDED TABLES */
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
   /*Added RTE Exception tables */
   UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_RT  
    UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT  
    UNION ALL 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS /*thvarghe :Q3FY16 XAAS-SC Solution*/ 
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_DRVD_XAAS
       /* CSPP VIP Changes*/
      UNION ALL 
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
      UNION ALL
      SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
	  UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
 ) TMP
   ) SM_MAX
  ON 1=1
  
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
   ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
  
  INNER JOIN $$ETLVWDB.SM_AR_ADJUSTMENT_TRX SAAT
   on SAAT.AR_ADJUSTMENT_KEY =  WI_NET.DV_TRANSACTION_KEY  
   
  INNER JOIN $$FINLGLVWDB.N_AR_ADJUSTMENT_TRX NAAT
   on NAAT.SK_ADJUSTMENT_ID_INT = SAAT.SK_ADJUSTMENT_ID_INT
   AND NAAT.SS_CODE = SAAT.SS_CD 
  
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON WI_NET.AR_TRX_KEY = NAT.AR_TRX_KEY
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY 
   
  INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
  ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
   
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
   ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
   AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
   AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
   
  INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY       
   
 INNER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
   ON (NP.BK_PRODUCT_ID = ELMTL.SEGMENT1 )

 
 /*  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
   ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY 
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
   ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY  */
   
  INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
   ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
   AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY  
  
 /*  INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
   ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT   
   AND WRSNT.SK_SC_AGENT_ID_INT = WI_NET.SK_SC_AGENT_ID_INT 
   AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE') */
   
    INNER JOIN (SELECT AR_TRX_LINE_KEY,SOURCE_COMMIT_DTM,EVENT_TYPE FROM $$STGDB.WI_BKG_SCA_NRT_XAAS_TV GROUP BY 1,2,3) WRSNT
    ON  WRSNT.AR_TRX_LINE_KEY  = WI_NET.AR_TRX_LINE_KEY  
    AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')
   
   
  /* rchettri: left join instead of inner join 
  INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT */
  /* LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
   on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
   AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME  */
   
  /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
  LEFT OUTER JOIN 
  ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
   FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
   QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
  ) NSCTT
   ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
   
  LEFT OUTER JOIN 
                  (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                  from  $$ETLVWDB.EL_SALES_REP
                                  qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                  ) ESR_ALL
                  on ESR_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and ESR_ALL.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
  
  LEFT OUTER JOIN $$ETLVWDB.EL_SALES_TERRITORY EST_ALL
                  on EST_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and EST_ALL.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                  
  LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_ALL
                  on ESCT_ALL.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                  AND ESCT_ALL.GLOBAL_NAME = NSSC.GLOBAL_NAME
  WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'AR_ADJUSTMENT'
  AND NSSC.GLOBAL_NAME ='CDC'
  /*AND NABS.BK_BATCH_SOURCE_NAME IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
  AND NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/


Post SQL : 



Target7 Name : WI_DRVD_NCR_REV_BKG_aradj_XAAS_CDC


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_TRX_FOR_BKG_CG','D');


Source8 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_aradj


Pre SQL : 



SQL Query : 
SELECT
  2           AS BATCH_ID ,
  -999          AS ACCOUNTING_RULE_ID ,
  'UNKNOWN'          AS ACCOUNTING_RULE_NAME ,
  WI_NET.ACCOUNT_CLASS_CODE          AS ACCOUNT_CLASS ,
  NULL          AS ACCOUNT_CODE ,
  WI_NET.DV_FUNC_AMT       AS ACCTD_AMOUNT ,
  COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)     AS ADJUSTMENT_ID ,
  NAAT.BK_AR_ADJ_NUMBER      AS ADJUSTMENT_NUMBER ,
  NATT.BK_AR_TRX_TYPE_CODE     AS ADJUSTMENT_TYPE ,
  WI_NET.DV_TRX_AMT       AS AMOUNT,
  -999        AS BILL_TO_CUSTOMER_ID,
  -999        AS BILL_TO_SITE_USE_ID,
  NULL        AS CODE_COMBINATION_ID,
  NULL        AS COGS_PERCENT,
  NULL        AS COMMENTS,
  NULL        AS CONTEXT,
  2         AS CREATED_BY,
  WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE,
  COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT,-9999)   AS CUSTOMER_TRX_ID ,
  COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999) AS CUSTOMER_TRX_LINE_ID ,
  COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)   AS CUST_TRX_LINE_GL_DIST_ID ,
  WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
  NULL        AS EXTENDED_AMOUNT ,
  'AR_ADJUSTMENT'      AS EXTRACT_TYPE ,
  (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
  WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
  WI_NET.PD_FUNCTIONAL_CURRENCY_CODE      AS FUNC_CURRENCY_CODE ,
  current_timestamp(0)       AS GES_UPDATE_DATE ,
  NSSC.GLOBAL_NAME                AS GLOBAL_NAME ,
  WI_NET.GL_DATETIME                      AS GL_DATE ,
  WI_NET.GL_POSTED_DATE                   AS GL_POSTED_DATE ,
  NULL         AS GROUPING_ID ,
  NP.SK_INVENTORY_ITEM_ID_INT    AS INVENTORY_ITEM_ID ,
  NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
  NULL         AS INVOICE_PERCENT ,
  NULL         AS INVOICING_RULE_ID ,
  2          AS LAST_UPDATED_BY ,
  current_timestamp(0)     AS LAST_UPDATE_DATE ,
  WI_NET.LAST_RECORD_FLAG                 AS LATEST_RECORD_FLAG ,
  WI_NET.SK_LINE_SEQ_ID_INT               AS SK_LINE_SEQ_ID_INT ,
  WI_NET.LINE_TYPE_CODE         AS LINE_TYPE ,
  NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
  COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999)   AS ORDER_HEADER_ID ,
  CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR   NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END          AS ORDER_LINE_ID ,
  NSO.BK_SO_NUMBER_INT              AS ORDER_NUMBER ,
  EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
  NULL         AS LINE_PERCENT ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
  /* ESCT.QUOTA_FLAG       AS QUOTA_FLAG  */
  CASE WHEN NSSC.GLOBAL_NAME ='CG' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
   ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG    ELSE WI_NET.QUOTA_FLAG END 
  END as   QUOTA_FLAG ,
  NULL         AS REASON_CODE ,
  NULL         AS REBATE_AMOUNT ,
  NULL         AS REBATE_PERCENTAGE_ID ,
  CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999 ELSE 999 END    AS REQUEST_ID ,
  cast( NULL as timestamp(0))   AS RULE_START_DATE ,
  /* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)  AS SALESREP_ID */
  CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                  ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999)
  END as    SALESREP_ID ,
  /*COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)     AS SALES_CREDIT_TYPE_ID */
  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                  ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) 
  END as    SALES_CREDIT_TYPE_ID ,
  NULL   AS SHIP_TO_CUSTOMER_ID ,
  -999   AS SHIP_TO_SITE_USE_ID ,
  -999   AS SOLD_TO_CUSTOMER_ID ,
  WI_NET.SCA_SOURCE_TYPE_CD               AS SCA_SOURCE_TYPE_CD ,
  WI_NET.SALES_COMMISSION_PERCENTAGE      AS SPLIT_PERCENT ,
  /*COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT ,-999)          AS TERRITORY_ID */
  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                  ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
  END as TERRITORY_ID ,
  COALESCE(WRSNT.SCA_SOURCE_COMMIT_DTM,CURRENT_DATE)  AS TRANSACTION_DATE1 ,
  WI_NET.TRANSACTION_GROUPING_TYPE_CODE   AS TRANSACTION_GROUPING_TYPE ,
  WI_NET.DV_TRX_QTY        AS TRANSACTION_QUANTITY ,
  /*ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,*/
  ROW_NUMBER()  OVER( ORDER BY TRANSACTION_DATE1 )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
  NAT.AR_TRX_DATETIME        AS TRX_DATE ,
  NULL           AS TRX_NAME ,
  NAT.BK_AR_TRX_NUMBER       AS TRX_NUMBER ,
  NATT.AR_TRX_TYPE_SHORT_CODE      AS TRX_TYPE ,
  NULL           AS UNIT_SELLING_PRICE ,
  NULL           AS UNIT_STANDARD_PRICE ,
  current_timestamp(0)       AS CREATE_DATETIME ,
  'I'            AS ACTION_CODE ,
  WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
  WI_NET.DV_TRANSACTION_KEY               AS DV_TRANSACTION_KEY ,
  WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
  WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
  WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE  ,
  WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT,
  WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD,
  /*CASE WHEN WI_NET.FORWARD_REVERSE_CODE='F' THEN NSOL.RU_SERVICE_CONTRACT_START_DTM  ELSE WI_NET.RU_SERVICE_CONTRACT_START_DTM  END AS RU_SERVICE_CONTRACT_START_DTM,
  CASE WHEN WI_NET.FORWARD_REVERSE_CODE='F' THEN NSOL.RU_SERVICE_CONTRACT_END_DTM ELSE WI_NET.RU_SERVICE_CONTRACT_END_DTM END AS RU_SERVICE_CONTRACT_END_DTM,
  CASE WHEN WI_NET.FORWARD_REVERSE_CODE='F' THEN NSOLV.RU_SRVC_CNTRCT_DRTN_MNTHS_CNT ELSE WI_NET.DV_CONTRACT_DURATION END AS DV_CONTRACT_DURATION,*/
  WI_NET.RU_SERVICE_CONTRACT_START_DTM,
  WI_NET.RU_SERVICE_CONTRACT_END_DTM,
  WI_NET.DV_CONTRACT_DURATION,
  WI_NET.DV_ANNUALIZED_FLG             ,
  WI_NET.DV_ANNUALIZED_US_NET_AMT      ,
  WI_NET.DV_MULTIYEAR_US_NET_AMT       ,
  WI_NET.BOOKINGS_POLICY_CD
  
  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
  
  INNER JOIN 
   ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
  (
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
    union all   
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
    UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
    union all
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
    /* RCHETTRI : 11/18/2013 : ADDED TABLES */
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
    /* CSPP VIP Changes*/
   UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
     
 
 /*Added RTE Exception tables */
   UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_RT  
    UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT  
    UNION ALL 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS /*thvarghe :Q3FY16 XAAS-SC Solution*/ 
     /* CSPP VIP Changes*/
     UNION ALL 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
 UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS DRVD_XAAS /*prmaddal :Q1FY18 XAAS-SC Implementation*/
	UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_SWSS_CG /*SWSS CHANGES*/
UNION ALL SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_SWSS_CG /*SWSS CHANGES*/ 
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/   
   ) TMP
   ) SM_MAX
  ON 1=1
  
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
   ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
  
  INNER JOIN $$ETLVWDB.SM_AR_ADJUSTMENT_TRX SAAT
   on SAAT.AR_ADJUSTMENT_KEY =  WI_NET.DV_TRANSACTION_KEY  
   
  INNER JOIN $$FINLGLVWDB.N_AR_ADJUSTMENT_TRX NAAT
   on NAAT.SK_ADJUSTMENT_ID_INT = SAAT.SK_ADJUSTMENT_ID_INT
   AND NAAT.SS_CODE = SAAT.SS_CD 
  
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON WI_NET.AR_TRX_KEY = NAT.AR_TRX_KEY
  
  JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY 
   
    /*ADDED BELOW JOIN TO RESTRICT XAAS DATA*/
    INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
   ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
 
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
   ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
   AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
   AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
   
  INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY     
   
 INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
   ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY 
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
   ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY 
   
   /*LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV NSOLV
   ON(NSOL.SALES_ORDER_LINE_KEY = NSOLV.SALES_ORDER_LINE_KEY
   AND NSOLV.END_TV_DTM = '3500-01-01 00:00:00')*/
   
  INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
   ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
   AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY  
  
  LEFT OUTER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
   ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT   
   AND WRSNT.SK_SC_AGENT_ID_INT = WI_NET.SK_SC_AGENT_ID_INT 
   AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE') /*CHANGED TO L.O.J FOR ENABLING ANNUITY NET CHANGES*/
  /* rchettri: left join instead of inner join 
  INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT */
  LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
   on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
   AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME 
   
  /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
  LEFT OUTER JOIN 
  ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
   FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
   QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
  ) NSCTT
   ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
   
  left outer join 
                  (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                  from  $$ETLVWDB.EL_SALES_REP
                                  qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                  ) ESR_REVERSE
                  on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
  
  left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                  on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                  
  left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                  on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                  AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME
  WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'AR_ADJUSTMENT'
  AND NSSC.GLOBAL_NAME ='CG'
 /*AND NABS.BK_BATCH_SOURCE_NAME NOT IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
AND (NABS.BK_BATCH_SOURCE_NAME NOT LIKE ALL ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
OR (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME  NOT IN ('XAAS')))
AND (WRSNT.SK_LINE_SEQ_ID_INT IS NOT NULL OR WI_NET.OLD_TRANSACTION_SEQ_ID IN (SEL TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_CONTRACT_CHANGE_AR_FWD))


Post SQL : 



Target8 Name : WI_DRVD_NCR_REV_BKG_CG_aradj


Pre SQL : 



Post SQL : 
/*knarlapu: Updating Account Code for AR-ADJ Net-Chnage Records*/

UPDATE STG
FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG STG
,$$FINLGLVWDB.N_AR_ADJUSTMENT_TRX NAAT		
,$$ETLVWDB.EV_N_GENERAL_LEDGER_ACCOUNT  ENGLA 
SET ACCOUNT_CODE=ENGLA.BK_FINANCIAL_ACCOUNT_CODE
WHERE STG.DV_TRANSACTION_SOURCE_CD='AR_ADJUSTMENT'  AND LAST_UPDATED_BY<>1 
AND STG.ADJUSTMENT_ID = NAAT.SK_ADJUSTMENT_ID_INT
AND NAAT.SS_CODE = STG.GLOBAL_NAME		
AND ENGLA.GENERAL_LEDGER_ACCOUNT_KEY = NAAT.GENERAL_LEDGER_ACCOUNT_KEY
AND STG.GLOBAL_NAME='CG';


Source9 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_aradj_CDC


Pre SQL : 



SQL Query : 
SELECT
  2           AS BATCH_ID ,
  -999          AS ACCOUNTING_RULE_ID ,
  'UNKNOWN'          AS ACCOUNTING_RULE_NAME ,
  WI_NET.ACCOUNT_CLASS_CODE          AS ACCOUNT_CLASS ,
  NULL          AS ACCOUNT_CODE ,
  WI_NET.DV_FUNC_AMT       AS ACCTD_AMOUNT ,
  COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)     AS ADJUSTMENT_ID ,
  NAAT.BK_AR_ADJ_NUMBER      AS ADJUSTMENT_NUMBER ,
  NATT.BK_AR_TRX_TYPE_CODE     AS ADJUSTMENT_TYPE ,
  WI_NET.DV_TRX_AMT       AS AMOUNT,
  -999        AS BILL_TO_CUSTOMER_ID,
  -999        AS BILL_TO_SITE_USE_ID,
  NULL        AS CODE_COMBINATION_ID,
  NULL        AS COGS_PERCENT,
  NULL        AS COMMENTS,
  NULL        AS CONTEXT,
  2         AS CREATED_BY,
  WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE,
  COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT,-9999)   AS CUSTOMER_TRX_ID ,
  COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999) AS CUSTOMER_TRX_LINE_ID ,
  COALESCE(SAAT.SK_ADJUSTMENT_ID_INT,-9999)   AS CUST_TRX_LINE_GL_DIST_ID ,
  WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
  NULL        AS EXTENDED_AMOUNT ,
  'AR_ADJUSTMENT'      AS EXTRACT_TYPE ,
  (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
  WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
  WI_NET.PD_FUNCTIONAL_CURRENCY_CODE      AS FUNC_CURRENCY_CODE ,
  current_timestamp(0)       AS GES_UPDATE_DATE ,
  NSSC.GLOBAL_NAME                AS GLOBAL_NAME ,
  WI_NET.GL_DATETIME                      AS GL_DATE ,
  WI_NET.GL_POSTED_DATE                   AS GL_POSTED_DATE ,
  NULL         AS GROUPING_ID ,
  ELMTL.INVENTORY_ITEM_ID    AS INVENTORY_ITEM_ID ,
  NAT.BK_TRXL_CURRENCY_CODE    AS INVOICE_CURRENCY_CODE ,
  NULL         AS INVOICE_PERCENT ,
  NULL         AS INVOICING_RULE_ID ,
  2          AS LAST_UPDATED_BY ,
  current_timestamp(0)     AS LAST_UPDATE_DATE ,
  WI_NET.LAST_RECORD_FLAG                 AS LATEST_RECORD_FLAG ,
  WI_NET.SK_LINE_SEQ_ID_INT               AS SK_LINE_SEQ_ID_INT ,
  WI_NET.LINE_TYPE_CODE         AS LINE_TYPE ,
  NULL         AS LINK_TO_CUST_TRX_LINE_ID ,
  COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT ,-9999)   AS ORDER_HEADER_ID ,
  CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR   NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END          AS ORDER_LINE_ID ,
  NSO.BK_SO_NUMBER_INT              AS ORDER_NUMBER ,
  EOUGC.SK_ORGANIZATION_ID_INT   AS ORG_ID ,
  NULL         AS LINE_PERCENT ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_ID ,
  NULL         AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
  /* ESCT.QUOTA_FLAG       AS QUOTA_FLAG  */
  CASE WHEN NSSC.GLOBAL_NAME ='CDC' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
   ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG    ELSE WI_NET.QUOTA_FLAG END 
  END as   QUOTA_FLAG ,
  NULL         AS REASON_CODE ,
  NULL         AS REBATE_AMOUNT ,
  NULL         AS REBATE_PERCENTAGE_ID ,
  CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999 ELSE 999 END    AS REQUEST_ID ,
  cast( NULL as timestamp(0))   AS RULE_START_DATE ,
  /* COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)  AS SALESREP_ID */
  CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                  ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999)
  END as    SALESREP_ID ,
  /*COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)     AS SALES_CREDIT_TYPE_ID */
  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                  ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) 
  END as    SALES_CREDIT_TYPE_ID ,
  NULL   AS SHIP_TO_CUSTOMER_ID ,
  -999   AS SHIP_TO_SITE_USE_ID ,
  -999   AS SOLD_TO_CUSTOMER_ID ,
  WI_NET.SCA_SOURCE_TYPE_CD               AS SCA_SOURCE_TYPE_CD ,
  WI_NET.SALES_COMMISSION_PERCENTAGE      AS SPLIT_PERCENT ,
  /*COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT ,-999)          AS TERRITORY_ID */
  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                  ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
  END as TERRITORY_ID ,
  WRSNT.SCA_SOURCE_COMMIT_DTM            AS TRANSACTION_DATE ,
  WI_NET.TRANSACTION_GROUPING_TYPE_CODE   AS TRANSACTION_GROUPING_TYPE ,
  WI_NET.DV_TRX_QTY        AS TRANSACTION_QUANTITY ,
  ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
  NAT.AR_TRX_DATETIME        AS TRX_DATE ,
  NULL           AS TRX_NAME ,
  NAT.BK_AR_TRX_NUMBER       AS TRX_NUMBER ,
  NATT.AR_TRX_TYPE_SHORT_CODE      AS TRX_TYPE ,
  NULL           AS UNIT_SELLING_PRICE ,
  NULL           AS UNIT_STANDARD_PRICE ,
  current_timestamp(0)       AS CREATE_DATETIME ,
  'I'            AS ACTION_CODE ,
  WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
  WI_NET.DV_TRANSACTION_KEY               AS DV_TRANSACTION_KEY ,
  WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
  WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
  WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE  ,
  WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT,
  WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD
  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
  
  INNER JOIN 
   ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
  (
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
    union all   
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
    UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
    union all
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
    /* RCHETTRI : 11/18/2013 : ADDED TABLES */
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
    /* CSPP VIP Changes*/
   UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
     
 
 /*Added RTE Exception tables */
   UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_RT  
    UNION ALL 
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT  
    UNION ALL 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_RT  
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS /*thvarghe :Q3FY16 XAAS-SC Solution*/ 
     /* CSPP VIP Changes*/
     UNION ALL 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
 UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS DRVD_XAAS /*prmaddal :Q1FY18 XAAS-SC Implementation*/
	UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/

   
   ) TMP
   ) SM_MAX
  ON 1=1
  
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
   ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
  
  INNER JOIN $$ETLVWDB.SM_AR_ADJUSTMENT_TRX SAAT
   on SAAT.AR_ADJUSTMENT_KEY =  WI_NET.DV_TRANSACTION_KEY  
   
  INNER JOIN $$FINLGLVWDB.N_AR_ADJUSTMENT_TRX NAAT
   on NAAT.SK_ADJUSTMENT_ID_INT = SAAT.SK_ADJUSTMENT_ID_INT
   AND NAAT.SS_CODE = SAAT.SS_CD 
  
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON WI_NET.AR_TRX_KEY = NAT.AR_TRX_KEY
  
  JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY 
   
    /*ADDED BELOW JOIN TO RESTRICT XAAS DATA*/
    INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
   ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
 
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
   ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
   AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
   AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
   
  INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY     
   
  INNER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
   ON (NP.BK_PRODUCT_ID = ELMTL.SEGMENT1 )
   
 INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
   ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY 
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
   ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY 
   
  INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
   ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
   AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY  
  
  INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
   ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT   
   AND WRSNT.SK_SC_AGENT_ID_INT = WI_NET.SK_SC_AGENT_ID_INT 
   AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')
  /* rchettri: left join instead of inner join 
  INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT */
  LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
   on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
   AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME 
   
  /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
  LEFT OUTER JOIN 
  ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
   FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
   QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
  ) NSCTT
   ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE  
   
  left outer join 
                  (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                  from  $$ETLVWDB.EL_SALES_REP
                                  qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                  ) ESR_REVERSE
                  on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
  
  left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                  on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                  
  left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                  on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                  AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME
  WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'AR_ADJUSTMENT'
  AND NSSC.GLOBAL_NAME ='CDC'
 /*AND NABS.BK_BATCH_SOURCE_NAME NOT IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
 AND NABS.BK_BATCH_SOURCE_NAME NOT LIKE ALL ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/


Post SQL : 



Target9 Name : WI_DRVD_NCR_REV_BKG_CG_aradj_CDC


Pre SQL : 



Post SQL : 
UPDATE STG
FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG STG
,$$FINLGLVWDB.N_AR_ADJUSTMENT_TRX NAAT		
, (SELECT 
	COALESCE(EV_NGLA.GENERAL_LEDGER_ACCOUNT_KEY,-995) AS GENERAL_LEDGER_ACCOUNT_KEY,
	ELCDC.CODE_COMBINATION_ID ,
	ELCDC.SEGMENT4 AS BK_FINANCIAL_ACCOUNT_CODE,
	NSSC.GLOBAL_NAME  as GLOBAL_NAME
	FROM
	$$ETLVWDB.EL_CDC_GL_CODE_COMBINATIONS ELCDC
	INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
	ON ELCDC.GLOBAL_NAME = NSSC.GLOBAL_NAME
	LEFT JOIN $$ETLVWDB.EV_N_GENERAL_LEDGER_ACCOUNT EV_NGLA
	ON	(		
			 ELCDC.SEGMENT1=EV_NGLA.BK_COMPANY_CODE
	AND ELCDC.SEGMENT2=EV_NGLA.BK_FINANCIAL_LOCATION_CODE
	AND ELCDC.SEGMENT3=EV_NGLA.BK_DEPARTMENT_CODE
	AND ELCDC.SEGMENT4=EV_NGLA.BK_FINANCIAL_ACCOUNT_CODE
	AND ELCDC.SEGMENT5=EV_NGLA.BK_SUBACCOUNT_CODE
	AND ELCDC.SEGMENT6=EV_NGLA.BK_PROJECT_CODE
) 
QUALIFY ROW_NUMBER() OVER(PARTITION BY  ELCDC.SEGMENT1,  ELCDC.SEGMENT2,  ELCDC.SEGMENT3,  ELCDC.SEGMENT4,
ELCDC.SEGMENT5, ELCDC.SEGMENT6 ORDER BY  GENERAL_LEDGER_ACCOUNT_KEY DESC)=1 )ENGLA
SET ACCOUNT_CODE=ENGLA.BK_FINANCIAL_ACCOUNT_CODE
WHERE STG.DV_TRANSACTION_SOURCE_CD='AR_ADJUSTMENT'  AND LAST_UPDATED_BY<>1 
AND STG.ADJUSTMENT_ID = NAAT.SK_ADJUSTMENT_ID_INT
AND NAAT.SS_CODE = STG.GLOBAL_NAME		
AND ENGLA.GENERAL_LEDGER_ACCOUNT_KEY = NAAT.GENERAL_LEDGER_ACCOUNT_KEY
AND STG.GLOBAL_NAME='CDC';

CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_BKG_CG','D');


Source10 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_rae_rev_XAAS


Pre SQL : 



SQL Query : 
SELECT
 2            AS  BATCH_ID ,
 COALESCE(SORA.RULE_ID ,-999)          AS ACCOUNTING_RULE_ID ,
 WI_NET.PD_ACCOUNTING_RULE_NAME          AS ACCOUNTING_RULE_NAME ,
 WI_NET.ACCOUNT_CLASS_CODE               AS ACCOUNT_CLASS ,
 NULL           AS ACCOUNT_CODE ,
 WI_NET.DV_FUNC_AMT        AS ACCTD_AMOUNT ,
 COALESCE(SRNR.SK_NET_REVENUE_ID,-9999)       AS  ADJUSTMENT_ID ,
 EOXRNR.SCHEDULE_LINE_ID       AS ADJUSTMENT_NUMBER ,
 'RAE_REVENUE'         AS ADJUSTMENT_TYPE ,
 WI_NET.DV_TRX_AMT        AS AMOUNT ,
 -999           AS BILL_TO_CUSTOMER_ID ,
 -999           AS BILL_TO_SITE_USE_ID ,
 NULL           AS CODE_COMBINATION_ID ,
 NULL           AS COGS_PERCENT ,
 NULL           AS COMMENTS ,
 NULL           AS CONTEXT ,
 2            AS CREATED_BY ,
 WI_NET.EDW_CREATE_DATETIME           AS CREATION_DATE ,
 COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)     AS CUSTOMER_TRX_ID ,
 COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999)    AS CUSTOMER_TRX_LINE_ID ,
 -9999           AS CUST_TRX_LINE_GL_DIST_ID ,
 WI_NET.DEFAULT_SC_FLG                   AS DEFAULT_SC_FLAG ,
 NULL           AS EXTENDED_AMOUNT ,
 'REV'           AS EXTRACT_TYPE ,
 (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
 WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
 WI_NET.PD_FUNCTIONAL_CURRENCY_CODE      AS FUNC_CURRENCY_CODE ,
 current_timestamp(0)       AS GES_UPDATE_DATE ,
 NSSC.GLOBAL_NAME               AS GLOBAL_NAME ,
 WI_NET.GL_DATETIME                      AS GL_DATE ,
 WI_NET.GL_POSTED_DATE                   AS GL_POSTED_DATE ,
 NULL           AS GROUPING_ID ,
 NP.SK_INVENTORY_ITEM_ID_INT      AS INVENTORY_ITEM_ID ,
 NAT.BK_TRXL_CURRENCY_CODE      AS INVOICE_CURRENCY_CODE ,
 NULL           AS INVOICE_PERCENT ,
 NULL           AS INVOICING_RULE_ID ,
 2            AS LAST_UPDATED_BY ,
 current_timestamp(0)       AS LAST_UPDATE_DATE ,
 WI_NET.LAST_RECORD_FLAG                 AS LATEST_RECORD_FLAG ,
 WI_NET.SK_LINE_SEQ_ID_INT               AS SK_LINE_SEQ_ID_INT ,
 WI_NET.LINE_TYPE_CODE           AS LINE_TYPE ,
 NULL           AS LINK_TO_CUST_TRX_LINE_ID ,
/*  COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT,-9999)      AS ORDER_HEADER_ID ,
 CASE WHEN (NSOL.SK_SO_LINE_ID_INT IS NULL OR NSOL.SK_SO_LINE_ID_INT =0) THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END AS ORDER_LINE_ID ,
 NSO.BK_SO_NUMBER_INT        AS ORDER_NUMBER , */
 -9999 AS ORDER_HEADER_ID,
 -9999 AS ORDER_LINE_ID,
 NULL AS ORDER_NUMBER,
 EOUGC.SK_ORGANIZATION_ID_INT     AS ORG_ID ,
 CAST(EOXRNR.ATTRIBUTE2 AS DECIMAL(18,2))   AS LINE_PERCENT ,
 NULL           AS PREVIOUS_CUSTOMER_TRX_ID ,
 NULL           AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
 
 /* CASE WHEN NSSC.GLOBAL_NAME = 'CG' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
  ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG    ELSE WI_NET.QUOTA_FLAG END 
 END as   QUOTA_FLAG , */
 NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG AS QUOTA_FLAG,
 NULL           AS REASON_CODE ,
 NULL           AS REBATE_AMOUNT ,
 NULL           AS REBATE_PERCENTAGE_ID ,
 COALESCE((CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN NULL   ELSE 999 END) ,-999) AS REQUEST_ID,
 WI_NET.RULE_START_DATETIME              AS RULE_START_DATE ,
 /* CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                 ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999)
 END as    SALESREP_ID */
 COALESCE(ESR_ALL.SALES_REP_ID,-999) AS SALESREP_ID ,
 /* CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                 ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) 
 END as    SALES_CREDIT_TYPE_ID */
 COALESCE(ESCT_ALL.SK_CREDIT_TYPE_ID , -999) AS SALES_CREDIT_TYPE_ID,
 NULL           AS SHIP_TO_CUSTOMER_ID ,
 -999           AS SHIP_TO_SITE_USE_ID ,
 -999           AS SOLD_TO_CUSTOMER_ID ,
 WI_NET.SCA_SOURCE_TYPE_CD               AS SCA_SOURCE_TYPE_CD ,
 WI_NET.SALES_COMMISSION_PERCENTAGE      AS SPLIT_PERCENT ,
 /* CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                 ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
 END as TERRITORY_ID , */
 COALESCE(EST_ALL.TERRITORY_ID, -999) AS TERRITORY_ID,
 WRSNT.SOURCE_COMMIT_DTM      AS TRANSACTION_DATE ,
 WI_NET.TRANSACTION_GROUPING_TYPE_CODE   AS TRANSACTION_GROUPING_TYPE ,
 WI_NET.DV_TRX_QTY        AS TRANSACTION_QUANTITY ,
 ROW_NUMBER()  OVER( ORDER BY WRSNT.SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
 NAT.AR_TRX_DATETIME        AS TRX_DATE ,
 NULL           AS TRX_NAME ,
 NAT.BK_AR_TRX_NUMBER       AS TRX_NUMBER ,
 NATT.AR_TRX_TYPE_SHORT_CODE      AS TRX_TYPE ,
 NULL           AS UNIT_SELLING_PRICE ,
 NULL           AS UNIT_STANDARD_PRICE ,
 current_timestamp(0)       AS CREATE_DATETIME ,
 'I'            AS ACTION_CODE ,
 WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
 WI_NET.DV_TRANSACTION_KEY               AS DV_TRANSACTION_KEY ,
 WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
 WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
 WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE ,
 WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT ,
 EOXRNR.SOURCE_DATA_KEY5 ,
 'UNKNOWN' AS SALES_MOTION_CD
 FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_NET
 
 INNER JOIN 
  ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
 (
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
   union all   
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
   UNION ALL
   SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
   UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
   UNION ALL 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
   union all 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
   union all
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
   union all 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
   /* RCHETTRI : 11/18/2013 : ADDED TABLES */
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS /*thvarghe :Q3FY16 XAAS-SC Solution*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS WI_DRVD_XAAS /*XAAS SC CHANGES*/
      /* CSPP VIP Changes*/
     UNION ALL 
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
	    UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
	 UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_CG /*CARBT*/
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
  ) TMP
  ) SM_MAX
 ON 1=1
 
 
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
  ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
  
 INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
  ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
  AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME 
 
 INNER JOIN $$ETLVWDB.SM_RAE_NET_REVENUE SRNR
  on SRNR.NET_REVENUE_KEY = WI_NET.DV_TRANSACTION_KEY
  
 INNER JOIN $$ETLVWDB.EL_OM_XXCFI_RAE_NET_REVENUE EOXRNR
  ON EOXRNR.NET_REVENUE_ID = SRNR.SK_NET_REVENUE_ID
  AND EOXRNR.GLOBAL_NAME = NSSC.GLOBAL_NAME 
  AND EOXRNR.SCHEDULE_LINE_ID = SRNR.SCHEDULE_LINE_ID
 INNER JOIN  $$FINLGLVWDB.N_AR_TRX NAT
  ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT                             
  ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
  AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
  AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
  
  /*ADDED BELOW JOIN TO RESTRICT XAAS DATA*/
   INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
 ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
  
 INNER JOIN $$COMREFVWDB.N_PRODUCT NP
  ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY   
 
/*  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
  ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY 
 INNER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
  ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY */
  
 INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
  ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
  AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY  
 
 /* INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
  ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT  
     AND WRSNT.SK_SC_AGENT_ID_INT   = WI_NET.SK_SC_AGENT_ID_INT
  AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
  AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE') */
INNER JOIN (SELECT AR_TRX_LINE_KEY,SOURCE_COMMIT_DTM,EVENT_TYPE FROM $$STGDB.WI_BKG_SCA_NRT_XAAS_TV GROUP BY 1,2,3) WRSNT
   ON  WRSNT.AR_TRX_LINE_KEY  = WI_NET.AR_TRX_LINE_KEY  
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')

 /* rchettri: left join instead of inner join 
 INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT */
 /* LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
  on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
  AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME  */
 /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
 LEFT OUTER JOIN 
 ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
  FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
  QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
 ) NSCTT
  ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE 
  
  LEFT OUTER JOIN 
                 (               SELECT SALES_REP_ID,GLOBAL_NAME, SALES_REP_NUMBER 
                                 FROM  $$ETLVWDB.EL_SALES_REP
                                 QUALIFY ROW_NUMBER() OVER(PARTITION BY GLOBAL_NAME, SALES_REP_NUMBER ORDER BY SALES_REP_ID DESC) = 1
                 ) ESR_ALL
                 on ESR_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                 and ESR_ALL.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
 
 LEFT OUTER JOIN $$ETLVWDB.EL_SALES_TERRITORY EST_ALL
                 on EST_ALL.GLOBAL_NAME= NSSC.GLOBAL_NAME
                 and EST_ALL.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                 
 LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_ALL
                 on ESCT_ALL.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                 AND ESCT_ALL.GLOBAL_NAME = NSSC.GLOBAL_NAME
 WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'RAE_REVENUE'
 AND NSSC.GLOBAL_NAME = 'CG'  
 /*AND NABS.BK_BATCH_SOURCE_NAME IN ('XAAS','ICMS-XAAS','PP-XAAS*/
 AND (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
 OR (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))


Post SQL : 



Target10 Name : WI_DRVD_NCR_REV_BKG_CG_rae_rev_XAAS


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_TRX_FOR_BKG_CG','D');


Source11 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_rae_rev


Pre SQL : 



SQL Query : 
SELECT
  2            AS  BATCH_ID ,
  COALESCE(SORA.RULE_ID ,-999)          AS ACCOUNTING_RULE_ID ,
  WI_NET.PD_ACCOUNTING_RULE_NAME          AS ACCOUNTING_RULE_NAME ,
  WI_NET.ACCOUNT_CLASS_CODE               AS ACCOUNT_CLASS ,
  NULL           AS ACCOUNT_CODE ,
  WI_NET.DV_FUNC_AMT        AS ACCTD_AMOUNT ,
  COALESCE(SRNR.SK_NET_REVENUE_ID,-9999)       AS  ADJUSTMENT_ID ,
  EOXRNR.SCHEDULE_LINE_ID       AS ADJUSTMENT_NUMBER ,
  'RAE_REVENUE'         AS ADJUSTMENT_TYPE ,
  WI_NET.DV_TRX_AMT        AS AMOUNT ,
  -999           AS BILL_TO_CUSTOMER_ID ,
  -999           AS BILL_TO_SITE_USE_ID ,
  NULL           AS CODE_COMBINATION_ID ,
  NULL           AS COGS_PERCENT ,
  NULL           AS COMMENTS ,
  NULL           AS CONTEXT ,
  2            AS CREATED_BY ,
  WI_NET.EDW_CREATE_DATETIME           AS CREATION_DATE ,
  COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT ,-9999)     AS CUSTOMER_TRX_ID ,
  COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999)    AS CUSTOMER_TRX_LINE_ID ,
  -9999           AS CUST_TRX_LINE_GL_DIST_ID ,
  WI_NET.DEFAULT_SC_FLG                   AS DEFAULT_SC_FLAG ,
  NULL           AS EXTENDED_AMOUNT ,
  'REV'           AS EXTRACT_TYPE ,
  (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
  WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
  WI_NET.PD_FUNCTIONAL_CURRENCY_CODE      AS FUNC_CURRENCY_CODE ,
  current_timestamp(0)       AS GES_UPDATE_DATE ,
  NSSC.GLOBAL_NAME               AS GLOBAL_NAME ,
  WI_NET.GL_DATETIME                      AS GL_DATE ,
  WI_NET.GL_POSTED_DATE                   AS GL_POSTED_DATE ,
  NULL           AS GROUPING_ID ,
  NP.SK_INVENTORY_ITEM_ID_INT      AS INVENTORY_ITEM_ID ,
  NAT.BK_TRXL_CURRENCY_CODE      AS INVOICE_CURRENCY_CODE ,
  NULL           AS INVOICE_PERCENT ,
  NULL           AS INVOICING_RULE_ID ,
  2            AS LAST_UPDATED_BY ,
  current_timestamp(0)       AS LAST_UPDATE_DATE ,
  WI_NET.LAST_RECORD_FLAG                 AS LATEST_RECORD_FLAG ,
  WI_NET.SK_LINE_SEQ_ID_INT               AS SK_LINE_SEQ_ID_INT ,
  WI_NET.LINE_TYPE_CODE           AS LINE_TYPE ,
  NULL           AS LINK_TO_CUST_TRX_LINE_ID ,
  COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT,-9999)      AS ORDER_HEADER_ID ,
  CASE WHEN (NSOL.SK_SO_LINE_ID_INT IS NULL OR NSOL.SK_SO_LINE_ID_INT =0) THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END AS ORDER_LINE_ID ,
  NSO.BK_SO_NUMBER_INT        AS ORDER_NUMBER ,
  EOUGC.SK_ORGANIZATION_ID_INT     AS ORG_ID ,
  CAST(EOXRNR.ATTRIBUTE2 AS DECIMAL(18,2))   AS LINE_PERCENT ,
  NULL           AS PREVIOUS_CUSTOMER_TRX_ID ,
  NULL           AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
  
  CASE WHEN NSSC.GLOBAL_NAME = 'CG' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
   ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG    ELSE WI_NET.QUOTA_FLAG END 
  END as   QUOTA_FLAG ,
  NULL           AS REASON_CODE ,
  NULL           AS REBATE_AMOUNT ,
  NULL           AS REBATE_PERCENTAGE_ID ,
  COALESCE((CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN NULL   ELSE 999 END) ,-999) AS REQUEST_ID,
  WI_NET.RULE_START_DATETIME              AS RULE_START_DATE ,
  CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALESREP_ID_INT   ,-999)
                  ELSE COALESCE(ESR_REVERSE.SALES_REP_ID,-999)
  END as    SALESREP_ID
   ,
  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)
                  ELSE COALESCE(ESCT_REVERSE.SK_CREDIT_TYPE_ID , -999) 
  END as    SALES_CREDIT_TYPE_ID
   ,
  NULL           AS SHIP_TO_CUSTOMER_ID ,
  -999           AS SHIP_TO_SITE_USE_ID ,
  -999           AS SOLD_TO_CUSTOMER_ID ,
  WI_NET.SCA_SOURCE_TYPE_CD               AS SCA_SOURCE_TYPE_CD ,
  WI_NET.SALES_COMMISSION_PERCENTAGE      AS SPLIT_PERCENT ,
  CASE  WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT,-999)
                  ELSE COALESCE(EST_REVERSE.TERRITORY_ID, -999) 
  END as TERRITORY_ID ,
  WRSNT.SCA_SOURCE_COMMIT_DTM      AS TRANSACTION_DATE ,
  WI_NET.TRANSACTION_GROUPING_TYPE_CODE   AS TRANSACTION_GROUPING_TYPE ,
  WI_NET.DV_TRX_QTY        AS TRANSACTION_QUANTITY ,
  ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
  NAT.AR_TRX_DATETIME        AS TRX_DATE ,
  NULL           AS TRX_NAME ,
  NAT.BK_AR_TRX_NUMBER       AS TRX_NUMBER ,
  NATT.AR_TRX_TYPE_SHORT_CODE      AS TRX_TYPE ,
  NULL           AS UNIT_SELLING_PRICE ,
  NULL           AS UNIT_STANDARD_PRICE ,
  current_timestamp(0)       AS CREATE_DATETIME ,
  'I'            AS ACTION_CODE ,
  WI_NET.DV_TRANSACTION_SOURCE_CD         AS DV_TRANSACTION_SOURCE_CD ,
  WI_NET.DV_TRANSACTION_KEY               AS DV_TRANSACTION_KEY ,
  WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
  WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
  WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE ,
  WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT ,
  EOXRNR.SOURCE_DATA_KEY5,
  WI_NET.SALES_MOTION_CD
  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
  INNER JOIN 
   ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
  (
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
    union all   
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
    UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
    union all
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
      /* CSPP VIP Changes */
 UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
    UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
   
 /* RCHETTRI : 11/18/2013 : ADDED TABLES */
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS /*thvarghe :Q3FY16 XAAS-SC Solution*/
UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS DRVD_XAAS /*prmaddal :Q1FY18 XAAS-SC Implementation*/  
   UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_CG /*CARBT*/
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
 ) TMP
   ) SM_MAX
  ON 1=1
  
  
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
   ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
   
  INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
   ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
   AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME 
  
  INNER JOIN $$ETLVWDB.SM_RAE_NET_REVENUE SRNR
   on SRNR.NET_REVENUE_KEY = WI_NET.DV_TRANSACTION_KEY
   
  INNER JOIN $$ETLVWDB.EL_OM_XXCFI_RAE_NET_REVENUE EOXRNR
   ON EOXRNR.NET_REVENUE_ID = SRNR.SK_NET_REVENUE_ID
   AND EOXRNR.GLOBAL_NAME = NSSC.GLOBAL_NAME 
   AND EOXRNR.SCHEDULE_LINE_ID = SRNR.SCHEDULE_LINE_ID
  INNER JOIN  $$FINLGLVWDB.N_AR_TRX NAT
   ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY 
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY 
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT                             
   ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
   AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
   AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
   
 /*ADDED BELOW JOIN TO RESTRICT XAAS DATA*/
   INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
 ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
  INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY   
  
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
   ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY 
  INNER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
   ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY
   
  INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
   ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
   AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY  
  
  INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
   ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT  
      AND WRSNT.SK_SC_AGENT_ID_INT   = WI_NET.SK_SC_AGENT_ID_INT
   AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')
  /* rchettri: left join instead of inner join 
  INNER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT */
  LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
   on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
   AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME 
  /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
  LEFT OUTER JOIN 
  ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
   FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
   QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
  ) NSCTT
   ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE 
   
   left outer join 
                  (               select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                                  from  $$ETLVWDB.EL_SALES_REP
                                  qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                  ) ESR_REVERSE
                  on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
  
  left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                  on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                  
  left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                  on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                  AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME
  WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'RAE_REVENUE'
  AND NSSC.GLOBAL_NAME = 'CG'
/*AND NABS.BK_BATCH_SOURCE_NAME NOT IN ('XAAS','ICMS-XAAS','PP-XAAS')*/
AND (NABS.BK_BATCH_SOURCE_NAME NOT LIKE ALL ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
OR (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME  NOT IN ('XAAS')))


Post SQL : 



Target11 Name : WI_DRVD_NCR_REV_BKG_CG_rae_rev


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_BKG_CG','D');


Source12 Name : SQ_WI_DRVD_NET_CHANGE_FOR_BKG_rae_cogs


Pre SQL : 



SQL Query : 
SELECT
2         AS  BATCH_ID ,
  COALESCE(SORA.RULE_ID  ,-999)     AS   ACCOUNTING_RULE_ID ,
  WI_NET.PD_ACCOUNTING_RULE_NAME      AS  ACCOUNTING_RULE_NAME ,
  WI_NET.ACCOUNT_CLASS_CODE           AS  ACCOUNT_CLASS ,
  NULL              AS  ACCOUNT_CODE ,
  WI_NET.DV_FUNC_AMT     AS  ACCTD_AMOUNT ,
  COALESCE(SRCP.SK_COGS_PERCENT_ID,-9999)    AS  ADJUSTMENT_ID ,
  EOXRCP.SCHEDULE_LINE_ID    AS  ADJUSTMENT_NUMBER ,
  'RAE_COGS'       AS  ADJUSTMENT_TYPE ,
  WI_NET.DV_TRX_AMT     AS AMOUNT ,
  -999        AS BILL_TO_CUSTOMER_ID ,
  -999        AS BILL_TO_SITE_USE_ID ,
  NULL        AS CODE_COMBINATION_ID ,
  CASE WHEN EOXRCP.ATTRIBUTE13 = 'Y' THEN
      CASE WHEN   SUBSTR(NLGA_VW.BK_FINANCIAL_ACCOUNT_CODE,1,2) = '12' THEN 0
        ELSE EOXRCP.COGS_PERCENT
      END
    ELSE EOXRCP.COGS_PERCENT
  END         AS COGS_PERCENT ,
  NULL        AS COMMENTS ,
  NULL        AS CONTEXT ,
  2         AS CREATED_BY ,
  WI_NET.EDW_CREATE_DATETIME        AS CREATION_DATE ,
  COALESCE(NAT.SK_CUSTOMER_TRX_ID_LINT,-9999)   AS CUSTOMER_TRX_ID ,
  COALESCE(NATL.SK_CUSTOMER_TRX_LINE_ID_LINT,-9999) AS CUSTOMER_TRX_LINE_ID ,
  -9999        AS CUST_TRX_LINE_GL_DIST_ID ,
  WI_NET.DEFAULT_SC_FLG               AS DEFAULT_SC_FLAG ,
  NULL        AS EXTENDED_AMOUNT ,
  'REV'        AS EXTRACT_TYPE ,
  (WI_NET.DV_FISCAL_YEAR_NUMBER_INT * 100) + WI_NET.DV_FISCAL_MONTH_NUMBER_INT   AS FISCAL_ID ,
  WI_NET.FORWARD_REVERSE_CODE             AS FORWARD_REVERSE_FLAG ,
  WI_NET.PD_FUNCTIONAL_CURRENCY_CODE      AS FUNC_CURRENCY_CODE ,
  current_timestamp(0)       AS GES_UPDATE_DATE ,
  NSSC.GLOBAL_NAME              AS  GLOBAL_NAME ,
  WI_NET.GL_DATETIME                      AS GL_DATE ,
  WI_NET.GL_POSTED_DATE                   AS GL_POSTED_DATE ,
  NULL           AS GROUPING_ID ,
  NP.SK_INVENTORY_ITEM_ID_INT   AS INVENTORY_ITEM_ID ,
  NAT.BK_TRXL_CURRENCY_CODE   AS INVOICE_CURRENCY_CODE ,
  NULL        AS INVOICE_PERCENT ,
  NULL        AS INVOICING_RULE_ID ,
  2         AS LAST_UPDATED_BY ,
  current_timestamp(0)    AS LAST_UPDATE_DATE ,
  WI_NET.LAST_RECORD_FLAG                 AS LATEST_RECORD_FLAG ,
  WI_NET.SK_LINE_SEQ_ID_INT               AS SK_LINE_SEQ_ID_INT ,
  WI_NET.LINE_TYPE_CODE       AS LINE_TYPE ,
  NULL        AS LINK_TO_CUST_TRX_LINE_ID ,
  COALESCE(NSO.SK_SALES_ORDER_HEADER_ID_INT,-9999)   AS ORDER_HEADER_ID ,
  CASE WHEN NSOL.SK_SO_LINE_ID_INT IS NULL OR  NSOL.SK_SO_LINE_ID_INT =0 THEN -9999 ELSE NSOL.SK_SO_LINE_ID_INT END       AS ORDER_LINE_ID ,
  NSO.BK_SO_NUMBER_INT       AS ORDER_NUMBER ,
  EOUGC.SK_ORGANIZATION_ID_INT  AS ORG_ID ,
  NULL        AS LINE_PERCENT ,
  NULL        AS PREVIOUS_CUSTOMER_TRX_ID ,
  NULL        AS PREVIOUS_CUSTOMER_TRX_LINE_ID ,
  /* RCHETTRI : REBOK CHANGES 
  ESCT.QUOTA_FLAG       AS QUOTA_FLAG  */
  CASE WHEN NSSC.GLOBAL_NAME = 'CG' THEN NSCTT.SALES_CREDIT_TYPE_QUOTA_FLAG 
   ELSE CASE WHEN WI_NET.FORWARD_REVERSE_CODE ='F' THEN ESCT.QUOTA_FLAG   ELSE WI_NET.QUOTA_FLAG END 
  END as   QUOTA_FLAG ,
  NULL        AS REASON_CODE ,
  NULL        AS REBATE_AMOUNT ,
  NULL        AS REBATE_PERCENTAGE_ID ,
  CASE WHEN NAT.MANUAL_TRANSACTION_FLG = 'Y' THEN -999   ELSE 999 END    AS REQUEST_ID ,
  WI_NET.RULE_START_DATETIME          AS RULE_START_DATE ,
  COALESCE(WRSNT.EP_SK_SALESREP_ID_INT,-999)   AS SALESREP_ID ,
  COALESCE(WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT,-999)     AS SALES_CREDIT_TYPE_ID ,
  NULL        AS SHIP_TO_CUSTOMER_ID ,
  -999        AS SHIP_TO_SITE_USE_ID ,
  -999        AS SOLD_TO_CUSTOMER_ID ,
  WI_NET.SCA_SOURCE_TYPE_CD           AS SCA_SOURCE_TYPE_CD ,
  WI_NET.SALES_COMMISSION_PERCENTAGE  AS SPLIT_PERCENT ,
  COALESCE(WRSNT.EP_SK_TERRITORY_ID_INT ,-999)     AS TERRITORY_ID ,
  WRSNT.SCA_SOURCE_COMMIT_DTM         AS TRANSACTION_DATE ,
  WI_NET.TRANSACTION_GROUPING_TYPE_CODE   AS TRANSACTION_GROUPING_TYPE ,
  DV_TRX_QTY       AS TRANSACTION_QUANTITY ,
  ROW_NUMBER()  OVER( ORDER BY WRSNT.SCA_SOURCE_COMMIT_DTM )  + SM_MAX.MAX_TRX_SEQ_ID   AS TRANSACTION_SEQUENCE_ID ,
  NAT.AR_TRX_DATETIME     AS TRX_DATE ,
  NULL        AS TRX_NAME ,
  NAT.BK_AR_TRX_NUMBER    AS TRX_NUMBER ,
  NATT.AR_TRX_TYPE_SHORT_CODE   AS TRX_TYPE ,
  NULL        AS UNIT_SELLING_PRICE ,
  NULL        AS UNIT_STANDARD_PRICE ,
  current_timestamp(0)    AS CREATE_DATETIME ,
  'I'         AS ACTION_CODE ,
  WI_NET.DV_TRANSACTION_SOURCE_CD     AS DV_TRANSACTION_SOURCE_CD ,
  WI_NET.DV_TRANSACTION_KEY           AS DV_TRANSACTION_KEY ,
  WI_NET.PD_SALES_REP_NUMBER   AS SALES_REP_NUMBER,
  WI_NET.PD_SALES_TERRITORY_KEY  AS SALES_TERRITORY_KEY,      
  WI_NET.SALES_CREDIT_TYPE_CODE  AS BK_SALES_CREDIT_TYPE_CODE, 
  WI_NET.SK_SC_AGENT_ID_INT AS SK_SC_AGENT_ID_INT,
  EOXRCP.SOURCE_DATA_KEY5,
  WI_NET.SALES_MOTION_CD AS SALES_MOTION_CD
  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_NET
  
  INNER JOIN 
   ( SELECT MAX(MAX_TRX_SEQ_ID) AS MAX_TRX_SEQ_ID FROM 
  (
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) MAX_TRX_SEQ_ID  FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG WI_DRVD
    union all   
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_BKG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0)    AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
    UNION ALL
    SELECT COALESCE(MAX(BK_TRANSACTION_SEQ_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$ETLVWDB.SM_DRVD_NCR_REV_TRX_FOR_REV
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RA_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RT_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_RAE_P    
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REVENUE_TRX_P  
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_RV_P
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RT_CG
    UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RAE_CG  
    UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_RA_CG  
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_P
    union all
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REVENUE_TRX_P
    union all 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_OM
    /* CSPP VIP Changes */
 UNION ALL
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REVENUE_TRX_CSPP_VIP_P
       UNION ALL 
    SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID   ),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_CSPP_VIP_CG
    
   
  /* RCHETTRI : 11/18/2013 : ADDED TABLES */
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID        ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REVENUE_TRX_BKG
  UNION ALL
  SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT    ),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG
     UNION ALL
     SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_TRX_XAAS /*thvarghe :Q3FY16 XAAS-SC Solution*/
 UNION ALL
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID_INT),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NET_CHANGE_FOR_BKG_XAAS DRVD_XAAS /*prmaddal :Q1FY18 XAAS-SC Implementation*/   
   UNION ALL   /* Added as part of Accruals Q2FY19 */ 		 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_ACRL_TRX_CG	 	 
   UNION ALL	 	 
   SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_ACRL_TRX_CG
   UNION ALL   /* Added as part of Meraki Q2FY19 */ 
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$STGDB.WI_DRVD_NCR_REV_MERK_TRX_CG
UNION ALL
SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_TRX_CG
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_MERK_CG /*CARBT*/
UNION ALL
SELECT MAX(TRANSACTION_SEQUENCE_ID   ) AS TRANSACTION_SEQUENCE_ID_INT FROM $$EXCEPDB.EX_OM_XXNCR_REV_MERK_CG /*CARBT*/
/* As part of Net Accounting*/
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$STGDB.WI_OM_XXNCR_REVENUE_TRX_NA_P
 UNION ALL
 SELECT COALESCE(MAX(TRANSACTION_SEQUENCE_ID),0) AS TRANSACTION_SEQUENCE_ID_INT    FROM   $$EXCEPDB.EX_OM_XXNCR_REV_NA_CG
/* As part of Net Accounting*/
) TMP
   ) SM_MAX
  ON 1=1
  
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
   ON WI_NET.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
   
  INNER JOIN $$ETLVWDB.EL_RA_RULES SORA
   ON WI_NET.PD_ACCOUNTING_RULE_NAME =  SORA.NAME
   AND NSSC.GLOBAL_NAME = SORA.GLOBAL_NAME  
  
  INNER JOIN $$ETLVWDB.SM_RAE_COGS_PERCENT SRCP
   on SRCP.COGS_PERCENT_KEY= WI_NET.DV_TRANSACTION_KEY 
   
  INNER JOIN   $$ETLVWDB.EL_OM_XXCFI_RAE_COGS_PERCNT EOXRCP
   ON SRCP.SK_COGS_PERCENT_ID      = EOXRCP.COGS_PERCENT_ID
   AND  NSSC.GLOBAL_NAME = EOXRCP.GLOBAL_NAME  
    
  INNER JOIN 
   (
    SELECT NGLA.SK_CODE_COMBINATION_ID_INT, NGLA.SS_CODE , NGLA.BK_FINANCIAL_ACCOUNT_CODE 
    FROM $$FINLGLVWDB. N_GENERAL_LEDGER_ACCOUNT NGLA
    GROUP BY NGLA.SK_CODE_COMBINATION_ID_INT, NGLA.SS_CODE , NGLA.BK_FINANCIAL_ACCOUNT_CODE 
   ) NLGA_VW
   ON EOXRCP.CODE_COMBINATION_ID    = NLGA_VW.SK_CODE_COMBINATION_ID_INT
   AND NSSC.SOURCE_SYSTEM_CODE = NLGA_VW.SS_CODE
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON NAT.AR_TRX_KEY   = WI_NET.AR_TRX_KEY
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON WI_NET.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT                             
   ON NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
   AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY
   AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE 
  
  INNER JOIN $$COMREFVWDB.N_PRODUCT NP
   ON NP.ITEM_KEY = WI_NET.PRODUCT_KEY 
  
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO
   ON NSO.SALES_ORDER_KEY    = WI_NET.SALES_ORDER_KEY
  INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL
   ON NSOL.SALES_ORDER_LINE_KEY    = WI_NET.SALES_ORDER_LINE_KEY 
  INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY  EOUGC
   ON NAT.BK_COMPANY_CODE= EOUGC.BK_COMPANY_CODE              
   AND NAT.BK_SET_OF_BOOKS_KEY    = EOUGC.SET_OF_BOOKS_KEY 
   
  INNER JOIN $$STGDB.WI_BKG_SCA_NRT_TV WRSNT
   ON WRSNT.SK_LINE_SEQ_ID_INT      = WI_NET.SK_LINE_SEQ_ID_INT    
   AND WRSNT.SK_SC_AGENT_ID_INT = WI_NET.SK_SC_AGENT_ID_INT
   AND WRSNT.  SS_CD     =     WI_NET.SOURCE_SYSTEM_CODE
   AND WRSNT.EVENT_TYPE   IN ('UPDATE','INSERT','DELETE')
  /* rchettri: left join instead of inner join */
  LEFT OUTER JOIN  $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT
   on ESCT.SK_CREDIT_TYPE_ID = WRSNT.EP_SK_SALES_CREDIT_TYPE_ID_INT
   AND ESCT.GLOBAL_NAME = NSSC.GLOBAL_NAME
  
   /* RCHETTRI : REBOK CHANGES: QUOTA FLAG FOR CG DATA */    
  LEFT OUTER JOIN 
  ( SELECT BK_SALES_CREDIT_TYPE_CODE, SALES_CREDIT_TYPE_QUOTA_FLAG 
   FROM $$SLSORDVWDB.N_SALES_CREDIT_TYPE_TV  
   QUALIFY ROW_NUMBER () OVER (PARTITION BY BK_SALES_CREDIT_TYPE_CODE   ORDER BY END_TV_DATE DESC)=1
  ) NSCTT
   ON WI_NET.SALES_CREDIT_TYPE_CODE = NSCTT.BK_SALES_CREDIT_TYPE_CODE 
   
  left outer join 
                  (   select sales_rep_id,GLOBAL_NAME, SALES_REP_NUMBER 
                      from  $$ETLVWDB.EL_SALES_REP
                      qualify row_number() over(partition by GLOBAL_NAME, SALES_REP_NUMBER order by sales_rep_id desc) = 1
                  ) ESR_REVERSE
                  on ESR_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and ESR_REVERSE.SALES_REP_NUMBER = WI_NET.PD_SALES_REP_NUMBER                 
  
  left outer join $$ETLVWDB.EL_SALES_TERRITORY EST_REVERSE
                  on EST_REVERSE.GLOBAL_NAME= NSSC.GLOBAL_NAME
                  and EST_REVERSE.SALES_TERRITORY_KEY = WI_NET.PD_SALES_TERRITORY_KEY 
                  
  left outer join $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT_REVERSE
                  on ESCT_REVERSE.NAME = WI_NET.SALES_CREDIT_TYPE_CODE
                  AND ESCT_REVERSE.GLOBAL_NAME = NSSC.GLOBAL_NAME
  WHERE WI_NET.DV_TRANSACTION_SOURCE_CD = 'RAE_COGS'
  AND NSSC.GLOBAL_NAME = 'CG'


Post SQL : 



Target12 Name : WI_DRVD_NCR_REV_BKG_CG_rae_cogs


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_BKG_CG','D');

UPDATE wk
FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG wk,
(SELECT TRANSACTION_SEQUENCE_ID, GLOBAL_NAME FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG   WHERE (ORDER_LINE_ID,GLOBAL_NAME) IN
(SELECT DISTINCT ORDER_LINE_ID,GLOBAL_NAME FROM  $$STGDB.WI_DRVD_NCR_REV_BKG_CG
WHERE FISCAL_ID = (SELECT  NFM.BK_FISCAL_YEAR_NUMBER_INT*100 + NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_id  
                  FROM $$comrefvwdb.n_fiscal_month nfm, $$etlvwdb.EL_AR_MONTH_PROCESS_DATE el
                  WHERE el.end_date + 1 BETWEEN nfm.fiscal_month_start_date AND nfm.fiscal_month_end_date)
AND TRANSACTION_GROUPING_TYPE     <> 'O'
AND FORWARD_REVERSE_FLAG          = 'F'
AND LATEST_RECORD_FLAG       =        'Y'
AND SOURCE_TYPE            = 'O')
AND  TRANSACTION_GROUPING_TYPE     <> 'O'
AND FORWARD_REVERSE_FLAG     = 'R'
AND LATEST_RECORD_FLAG       =       'N'
AND SOURCE_TYPE            = 'O'
AND  FISCAL_ID = (SELECT fiscal_id  FROM  $$etlvwdb.EL_AR_MONTH_PROCESS_DATE)
) x,
(SELECT NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_month_id,  NFM.BK_FISCAL_YEAR_NUMBER_INT AS fiscal_year_id,  
NFM.BK_FISCAL_YEAR_NUMBER_INT*100 + NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_id 
FROM $$comrefvwdb.n_fiscal_month nfm, $$etlvwdb.EL_AR_MONTH_PROCESS_DATE el
WHERE el.end_date + 1 BETWEEN nfm.fiscal_month_start_date AND nfm.fiscal_month_end_date
) y
SET 
FISCAL_ID  = y.fiscal_id
WHERE wk.TRANSACTION_SEQUENCE_ID = x.TRANSACTION_SEQUENCE_ID
AND wk.GLOBAL_NAME = x.GLOBAL_NAME
AND (CURRENT_DATE = (SELECT END_DATE FROM $$etlvwdb.EL_AR_MONTH_PROCESS_DATE)
                OR CURRENT_DATE >= (SELECT END_DATE FROM $$etlvwdb.EL_AR_MONTH_PROCESS_DATE) );
                                                                

UPDATE wk
FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG wk,
(SELECT TRANSACTION_SEQUENCE_ID, GLOBAL_NAME FROM $$STGDB.WI_DRVD_NCR_REV_BKG_CG    WHERE (CUSTOMER_TRX_LINE_ID,GLOBAL_NAME) IN
(SELECT DISTINCT CUSTOMER_TRX_LINE_ID,GLOBAL_NAME FROM  $$STGDB.WI_DRVD_NCR_REV_BKG_CG 
WHERE FISCAL_ID = (SELECT  NFM.BK_FISCAL_YEAR_NUMBER_INT*100 + NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_id  
                    FROM $$comrefvwdb.n_fiscal_month nfm, $$etlvwdb.EL_AR_MONTH_PROCESS_DATE el
                    WHERE el.end_date + 1 BETWEEN nfm.fiscal_month_start_date AND nfm.fiscal_month_end_date)
AND TRANSACTION_GROUPING_TYPE     <> 'O'
AND FORWARD_REVERSE_FLAG          = 'F'
AND LATEST_RECORD_FLAG       =        'Y'
AND SOURCE_TYPE            <> 'O')
AND  TRANSACTION_GROUPING_TYPE     <> 'O'
AND FORWARD_REVERSE_FLAG  = 'R'
AND LATEST_RECORD_FLAG       =       'N'
AND SOURCE_TYPE            <> 'O'
AND  FISCAL_ID = (SELECT fiscal_id  FROM  $$etlvwdb.EL_AR_MONTH_PROCESS_DATE)
) x,
(SELECT NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_month_id,  NFM.BK_FISCAL_YEAR_NUMBER_INT AS fiscal_year_id,  
NFM.BK_FISCAL_YEAR_NUMBER_INT*100 + NFM.BK_FISCAL_MONTH_NUMBER_INT AS fiscal_id 
FROM $$comrefvwdb.n_fiscal_month nfm, $$etlvwdb.EL_AR_MONTH_PROCESS_DATE el
WHERE el.end_date + 1 BETWEEN nfm.fiscal_month_start_date AND nfm.fiscal_month_end_date
) y
SET 
FISCAL_ID  = y.fiscal_id
WHERE wk.TRANSACTION_SEQUENCE_ID = x.TRANSACTION_SEQUENCE_ID
AND wk.GLOBAL_NAME = x.GLOBAL_NAME
AND (CURRENT_DATE = (SELECT END_DATE FROM $$etlvwdb.EL_AR_MONTH_PROCESS_DATE)
                OR CURRENT_DATE >= (SELECT END_DATE FROM $$etlvwdb.EL_AR_MONTH_PROCESS_DATE) );


Source13 Name : SQ_WI_OM_XXNCR_REVENUE_TRX_P_2


Pre SQL : 
DELETE FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG EXORT
WHERE (EXORT.GLOBAL_NAME ,EXORT.DV_TRANSACTION_KEY,EXORT.DV_TRANSACTION_SOURCE_CD,EXORT.CUSTOMER_TRX_LINE_ID,EXORT.FISCAL_ID ) IN
( SELECT STOXRT.GLOBAL_NAME ,STOXRT.DV_TRANSACTION_KEY, STOXRT.DV_TRANSACTION_SOURCE_CD,STOXRT.CUSTOMER_TRX_LINE_ID,STOXRT.FISCAL_ID
	FROM $$STGDB.WI_DRVD_NCR_REV_TRX STOXRT
 );
 
DELETE FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG EXORT
WHERE (EXORT.GLOBAL_NAME ,EXORT.DV_TRANSACTION_KEY,EXORT.DV_TRANSACTION_SOURCE_CD,EXORT.CUSTOMER_TRX_LINE_ID ) IN
( SELECT STOXRT.GLOBAL_NAME ,STOXRT.DV_TRANSACTION_KEY, STOXRT.DV_TRANSACTION_SOURCE_CD,STOXRT.CUSTOMER_TRX_LINE_ID 
	FROM $$STGDB.WI_DRVD_NCR_REV_TRX STOXRT
  UNION
  SELECT NSSC.GLOBAL_NAME , WDNRTFBKG.DV_TRANSACTION_KEY,WDNRTFBKG.DV_TRANSACTION_SOURCE_CD,NATL.SK_CUSTOMER_TRX_LINE_ID_LINT
	FROM	$$WORKDB.W_DRVD_NCR_REV_TRX_FOR_BKG WDNRTFBKG ,
		$$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC, $$FINLGLVWDB.N_AR_TRX_LINE NATL
	WHERE	WDNRTFBKG.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE 
	AND WDNRTFBKG.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY);


UPDATE DRVD
FROM
	$$FINLGLVWDB.N_DRVD_NCR_REV_TRX_FOR_BKG DRVD ,
	$$EXCEPDB.EX_WI_OM_XXNCR_REV_CG EX ,
	$$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC, 
	$$ETLVWDB.BKG_PROCESS_DT_CNTRL BKGPDT
SET 
	PROCESS_DATE   = BKGPDT.PROCESS_DATE ,
	EDW_UPDATE_USER = USER ,
	EDW_UPDATE_DATETIME  = CURRENT_TIMESTAMP(0)
WHERE
	DRVD.SOURCE_SYSTEM_CODE = NSSC.SOURCE_SYSTEM_CODE
	AND DRVD.TRANSACTION_SEQUENCE_ID_INT = EX.TRANSACTION_SEQUENCE_ID       
	AND NSSC.GLOBAL_NAME = EX.GLOBAL_NAME
	AND EX.EXCEPTION_TYPE   = 'FT'
	AND EX.FISCAL_ID = BKGPDT.FISCAL_YEAR_MTH_NUMBER_INT;
	
	
DELETE FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG EX 
WHERE EX.EXCEPTION_TYPE   = 'FT'
AND EX.FISCAL_ID  IN ( SELECT FISCAL_YEAR_MTH_NUMBER_INT FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL);
	
	
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_TRX','D');

DELETE FROM $$STGDB.WI_OM_XXNCR_REV_CG ALL;


SQL Query : 
SELECT
 STOXRT.BATCH_ID,STOXRT.ACCOUNTING_RULE_ID,STOXRT.ACCOUNTING_RULE_NAME,STOXRT.ACCOUNT_CLASS,STOXRT.ACCOUNT_CODE,STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,STOXRT.ADJUSTMENT_NUMBER,STOXRT.ADJUSTMENT_TYPE,STOXRT.AMOUNT,STOXRT.BILL_TO_CUSTOMER_ID,STOXRT.BILL_TO_SITE_USE_ID,STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,STOXRT.COMMENTS,STOXRT.CONTEXT,STOXRT.CREATED_BY,STOXRT.CREATION_DATE,STOXRT.CUSTOMER_TRX_ID,STOXRT.CUSTOMER_TRX_LINE_ID,STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,STOXRT.EXTENDED_AMOUNT,STOXRT.EXTRACT_TYPE,STOXRT.FISCAL_ID,STOXRT.FORWARD_REVERSE_FLAG,STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,STOXRT.GLOBAL_NAME,STOXRT.GL_DATE,STOXRT.GL_POSTED_DATE,STOXRT.GROUPING_ID,STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,STOXRT.INVOICE_PERCENT,STOXRT.INVOICING_RULE_ID,STOXRT.LAST_UPDATED_BY,STOXRT.LAST_UPDATE_DATE,STOXRT.LATEST_RECORD_FLAG,
 STOXRT.LINE_SEQ_ID,STOXRT.LINE_TYPE,STOXRT.LINK_TO_CUST_TRX_LINE_ID,STOXRT.ORDER_HEADER_ID,STOXRT.ORDER_LINE_ID,STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,STOXRT.LINE_PERCENT,STOXRT.PREVIOUS_CUSTOMER_TRX_ID,STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,STOXRT.REBATE_AMOUNT,STOXRT.REBATE_PERCENTAGE_ID,STOXRT.REQUEST_ID,STOXRT.RULE_START_DATE,STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,STOXRT.SHIP_TO_CUSTOMER_ID,STOXRT.SHIP_TO_SITE_USE_ID,STOXRT.SOLD_TO_CUSTOMER_ID,STOXRT.SOURCE_TYPE,STOXRT.SPLIT_PERCENT,STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,STOXRT.TRANSACTION_GROUPING_TYPE,STOXRT.TRANSACTION_QUANTITY,STOXRT.TRANSACTION_SEQUENCE_ID,STOXRT.TRX_DATE,STOXRT.TRX_NAME,STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,STOXRT.UNIT_SELLING_PRICE,STOXRT.UNIT_STANDARD_PRICE,STOXRT.CREATE_DATETIME,STOXRT.ACTION_CODE,STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD,STOXRT.SALES_REP_NUMBER,STOXRT.SALES_TERRITORY_KEY ,STOXRT.BK_SALES_CREDIT_TYPE_CODE ,STOXRT.SK_SC_AGENT_ID_INT,
 STOXRT.SOURCE_DATA_KEY5,STOXRT.SALES_MOTION_CD,STOXRT.RU_SERVICE_CONTRACT_START_DTM,STOXRT.RU_SERVICE_CONTRACT_END_DTM,STOXRT.DV_CONTRACT_DURATION,STOXRT.DV_ANNUALIZED_FLG,STOXRT.DV_ANNUALIZED_US_NET_AMT,STOXRT.DV_MULTIYEAR_US_NET_AMT,STOXRT.BOOKINGS_POLICY_CD
 FROM
 $$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
 INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL ON (EORCTL.CUSTOMER_TRX_LINE_ID = STOXRT.CUSTOMER_TRX_LINE_ID AND EORCTL.GLOBAL_NAME = STOXRT.GLOBAL_NAME)  
 LEFT JOIN  (SELECT SK_CUSTOMER_TRX_LINE_ID_LINT,RU_PARENT_AR_TRX_LINE_KEY,SS_CODE,OFFER_ATTRIBUTED_FLG , TRX_LINE_SRC_NAME  FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE group by 1,2,3,4,5) NATIL ON  NATIL.SK_CUSTOMER_TRX_LINE_ID_LINT=STOXRT.CUSTOMER_TRX_LINE_ID 
 LEFT JOIN  (SELECT AR_TRX_LINE_KEY,PRODUCT_KEY FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE group by 1,2) NATIL_PAR ON NATIL.RU_PARENT_AR_TRX_LINE_KEY=NATIL_PAR.AR_TRX_LINE_KEY 
 LEFT JOIN ( SELECT ITEM_KEY,RU_BKG_SRC_CD FROM $$COMREFVWDB.N_PRODUCT  group by 1,2) NP_PAR ON NATIL_PAR.PRODUCT_KEY=NP_PAR.ITEM_KEY 
 LEFT OUTER JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
 INNER JOIN $$ETLVWDB.EL_RA_RULES SORR ON (SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID)
 INNER JOIN $$ETLVWDB.SM_AR_TRX  SMARTRX ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID AND  SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX ON (NARTRX.AR_TRX_KEY = SMARTRX.AR_TRX_KEY)
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT ON (NATT.BK_COMPANY_CODE = NARTRX.BK_COMPANY_CODE AND NATT.BK_SET_OF_BOOKS_KEY = NARTRX.BK_SET_OF_BOOKS_KEY
 AND NATT.BK_AR_TRX_TYPE_CODE = NARTRX.BK_AR_TRX_TYPE_CODE)
 INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY EOUGC ON(NATT.BK_COMPANY_CODE = EOUGC.BK_COMPANY_CODE) /*PDUBASI ADDED AS PART OF SEP RELEASE NOTA_FISCAL CR*/
 INNER JOIN $$ETLVWDB.EL_AR_TRX_TYPE EL_TRX ON NATT.SK_CUST_TRX_TYPE_ID_INT = EL_TRX.CUST_TRX_TYPE_ID AND EL_TRX.ORG_ID = EOUGC.SK_ORGANIZATION_ID_INT
 AND NSSC.GLOBAL_NAME = EL_TRX.GLOBAL_NAME /*PDUBASI ADDED AS PART OF SEP RELEASE NOTA_FISCAL CR*/
 INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT
 ON (EORCT.CUSTOMER_TRX_ID = NARTRX.SK_CUSTOMER_TRX_ID_LINT AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
 LEFT OUTER JOIN (select SK_SALES_ORDER_HEADER_ID_INT,SS_CODE,SALES_ORDER_CATEGORY_TYPE from $$SLSORDVWDB.N_SALES_ORDER group by 1,2,3) NSO 
 ON (STOXRT.ORDER_HEADER_ID = NSO.SK_SALES_ORDER_HEADER_ID_INT AND NSSC.SOURCE_SYSTEM_CODE = NSO.SS_CODE)
 LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL    /* rchettri: added as a part of Lot-2A CG1 implementation */
 ON (STOXRT.ORDER_LINE_ID = NSOL.SK_SO_LINE_ID_INT
 AND NSSC.SOURCE_SYSTEM_CODE = NSOL.SS_CODE)
 LEFT OUTER JOIN $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT NSOL_NRT /*Added as part of Q4FY16 FCM */
 ON(NSOL_NRT.SALES_ORDER_LINE_KEY= NSOL.SALES_ORDER_LINE_KEY
 AND NSOL_NRT.SS_CD = NSOL.SS_CODE ) LEFT JOIN $$COMREFVWDB.N_PRODUCT NPT
 ON (NPT.SK_INVENTORY_ITEM_ID_INT = STOXRT.INVENTORY_ITEM_ID)
 LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME /* START: ADDED AS PART OF AUS MIGRATION */
 ON EL_GNAME.ORG_ID = STOXRT.ORG_ID AND EL_GNAME.ACTIVE_IND = 'Y'
 LEFT OUTER JOIN (select SK_SALES_ORDER_HEADER_ID_INT,SS_CODE,SALES_ORDER_CATEGORY_TYPE from $$SLSORDVWDB.N_SALES_ORDER  group by 1,2,3) NSO_CAL 
 ON (STOXRT.ORDER_HEADER_ID = NSO_CAL.SK_SALES_ORDER_HEADER_ID_INT
 AND EL_GNAME.ORIG_SS_CD = NSO_CAL.SS_CODE)  /* rchettri: added as a part of Lot-2A CG1 implementation */
 LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL_CAL
 ON (STOXRT.ORDER_LINE_ID = NSOL_CAL.SK_SO_LINE_ID_INT
 AND EL_GNAME.ORIG_SS_CD = NSOL_CAL.SS_CODE) /* END: ADDED AS PART OF AUS MIGRATION */
 LEFT OUTER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS ON NARTRX.AR_BATCH_SOURCE_KEY = NABS.AR_BATCH_SOURCE_KEY
 WHERE NSSC.GLOBAL_NAME='CG' AND NATIL.SS_CODE='CG' AND( STOXRT.EXTRACT_TYPE = 'INV' OR ( STOXRT.EXTRACT_TYPE ='REV'
 AND (  COALESCE(SORR.NAME,'Immediate') NOT LIKE '%VARIABLE%' AND UPPER(COALESCE(SORR.NAME,'Immediate')) NOT IN ('DAILY RATES'))))
 AND ((NATT.AR_TRX_TYPE_SHORT_CODE IN ('CM','DM','INV')  AND STOXRT.REQUEST_ID = -999)
 OR (NATT.AR_TRX_TYPE_SHORT_CODE = 'INV'  AND STOXRT.REQUEST_ID <> -999
 AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' 
 AND NATIL.TRX_LINE_SRC_NAME = 'ORDER ENTRY'  /*Added OR : TNC Feb 2020 Release*/ ))
 OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'  AND NATIL.TRX_LINE_SRC_NAME NOT IN ('XAAS')  /*Added OR : TNC Feb 2020 Release*/ ))
 AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Service Invoice' AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999
 AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' AND NATIL.TRX_LINE_SRC_NAME = 'ORDER ENTRY')) OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
 AND NATIL.TRX_LINE_SRC_NAME  NOT IN ('XAAS')  /*Added OR : TNC Feb 2020 Release*/ ))
 AND COALESCE(NSO.SALES_ORDER_CATEGORY_TYPE,NSO_CAL.SALES_ORDER_CATEGORY_TYPE) ='RETURN'
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 /* rchettri: added as a part of Lot-2A CG1 implementation */
 AND  ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' 
 AND NATIL.TRX_LINE_SRC_NAME = 'ORDER ENTRY' ))OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
 AND NATIL.TRX_LINE_SRC_NAME  NOT IN ('XAAS')  /*Added OR : TNC Feb 2020 Release*/ ))
 AND COALESCE(NSOL.sales_order_category_type,NSOL_CAL.sales_order_category_type) = 'RETURN' /* AND UPPER(NSO.SALES_ORDER_CATEGORY_TYPE)='MIXED'*/
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999
 AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' 
 AND NATIL.TRX_LINE_SRC_NAME = 'ORDER ENTRY' ))OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
 AND NATIL.TRX_LINE_SRC_NAME  NOT IN ('XAAS')   /*Added OR : TNC Feb 2020 Release*/ ))
 AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Product Credit Memo'
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
 ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'INV'  AND STOXRT.REQUEST_ID <> -999
 AND  COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'METRIX'
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
 ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
 AND  ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN 
 ('SALES ADJUSTMENTS','DISPUTE','DCA TWO-TIER' ,'COOP TWO-TIER','ICMS-ADJ','DCA TWO TIER','COOP TWO TIER')
 AND NATIL.TRX_LINE_SRC_NAME  NOT IN ('XAAS') )OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) IN  ('DISPUTE','ICMS-ADJ') AND NATIL.TRX_LINE_SRC_NAME  NOT IN ('XAAS')))
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
 ELSE 'UNK' END  <> 'TSL' ) /* Added 'ICMS-XAAS' as part of Q3FY16*/
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
 AND  ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN ('ICMS-XAAS','ICMS-XAAS-CCE')
   /* ADDED AS PART OF CCE %/  /*OR UPPER(NABS.BK_BATCH_SOURCE_NAME) = 'ICMS-XAAS'*/
   OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN ('ICMS-ADJ') AND NATIL.TRX_LINE_SRC_NAME IN ('XAAS')))
 OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ICMS-XAAS%' OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) IN ('ICMS-ADJ') AND NATIL.TRX_LINE_SRC_NAME  IN ('XAAS')))) /*ADDED AS PART OF Q1FY19 CE-BRAZIL*/ 
  AND EORCTL.INTERFACE_LINE_ATTRIBUTE10 IN ('SPECIAL_DEBIT','SPECIAL_CREDIT','SPECIAL_INVOICE')
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
 AND(( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY TNC' 
 AND NATIL.TRX_LINE_SRC_NAME = 'ORDER ENTRY')) OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
 AND NATIL.TRX_LINE_SRC_NAME  NOT IN ('XAAS')  /*Added OR : TNC Feb 2020 Release*/ ) )AND
 CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  = 'TSL'
 AND EORCTL.INTERFACE_LINE_ATTRIBUTE10 IN ('SPECIAL_DEBIT','SPECIAL_CREDIT','SPECIAL_INVOICE'))
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999
 AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) In ( 'TAXI','METRIX','T4C SALES ADJ')OR
  UPPER(NABS.BK_BATCH_SOURCE_NAME)='SERVICE RMA' ) AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 )AND(( EORCT.BATCH_SOURCE_ID,EORCT.GLOBAL_NAME) NOT IN (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
 FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
 WHERE EORBSA.NAME = 'CM-GLOBAL REBATE') )AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND(EBGA.ACCOUNT_CODE IS NOT NULL OR STOXRT.BATCH_ID = 2 )AND COALESCE(EL_TRX.ATTRIBUTE1,'N') <> 'Y' UNION ALL
 SELECT
 STOXRT.BATCH_ID,STOXRT.ACCOUNTING_RULE_ID,STOXRT.ACCOUNTING_RULE_NAME,STOXRT.ACCOUNT_CLASS,STOXRT.ACCOUNT_CODE,STOXRT.ACCTD_AMOUNT,STOXRT.ADJUSTMENT_ID,STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,STOXRT.AMOUNT,STOXRT.BILL_TO_CUSTOMER_ID,STOXRT.BILL_TO_SITE_USE_ID,STOXRT.CODE_COMBINATION_ID,STOXRT.COGS_PERCENT,STOXRT.COMMENTS,
 STOXRT.CONTEXT,STOXRT.CREATED_BY,STOXRT.CREATION_DATE,STOXRT.CUSTOMER_TRX_ID,STOXRT.CUSTOMER_TRX_LINE_ID,STOXRT.CUST_TRX_LINE_GL_DIST_ID,STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,STOXRT.EXTRACT_TYPE,STOXRT.FISCAL_ID,STOXRT.FORWARD_REVERSE_FLAG,STOXRT.FUNC_CURRENCY_CODE,STOXRT.GES_UPDATE_DATE,STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,STOXRT.GL_POSTED_DATE,STOXRT.GROUPING_ID,STOXRT.INVENTORY_ITEM_ID,STOXRT.INVOICE_CURRENCY_CODE,STOXRT.INVOICE_PERCENT,STOXRT.INVOICING_RULE_ID,STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,STOXRT.LATEST_RECORD_FLAG,STOXRT.LINE_SEQ_ID,STOXRT.LINE_TYPE,STOXRT.LINK_TO_CUST_TRX_LINE_ID,STOXRT.ORDER_HEADER_ID,STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,STOXRT.ORG_ID,STOXRT.LINE_PERCENT,STOXRT.PREVIOUS_CUSTOMER_TRX_ID,STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,STOXRT.QUOTA_FLAG,STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,STOXRT.REBATE_PERCENTAGE_ID,STOXRT.REQUEST_ID,STOXRT.RULE_START_DATE,STOXRT.SALESREP_ID,STOXRT.SALES_CREDIT_TYPE_ID,STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,STOXRT.SOLD_TO_CUSTOMER_ID,STOXRT.SOURCE_TYPE,STOXRT.SPLIT_PERCENT,STOXRT.TERRITORY_ID,STOXRT.TRANSACTION_DATE,STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,STOXRT.TRANSACTION_SEQUENCE_ID,STOXRT.TRX_DATE,STOXRT.TRX_NAME,STOXRT.TRX_NUMBER,STOXRT.TRX_TYPE,STOXRT.UNIT_SELLING_PRICE,STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,STOXRT.ACTION_CODE,STOXRT.DV_TRANSACTION_KEY,STOXRT.DV_TRANSACTION_SOURCE_CD,STOXRT.SALES_REP_NUMBER,STOXRT.SALES_TERRITORY_KEY           
 ,STOXRT.BK_SALES_CREDIT_TYPE_CODE   ,STOXRT.SK_SC_AGENT_ID_INT,STOXRT.SOURCE_DATA_KEY5,STOXRT.SALES_MOTION_CD,
STOXRT.RU_SERVICE_CONTRACT_START_DTM,STOXRT.RU_SERVICE_CONTRACT_END_DTM,STOXRT.DV_CONTRACT_DURATION,
STOXRT.DV_ANNUALIZED_FLG,STOXRT.DV_ANNUALIZED_US_NET_AMT,STOXRT.DV_MULTIYEAR_US_NET_AMT,STOXRT.BOOKINGS_POLICY_CD
 FROM
 $$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT
 ON (EORCT.CUSTOMER_TRX_ID =  STOXRT.CUSTOMER_TRX_ID AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
 LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
 WHERE STOXRT.EXTRACT_TYPE = 'AR_ADJUSTMENT' AND  STOXRT.GLOBAL_NAME ='CG'
 AND (EORCT.BATCH_SOURCE_ID, EORCT.GLOBAL_NAME) NOT  IN (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
 FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA WHERE EORBSA.NAME =  'CM-GLOBAL REBATE')
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND( EBGA.ACCOUNT_CODE IS NOT NULL OR STOXRT.BATCH_ID = 2) UNION ALL
 SELECT
 STOXRT.BATCH_ID,STOXRT.ACCOUNTING_RULE_ID,STOXRT.ACCOUNTING_RULE_NAME,STOXRT.ACCOUNT_CLASS,STOXRT.ACCOUNT_CODE,STOXRT.ACCTD_AMOUNT,STOXRT.ADJUSTMENT_ID,STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,STOXRT.AMOUNT,STOXRT.BILL_TO_CUSTOMER_ID,STOXRT.BILL_TO_SITE_USE_ID,STOXRT.CODE_COMBINATION_ID,STOXRT.COGS_PERCENT,STOXRT.COMMENTS,
 STOXRT.CONTEXT,STOXRT.CREATED_BY,STOXRT.CREATION_DATE,STOXRT.CUSTOMER_TRX_ID,STOXRT.CUSTOMER_TRX_LINE_ID,STOXRT.CUST_TRX_LINE_GL_DIST_ID,STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,STOXRT.EXTRACT_TYPE,STOXRT.FISCAL_ID,STOXRT.FORWARD_REVERSE_FLAG,STOXRT.FUNC_CURRENCY_CODE,STOXRT.GES_UPDATE_DATE,STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,STOXRT.GL_POSTED_DATE,STOXRT.GROUPING_ID,STOXRT.INVENTORY_ITEM_ID,STOXRT.INVOICE_CURRENCY_CODE,STOXRT.INVOICE_PERCENT,STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,STOXRT.LAST_UPDATE_DATE,STOXRT.LATEST_RECORD_FLAG,STOXRT.SK_LINE_SEQ_ID_INT AS LINE_SEQ_ID,STOXRT.LINE_TYPE,STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,STOXRT.ORDER_LINE_ID,STOXRT.ORDER_NUMBER,STOXRT.ORG_ID,STOXRT.LINE_PERCENT,STOXRT.PREVIOUS_CUSTOMER_TRX_ID,STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,STOXRT.REBATE_AMOUNT,STOXRT.REBATE_PERCENTAGE_ID,STOXRT.REQUEST_ID,STOXRT.RULE_START_DATE,STOXRT.SALESREP_ID,STOXRT.SALES_CREDIT_TYPE_ID,STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,STOXRT.SOLD_TO_CUSTOMER_ID,STOXRT.SCA_SOURCE_TYPE_CD AS SOURCE_TYPE,STOXRT.SPLIT_PERCENT,STOXRT.TERRITORY_ID,STOXRT.TRANSACTION_DATE,STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,STOXRT.TRANSACTION_SEQUENCE_ID,STOXRT.TRX_DATE,STOXRT.TRX_NAME,STOXRT.TRX_NUMBER,STOXRT.TRX_TYPE,STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,STOXRT.CREATE_DATETIME,STOXRT.ACTION_CODE,STOXRT.DV_TRANSACTION_KEY,STOXRT.DV_TRANSACTION_SOURCE_CD,STOXRT.SALES_REP_NUMBER,
 STOXRT.SALES_TERRITORY_KEY           ,STOXRT.BK_SALES_CREDIT_TYPE_CODE ,STOXRT.SK_SC_AGENT_ID_INT,STOXRT.SOURCE_DATA_KEY5,STOXRT.SALES_MOTION_CD,
 STOXRT.RU_SERVICE_CONTRACT_START_DTM,STOXRT.RU_SERVICE_CONTRACT_END_DTM,STOXRT.DV_CONTRACT_DURATION,STOXRT.DV_ANNUALIZED_FLG,STOXRT.DV_ANNUALIZED_US_NET_AMT,STOXRT.DV_MULTIYEAR_US_NET_AMT,STOXRT.BOOKINGS_POLICY_CD
 FROM
 $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG STOXRT
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
 INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL ON (EORCTL.CUSTOMER_TRX_LINE_ID = STOXRT.CUSTOMER_TRX_LINE_ID AND EORCTL.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
 LEFT JOIN  (SELECT SK_CUSTOMER_TRX_LINE_ID_LINT,RU_PARENT_AR_TRX_LINE_KEY,SS_CODE,OFFER_ATTRIBUTED_FLG , TRX_LINE_SRC_NAME FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE group by 1,2,3,4,5) NATIL ON  NATIL.SK_CUSTOMER_TRX_LINE_ID_LINT=STOXRT.CUSTOMER_TRX_LINE_ID 
 LEFT JOIN  (SELECT AR_TRX_LINE_KEY,PRODUCT_KEY FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE group by 1,2) NATIL_PAR ON   NATIL.RU_PARENT_AR_TRX_LINE_KEY=NATIL_PAR.AR_TRX_LINE_KEY 
 LEFT JOIN (SELECT ITEM_KEY,RU_BKG_SRC_CD FROM $$COMREFVWDB.N_PRODUCT group by 1,2) NP_PAR ON NATIL_PAR.PRODUCT_KEY=NP_PAR.ITEM_KEY  
 LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE) 
 INNER JOIN $$ETLVWDB.EL_RA_RULES SORR ON (SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID)
 INNER JOIN $$ETLVWDB.SM_AR_TRX  SMARTRX ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID AND  SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX ON (NARTRX.AR_TRX_KEY = SMARTRX.AR_TRX_KEY) INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
 ON     (NATT.BK_COMPANY_CODE = NARTRX.BK_COMPANY_CODE AND NATT.BK_SET_OF_BOOKS_KEY = NARTRX.BK_SET_OF_BOOKS_KEY
 AND NATT.BK_AR_TRX_TYPE_CODE = NARTRX.BK_AR_TRX_TYPE_CODE) INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT
 ON (EORCT.CUSTOMER_TRX_ID = NARTRX.SK_CUSTOMER_TRX_ID_LINT
 AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY EOUGC
 ON(NATT.BK_COMPANY_CODE = EOUGC.BK_COMPANY_CODE)/*PDUBASI ADDED AS PART OF SEP RELEASE NOTA_FISCAL CR*/
 INNER JOIN $$ETLVWDB.EL_AR_TRX_TYPE EL_TRX ON NATT.SK_CUST_TRX_TYPE_ID_INT = EL_TRX.CUST_TRX_TYPE_ID
 AND EL_TRX.ORG_ID = EOUGC.SK_ORGANIZATION_ID_INT AND NSSC.GLOBAL_NAME = EL_TRX.GLOBAL_NAME /*PDUBASI ADDED AS PART OF SEP RELEASE NOTA_FISCAL CR*/
 LEFT OUTER JOIN (sel SK_SALES_ORDER_HEADER_ID_INT,SS_CODE,SALES_ORDER_CATEGORY_TYPE from $$SLSORDVWDB.N_SALES_ORDER group by 1,2,3) NSO ON (STOXRT.ORDER_HEADER_ID = NSO.SK_SALES_ORDER_HEADER_ID_INT
 AND NSSC.SOURCE_SYSTEM_CODE = NSO.SS_CODE) /* rchettri: added as a part of Lot-2A CG1 implementation */
 LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL ON (STOXRT.ORDER_LINE_ID = NSOL.SK_SO_LINE_ID_INT
 AND NSSC.SOURCE_SYSTEM_CODE = NSOL.SS_CODE)LEFT OUTER JOIN $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT NSOL_NRT  /*Added as part of Q4FY16 FCM */
 ON(NSOL_NRT.SALES_ORDER_LINE_KEY= NSOL.SALES_ORDER_LINE_KEY AND NSOL_NRT.SS_CD = NSOL.SS_CODE )
 LEFT JOIN $$COMREFVWDB.N_PRODUCT NPT ON (NPT.SK_INVENTORY_ITEM_ID_INT = STOXRT.INVENTORY_ITEM_ID)
 LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME  /* START: ADDED AS PART OF AUS MIGRATION */
 ON EL_GNAME.ORG_ID = STOXRT.ORG_ID AND EL_GNAME.ACTIVE_IND = 'Y'
 LEFT OUTER JOIN (sel SK_SALES_ORDER_HEADER_ID_INT,SS_CODE,SALES_ORDER_CATEGORY_TYPE from $$SLSORDVWDB.N_SALES_ORDER group by 1,2,3) NSO_CAL 
 ON (STOXRT.ORDER_HEADER_ID = NSO_CAL.SK_SALES_ORDER_HEADER_ID_INT
 AND EL_GNAME.ORIG_SS_CD = NSO_CAL.SS_CODE)
 LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL_CAL /* rchettri: added as a part of Lot-2A CG1 implementation */
 ON (STOXRT.ORDER_LINE_ID = NSOL_CAL.SK_SO_LINE_ID_INT
 AND EL_GNAME.ORIG_SS_CD = NSOL_CAL.SS_CODE) /* END: ADDED AS PART OF AUS MIGRATION */
 LEFT OUTER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS ON NARTRX.AR_BATCH_SOURCE_KEY = NABS.AR_BATCH_SOURCE_KEY WHERE NSSC.GLOBAL_NAME='CG'
 AND NATIL.SS_CODE='CG'AND(STOXRT.EXTRACT_TYPE = 'INV'
 OR (STOXRT.EXTRACT_TYPE ='REV'
 AND ( COALESCE(SORR.NAME,'Immediate') NOT LIKE '%VARIABLE%' AND UPPER(COALESCE(SORR.NAME,'Immediate')) NOT IN ('DAILY RATES') ) ) /* rchettri: added as a part of Lot-2A CG1 implementation */
 )AND 
 ((NATT.AR_TRX_TYPE_SHORT_CODE IN ('CM','DM','INV')   AND STOXRT.REQUEST_ID = -999)
 OR (NATT.AR_TRX_TYPE_SHORT_CODE = 'INV'  AND STOXRT.REQUEST_ID <> -999
 AND ((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY TNC'
 AND NATIL.TRX_LINE_SRC_NAME = 'ORDER ENTRY')) OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%'
 AND NATIL.TRX_LINE_SRC_NAME  NOT IN ('XAAS') ))AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Service Invoice'
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 AND (( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY TNC' AND NATIL.TRX_LINE_SRC_NAME='ORDER ENTRY'))
 OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%' AND NATIL.TRX_LINE_SRC_NAME NOT IN ('XAAS')))
 AND COALESCE(NSO.SALES_ORDER_CATEGORY_TYPE,NSO_CAL.SALES_ORDER_CATEGORY_TYPE)='RETURN'
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999     /* rchettri: added as a part of Lot-2A CG1 implementation */
 AND  (( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY TNC' AND NATIL.TRX_LINE_SRC_NAME='ORDER ENTRY'))
 OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%'
 AND NATIL.TRX_LINE_SRC_NAME NOT IN ('XAAS') )) /* AND UPPER(NSO.SALES_ORDER_CATEGORY_TYPE)='MIXED' */
 AND COALESCE(NSOL.SALES_ORDER_CATEGORY_TYPE,NSOL_CAL.SALES_ORDER_CATEGORY_TYPE)  = 'RETURN'
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
 ELSE 'UNK' END  <> 'TSL') OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999
 AND (( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
 OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY TNC'
  AND NATIL.TRX_LINE_SRC_NAME='ORDER ENTRY')) OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%'
 AND NATIL.TRX_LINE_SRC_NAME NOT IN ('XAAS') )) AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Product Credit Memo'
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'INV'  AND STOXRT.REQUEST_ID <> -999
 AND  COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'METRIX'
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
 AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN 
 ('SALES ADJUSTMENTS','DISPUTE','DCA TWO-TIER' ,'COOP TWO-TIER','ICMS-ADJ','DCA TWO TIER','COOP TWO TIER','ICMS-XAAS','ICMS-XAAS-CCE')
 OR UPPER(NABS.BK_BATCH_SOURCE_NAME) IN ('DISPUTE','ICMS-ADJ'/*,'ICMS-XAAS'*/)
 OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ICMS-XAAS%'/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/) )
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
 AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN ('ICMS-XAAS','ICMS-XAAS-CCE')/*ADDED AS PART OF CCE*//*OR UPPER(NABS.BK_BATCH_SOURCE_NAME) = ('ICMS-XAAS')*/
 OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE ('ICMS-XAAS%')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/)
 OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE ('ICMS-ADJ') AND NATIL.TRX_LINE_SRC_NAME IN ('XAAS' )) ) AND EORCTL.INTERFACE_LINE_ATTRIBUTE10 IN ('SPECIAL_DEBIT','SPECIAL_CREDIT','SPECIAL_INVOICE')
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999 /* Added FCM as part of Q4FY16*/
 AND((COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN ('ORDER ENTRY') OR (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN ('ORDER ENTRY TNC') AND NATIL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
 OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%' AND NATIL.TRX_LINE_SRC_NAME NOT IN ('XAAS')))
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
 ELSE 'UNK' END  = 'TSL' AND EORCTL.INTERFACE_LINE_ATTRIBUTE10 IN ('SPECIAL_DEBIT','SPECIAL_CREDIT','SPECIAL_INVOICE') )
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999
 AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) In ( 'TAXI','METRIX','T4C SALES ADJ')OR UPPER(NABS.BK_BATCH_SOURCE_NAME)='SERVICE RMA' )
 AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
 WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
 WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
 ELSE 'UNK' END  <> 'TSL')) /* Knarlapu: Adding SERVICE RMA to CARBT flow */ AND(
 ( EORCT.BATCH_SOURCE_ID,EORCT.GLOBAL_NAME) NOT IN (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
 FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA WHERE EORBSA.NAME = 'CM-GLOBAL REBATE'))AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND(EBGA.ACCOUNT_CODE IS NOT NULL OR STOXRT.BATCH_ID = 2) AND STOXRT.EXCEPTION_TYPE = 'RI'AND COALESCE(EL_TRX.ATTRIBUTE1,'N') <> 'Y'  /*PDUBASI ADDED AS PART OF SEP RELEASE NOTA_FISCAL CR*/
 UNION ALL
 SELECT
 STOXRT.BATCH_ID,STOXRT.ACCOUNTING_RULE_ID,STOXRT.ACCOUNTING_RULE_NAME,STOXRT.ACCOUNT_CLASS,STOXRT.ACCOUNT_CODE,STOXRT.ACCTD_AMOUNT,STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,STOXRT.ADJUSTMENT_TYPE,STOXRT.AMOUNT,STOXRT.BILL_TO_CUSTOMER_ID,STOXRT.BILL_TO_SITE_USE_ID,STOXRT.CODE_COMBINATION_ID,STOXRT.COGS_PERCENT,STOXRT.COMMENTS,
 STOXRT.CONTEXT,STOXRT.CREATED_BY,STOXRT.CREATION_DATE,STOXRT.CUSTOMER_TRX_ID,STOXRT.CUSTOMER_TRX_LINE_ID,STOXRT.CUST_TRX_LINE_GL_DIST_ID,STOXRT.DEFAULT_SC_FLAG,STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,STOXRT.FISCAL_ID,STOXRT.FORWARD_REVERSE_FLAG,STOXRT.FUNC_CURRENCY_CODE,STOXRT.GES_UPDATE_DATE,STOXRT.GLOBAL_NAME,STOXRT.GL_DATE,STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,STOXRT.INVENTORY_ITEM_ID,STOXRT.INVOICE_CURRENCY_CODE,STOXRT.INVOICE_PERCENT,STOXRT.INVOICING_RULE_ID,STOXRT.LAST_UPDATED_BY,STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,STOXRT.SK_LINE_SEQ_ID_INT AS LINE_SEQ_ID,STOXRT.LINE_TYPE,STOXRT.LINK_TO_CUST_TRX_LINE_ID,STOXRT.ORDER_HEADER_ID,STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,STOXRT.ORG_ID,STOXRT.LINE_PERCENT,STOXRT.PREVIOUS_CUSTOMER_TRX_ID,STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,STOXRT.QUOTA_FLAG,STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,STOXRT.REBATE_PERCENTAGE_ID,STOXRT.REQUEST_ID,STOXRT.RULE_START_DATE,STOXRT.SALESREP_ID,STOXRT.SALES_CREDIT_TYPE_ID,STOXRT.SHIP_TO_CUSTOMER_ID,STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,STOXRT.SCA_SOURCE_TYPE_CD AS SOURCE_TYPE,STOXRT.SPLIT_PERCENT,STOXRT.TERRITORY_ID,STOXRT.TRANSACTION_DATE,STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,STOXRT.TRANSACTION_SEQUENCE_ID,STOXRT.TRX_DATE,STOXRT.TRX_NAME,STOXRT.TRX_NUMBER,STOXRT.TRX_TYPE,STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,STOXRT.CREATE_DATETIME,STOXRT.ACTION_CODE,STOXRT.DV_TRANSACTION_KEY,STOXRT.DV_TRANSACTION_SOURCE_CD,STOXRT.SALES_REP_NUMBER,STOXRT.SALES_TERRITORY_KEY           ,
 STOXRT.BK_SALES_CREDIT_TYPE_CODE  ,STOXRT.SK_SC_AGENT_ID_INT,STOXRT.SOURCE_DATA_KEY5,STOXRT.SALES_MOTION_CD,
 STOXRT.RU_SERVICE_CONTRACT_START_DTM,STOXRT.RU_SERVICE_CONTRACT_END_DTM,STOXRT.DV_CONTRACT_DURATION,STOXRT.DV_ANNUALIZED_FLG,STOXRT.DV_ANNUALIZED_US_NET_AMT,STOXRT.DV_MULTIYEAR_US_NET_AMT,STOXRT.BOOKINGS_POLICY_CD
 FROM
 $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG STOXRT
 INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT ON (EORCT.CUSTOMER_TRX_ID =  STOXRT.CUSTOMER_TRX_ID AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
 LEFT OUTER JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
 WHERE STOXRT.EXTRACT_TYPE = 'AR_ADJUSTMENT' AND STOXRT.GLOBAL_NAME='CG'
 AND (EORCT.BATCH_SOURCE_ID, EORCT.GLOBAL_NAME) NOT  IN (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA WHERE EORBSA.NAME =  'CM-GLOBAL REBATE')
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND (EBGA.ACCOUNT_CODE IS NOT NULL OR STOXRT.BATCH_ID = 2)
 AND STOXRT.EXCEPTION_TYPE = 'RI'
 UNION ALL
 SELECT
 EXORT.BATCH_ID,EXORT.ACCOUNTING_RULE_ID,EXORT.ACCOUNTING_RULE_NAME,EXORT.ACCOUNT_CLASS,
 EXORT.ACCOUNT_CODE,EXORT.ACCTD_AMOUNT,EXORT.ADJUSTMENT_ID,EXORT.ADJUSTMENT_NUMBER,
 EXORT.ADJUSTMENT_TYPE,EXORT.AMOUNT,EXORT.BILL_TO_CUSTOMER_ID,EXORT.BILL_TO_SITE_USE_ID,
 EXORT.CODE_COMBINATION_ID,EXORT.COGS_PERCENT,EXORT.COMMENTS,EXORT.CONTEXT,
 EXORT.CREATED_BY,EXORT.CREATION_DATE,EXORT.CUSTOMER_TRX_ID,EXORT.CUSTOMER_TRX_LINE_ID,EXORT.CUST_TRX_LINE_GL_DIST_ID,EXORT.DEFAULT_SC_FLAG,EXORT.EXTENDED_AMOUNT,EXORT.EXTRACT_TYPE,EXORT.FISCAL_ID,EXORT.FORWARD_REVERSE_FLAG,EXORT.FUNC_CURRENCY_CODE,EXORT.GES_UPDATE_DATE,EXORT.GLOBAL_NAME,EXORT.GL_DATE,EXORT.GL_POSTED_DATE,EXORT.GROUPING_ID,EXORT.INVENTORY_ITEM_ID,EXORT.INVOICE_CURRENCY_CODE,EXORT.INVOICE_PERCENT,EXORT.INVOICING_RULE_ID,EXORT.LAST_UPDATED_BY,EXORT.LAST_UPDATE_DATE,EXORT.LATEST_RECORD_FLAG,EXORT.SK_LINE_SEQ_ID_INT,EXORT.LINE_TYPE,EXORT.LINK_TO_CUST_TRX_LINE_ID,EXORT.ORDER_HEADER_ID,EXORT.ORDER_LINE_ID,EXORT.ORDER_NUMBER,EXORT.ORG_ID,EXORT.LINE_PERCENT,EXORT.PREVIOUS_CUSTOMER_TRX_ID,EXORT.PREVIOUS_CUSTOMER_TRX_LINE_ID, EXORT.QUOTA_FLAG,EXORT.REASON_CODE,EXORT.REBATE_AMOUNT,EXORT.REBATE_PERCENTAGE_ID,EXORT.REQUEST_ID,EXORT.RULE_START_DATE,EXORT.SALESREP_ID,EXORT.SALES_CREDIT_TYPE_ID,EXORT.SHIP_TO_CUSTOMER_ID,EXORT.SHIP_TO_SITE_USE_ID,EXORT.SOLD_TO_CUSTOMER_ID,EXORT.SCA_SOURCE_TYPE_CD,EXORT.SPLIT_PERCENT,EXORT.TERRITORY_ID,EXORT.TRANSACTION_DATE,EXORT.TRANSACTION_GROUPING_TYPE,EXORT.TRANSACTION_QUANTITY,EXORT.TRANSACTION_SEQUENCE_ID,EXORT.TRX_DATE,EXORT.TRX_NAME,EXORT.TRX_NUMBER,EXORT.TRX_TYPE,EXORT.UNIT_SELLING_PRICE,EXORT.UNIT_STANDARD_PRICE,EXORT.CREATE_DATETIME,EXORT.ACTION_CODE,EXORT.DV_TRANSACTION_KEY,EXORT.DV_TRANSACTION_SOURCE_CD,EXORT.SALES_REP_NUMBER,EXORT.SALES_TERRITORY_KEY,EXORT.BK_SALES_CREDIT_TYPE_CODE,EXORT.SK_SC_AGENT_ID_INT,EXORT.SOURCE_DATA_KEY5,EXORT.SALES_MOTION_CD,
 EXORT.RU_SERVICE_CONTRACT_START_DTM,EXORT.RU_SERVICE_CONTRACT_END_DTM,EXORT.DV_CONTRACT_DURATION,
EXORT.DV_ANNUALIZED_FLG,EXORT.DV_ANNUALIZED_US_NET_AMT,EXORT.DV_MULTIYEAR_US_NET_AMT,EXORT.BOOKINGS_POLICY_CD
 FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG EXORT WHERE EXORT.GLOBAL_NAME='CG'


Post SQL : 



Target13 Name : WI_OM_XXNCR_REV_CG_2


Pre SQL : 



Post SQL : 



Source14 Name : SQ_WI_OM_XXNCR_REVENUE_TRX_P_2_CDC


Pre SQL : 



SQL Query : 
SELECT 
   STOXRT.BATCH_ID,
   STOXRT.ACCOUNTING_RULE_ID,
   STOXRT.ACCOUNTING_RULE_NAME,
   STOXRT.ACCOUNT_CLASS,
   STOXRT.ACCOUNT_CODE,
   STOXRT.ACCTD_AMOUNT,
   STOXRT.ADJUSTMENT_ID,
   STOXRT.ADJUSTMENT_NUMBER,
   STOXRT.ADJUSTMENT_TYPE,
   STOXRT.AMOUNT,
   STOXRT.BILL_TO_CUSTOMER_ID,
   STOXRT.BILL_TO_SITE_USE_ID,
   STOXRT.CODE_COMBINATION_ID,
   STOXRT.COGS_PERCENT,
   STOXRT.COMMENTS,
   STOXRT.CONTEXT,
   STOXRT.CREATED_BY,
   STOXRT.CREATION_DATE,
   STOXRT.CUSTOMER_TRX_ID,
   STOXRT.CUSTOMER_TRX_LINE_ID,
   STOXRT.CUST_TRX_LINE_GL_DIST_ID,
   STOXRT.DEFAULT_SC_FLAG,
   STOXRT.EXTENDED_AMOUNT,
   STOXRT.EXTRACT_TYPE,
   STOXRT.FISCAL_ID,
   STOXRT.FORWARD_REVERSE_FLAG,
   STOXRT.FUNC_CURRENCY_CODE,
   STOXRT.GES_UPDATE_DATE,
   STOXRT.GLOBAL_NAME,
   STOXRT.GL_DATE,
   STOXRT.GL_POSTED_DATE,
   STOXRT.GROUPING_ID,
   STOXRT.INVENTORY_ITEM_ID,
   STOXRT.INVOICE_CURRENCY_CODE,
   STOXRT.INVOICE_PERCENT,
   STOXRT.INVOICING_RULE_ID,
   STOXRT.LAST_UPDATED_BY,
   STOXRT.LAST_UPDATE_DATE,
   STOXRT.LATEST_RECORD_FLAG,
   STOXRT.LINE_SEQ_ID,
   STOXRT.LINE_TYPE,
   STOXRT.LINK_TO_CUST_TRX_LINE_ID,
   STOXRT.ORDER_HEADER_ID,
   STOXRT.ORDER_LINE_ID,
   STOXRT.ORDER_NUMBER,
   STOXRT.ORG_ID,
   STOXRT.LINE_PERCENT,
   STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
   STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
   STOXRT.QUOTA_FLAG,
   STOXRT.REASON_CODE,
   STOXRT.REBATE_AMOUNT,
   STOXRT.REBATE_PERCENTAGE_ID,
   STOXRT.REQUEST_ID,
   STOXRT.RULE_START_DATE,
   STOXRT.SALESREP_ID,
   STOXRT.SALES_CREDIT_TYPE_ID,
   STOXRT.SHIP_TO_CUSTOMER_ID,
   STOXRT.SHIP_TO_SITE_USE_ID,
   STOXRT.SOLD_TO_CUSTOMER_ID,
   STOXRT.SOURCE_TYPE,
   STOXRT.SPLIT_PERCENT,
   STOXRT.TERRITORY_ID,
   STOXRT.TRANSACTION_DATE,
   STOXRT.TRANSACTION_GROUPING_TYPE,
   STOXRT.TRANSACTION_QUANTITY,
   STOXRT.TRANSACTION_SEQUENCE_ID,
   STOXRT.TRX_DATE,
   STOXRT.TRX_NAME,
   STOXRT.TRX_NUMBER,
   STOXRT.TRX_TYPE,
   STOXRT.UNIT_SELLING_PRICE,
   STOXRT.UNIT_STANDARD_PRICE,
   STOXRT.CREATE_DATETIME,
   STOXRT.ACTION_CODE,
   STOXRT.DV_TRANSACTION_KEY,
   STOXRT.DV_TRANSACTION_SOURCE_CD,
   STOXRT.SALES_REP_NUMBER              ,
   STOXRT.SALES_TERRITORY_KEY           ,
   STOXRT.BK_SALES_CREDIT_TYPE_CODE ,
   STOXRT.SK_SC_AGENT_ID_INT, 
STOXRT.SOURCE_DATA_KEY5,
STOXRT.SALES_MOTION_CD
FROM 
$$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT 
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL  
ON (EORCTL.CUSTOMER_TRX_LINE_ID = STOXRT.CUSTOMER_TRX_LINE_ID
AND EORCTL.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
LEFT JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL 
ON  NATIL.SK_CUSTOMER_TRX_LINE_ID_LINT=STOXRT.CUSTOMER_TRX_LINE_ID 
LEFT JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL_PAR
ON   NATIL.RU_PARENT_AR_TRX_LINE_KEY=NATIL_PAR.AR_TRX_LINE_KEY
LEFT JOIN $$COMREFVWDB.N_PRODUCT NP_PAR
ON NATIL_PAR.PRODUCT_KEY=NP_PAR.ITEM_KEY  
LEFT OUTER JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE) 
INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
ON (SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME
AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID)
INNER JOIN $$ETLVWDB.SM_AR_TRX  SMARTRX
ON (  SMARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
AND  SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE)
INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX   
ON  ( NARTRX.AR_TRX_KEY = SMARTRX.AR_TRX_KEY)
INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT    
ON     (NATT.BK_COMPANY_CODE = NARTRX.BK_COMPANY_CODE 
AND NATT.BK_SET_OF_BOOKS_KEY = NARTRX.BK_SET_OF_BOOKS_KEY 
AND NATT.BK_AR_TRX_TYPE_CODE = NARTRX.BK_AR_TRX_TYPE_CODE)
INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY EOUGC
ON(NATT.BK_COMPANY_CODE = EOUGC.BK_COMPANY_CODE) 
INNER JOIN $$ETLVWDB.EL_AR_TRX_TYPE EL_TRX
ON NATT.SK_CUST_TRX_TYPE_ID_INT = EL_TRX.CUST_TRX_TYPE_ID
AND EL_TRX.ORG_ID = EOUGC.SK_ORGANIZATION_ID_INT 
AND NSSC.GLOBAL_NAME = EL_TRX.GLOBAL_NAME
INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT  
ON (EORCT.CUSTOMER_TRX_ID = NARTRX.SK_CUSTOMER_TRX_ID_LINT
AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO   
ON (STOXRT.ORDER_HEADER_ID = NSO.SK_SALES_ORDER_HEADER_ID_INT
AND NSSC.SOURCE_SYSTEM_CODE = NSO.SS_CODE) 
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL  
ON (STOXRT.ORDER_LINE_ID = NSOL.SK_SO_LINE_ID_INT             
AND NSSC.SOURCE_SYSTEM_CODE = NSOL.SS_CODE)
LEFT OUTER JOIN $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT NSOL_NRT
ON(NSOL_NRT.SALES_ORDER_LINE_KEY= NSOL.SALES_ORDER_LINE_KEY
AND NSOL_NRT.SS_CD = NSOL.SS_CODE ) 
LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME 
ON EL_GNAME.ORG_ID = STOXRT.ORG_ID
AND EL_GNAME.ACTIVE_IND = 'Y'       
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO_CAL   
ON (STOXRT.ORDER_HEADER_ID = NSO_CAL.SK_SALES_ORDER_HEADER_ID_INT
AND EL_GNAME.ORIG_SS_CD = NSO_CAL.SS_CODE)  
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL_CAL   
ON (STOXRT.ORDER_LINE_ID = NSOL_CAL.SK_SO_LINE_ID_INT             
AND EL_GNAME.ORIG_SS_CD = NSOL_CAL.SS_CODE)   
LEFT OUTER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS 
ON NARTRX.AR_BATCH_SOURCE_KEY = NABS.AR_BATCH_SOURCE_KEY
INNER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
ON (STOXRT.INVENTORY_ITEM_ID = ELMTL.INVENTORY_ITEM_ID
 AND STOXRT.GLOBAL_NAME=ELMTL.GLOBAL_NAME)                
INNER JOIN  $$COMREFVWDB.N_PRODUCT NPT
ON (NPT.BK_PRODUCT_ID = ELMTL.SEGMENT1 ) 
WHERE NSSC.GLOBAL_NAME='CDC'
AND NATIL.SS_CODE='CDC'
AND (
    STOXRT.EXTRACT_TYPE = 'INV'
    OR ( STOXRT.EXTRACT_TYPE ='REV'
      AND (  COALESCE(SORR.NAME,'Immediate') NOT LIKE '%VARIABLE%' 
        AND UPPER(COALESCE(SORR.NAME,'Immediate')) NOT IN ('DAILY RATES') 
       ) 
     )
   )
    AND (
       (NATT.AR_TRX_TYPE_SHORT_CODE IN ('CM','DM','INV')  AND STOXRT.REQUEST_ID = -999) 
      
      OR (NATT.AR_TRX_TYPE_SHORT_CODE = 'INV'  AND STOXRT.REQUEST_ID <> -999 
      AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY'
        OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
       )
      AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Service Invoice'
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
   ) 
      OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 
      AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
        OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
       )
      AND COALESCE(NSO.SALES_ORDER_CATEGORY_TYPE,NSO_CAL.SALES_ORDER_CATEGORY_TYPE) ='RETURN'
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
   ) 
      OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 /* rchettri: added as a part of Lot-2A CG1 implementation */  
       AND  (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
        OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
       )
       AND COALESCE(NSOL.sales_order_category_type,NSOL_CAL.sales_order_category_type) = 'RETURN' /* AND UPPER(NSO.SALES_ORDER_CATEGORY_TYPE)='MIXED'*/
    AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
    WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
    WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
    )   
       
      OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 
      AND ( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
        OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
       )
      AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Product Credit Memo'
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
   WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
    WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
   ) 
       
      OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'INV'  AND STOXRT.REQUEST_ID <> -999
       AND  COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'METRIX'
    AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
    )
      OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
      AND  (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN ('SALES ADJUSTMENTS','DISPUTE','DCA TWO-TIER' ,'COOP TWO-TIER','ICMS-ADJ','DCA TWO TIER','COOP TWO TIER')
        OR UPPER(NABS.BK_BATCH_SOURCE_NAME) IN  ('DISPUTE','ICMS-ADJ')
       )
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL' 
       ) 
  OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
      AND  (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) ='ICMS-XAAS' 
        /*OR UPPER(NABS.BK_BATCH_SOURCE_NAME) = 'ICMS-XAAS'*/
		OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ICMS-XAAS%'/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/)
       ) AND EORCTL.INTERFACE_LINE_ATTRIBUTE10 IN ('SPECIAL_DEBIT','SPECIAL_CREDIT','SPECIAL_INVOICE') 
      AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
    )
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
     AND( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
        OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
        )
  AND
   CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  = 'TSL'
     AND EORCTL.INTERFACE_LINE_ATTRIBUTE10 IN ('SPECIAL_DEBIT','SPECIAL_CREDIT','SPECIAL_INVOICE') 
      )
      OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999
      
    AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) In ( 'TAXI','METRIX','T4C SALES ADJ')OR UPPER(NABS.BK_BATCH_SOURCE_NAME)='SERVICE RMA' )
      AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
       ) 
     )
    AND
   ( 
   ( EORCT.BATCH_SOURCE_ID,EORCT.GLOBAL_NAME) NOT IN 
    (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
    FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
    WHERE EORBSA.NAME = 'CM-GLOBAL REBATE')
   ) 
    AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
   AND 
   (
    EBGA.ACCOUNT_CODE IS NOT NULL   
    OR STOXRT.BATCH_ID = 2
   )
   AND COALESCE(EL_TRX.ATTRIBUTE1,'N') <> 'Y' 
   UNION ALL
   SELECT 
   STOXRT.BATCH_ID,
   STOXRT.ACCOUNTING_RULE_ID,
   STOXRT.ACCOUNTING_RULE_NAME,
   STOXRT.ACCOUNT_CLASS,
   STOXRT.ACCOUNT_CODE,
   STOXRT.ACCTD_AMOUNT,
   STOXRT.ADJUSTMENT_ID,
   STOXRT.ADJUSTMENT_NUMBER,
   STOXRT.ADJUSTMENT_TYPE,
   STOXRT.AMOUNT,
   STOXRT.BILL_TO_CUSTOMER_ID,
   STOXRT.BILL_TO_SITE_USE_ID,
   STOXRT.CODE_COMBINATION_ID,
   STOXRT.COGS_PERCENT,
   STOXRT.COMMENTS,
   STOXRT.CONTEXT,
   STOXRT.CREATED_BY,
   STOXRT.CREATION_DATE,
   STOXRT.CUSTOMER_TRX_ID,
   STOXRT.CUSTOMER_TRX_LINE_ID,
   STOXRT.CUST_TRX_LINE_GL_DIST_ID,
   STOXRT.DEFAULT_SC_FLAG,
   STOXRT.EXTENDED_AMOUNT,
   STOXRT.EXTRACT_TYPE,
   STOXRT.FISCAL_ID,
   STOXRT.FORWARD_REVERSE_FLAG,
   STOXRT.FUNC_CURRENCY_CODE,
   STOXRT.GES_UPDATE_DATE,
   STOXRT.GLOBAL_NAME,
   STOXRT.GL_DATE,
   STOXRT.GL_POSTED_DATE,
   STOXRT.GROUPING_ID,
   STOXRT.INVENTORY_ITEM_ID,
   STOXRT.INVOICE_CURRENCY_CODE,
   STOXRT.INVOICE_PERCENT,
   STOXRT.INVOICING_RULE_ID,
   STOXRT.LAST_UPDATED_BY,
   STOXRT.LAST_UPDATE_DATE,
   STOXRT.LATEST_RECORD_FLAG,
   STOXRT.LINE_SEQ_ID,
   STOXRT.LINE_TYPE,
   STOXRT.LINK_TO_CUST_TRX_LINE_ID,
   STOXRT.ORDER_HEADER_ID,
   STOXRT.ORDER_LINE_ID,
   STOXRT.ORDER_NUMBER,
   STOXRT.ORG_ID,
   STOXRT.LINE_PERCENT,
   STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
   STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
   STOXRT.QUOTA_FLAG,
   STOXRT.REASON_CODE,
   STOXRT.REBATE_AMOUNT,
   STOXRT.REBATE_PERCENTAGE_ID,
   STOXRT.REQUEST_ID,
   STOXRT.RULE_START_DATE,
   STOXRT.SALESREP_ID,
   STOXRT.SALES_CREDIT_TYPE_ID,
   STOXRT.SHIP_TO_CUSTOMER_ID,
   STOXRT.SHIP_TO_SITE_USE_ID,
   STOXRT.SOLD_TO_CUSTOMER_ID,
   STOXRT.SOURCE_TYPE,
   STOXRT.SPLIT_PERCENT,
   STOXRT.TERRITORY_ID,
   STOXRT.TRANSACTION_DATE,
   STOXRT.TRANSACTION_GROUPING_TYPE,
   STOXRT.TRANSACTION_QUANTITY,
   STOXRT.TRANSACTION_SEQUENCE_ID,
   STOXRT.TRX_DATE,
   STOXRT.TRX_NAME,
   STOXRT.TRX_NUMBER,
   STOXRT.TRX_TYPE,
   STOXRT.UNIT_SELLING_PRICE,
   STOXRT.UNIT_STANDARD_PRICE,
   STOXRT.CREATE_DATETIME,
   STOXRT.ACTION_CODE,
   STOXRT.DV_TRANSACTION_KEY,
   STOXRT.DV_TRANSACTION_SOURCE_CD,
   STOXRT.SALES_REP_NUMBER              ,
   STOXRT.SALES_TERRITORY_KEY           ,
   STOXRT.BK_SALES_CREDIT_TYPE_CODE   ,
   STOXRT.SK_SC_AGENT_ID_INT, 
STOXRT.SOURCE_DATA_KEY5,
STOXRT.SALES_MOTION_CD
   FROM 
    $$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT 
   INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT 
    ON (EORCT.CUSTOMER_TRX_ID =  STOXRT.CUSTOMER_TRX_ID
    AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
   LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
    ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
   WHERE STOXRT.EXTRACT_TYPE = 'AR_ADJUSTMENT' 
   AND  STOXRT.GLOBAL_NAME='CDC'
   AND (EORCT.BATCH_SOURCE_ID, EORCT.GLOBAL_NAME) NOT  IN (
     SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
     FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
     WHERE EORBSA.NAME =  'CM-GLOBAL REBATE')   
    AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
   AND 
   (
    EBGA.ACCOUNT_CODE IS NOT NULL   
    OR STOXRT.BATCH_ID = 2
   ) 
  UNION ALL 
   SELECT 
   STOXRT.BATCH_ID,
   STOXRT.ACCOUNTING_RULE_ID,
   STOXRT.ACCOUNTING_RULE_NAME,
   STOXRT.ACCOUNT_CLASS,
   STOXRT.ACCOUNT_CODE,
   STOXRT.ACCTD_AMOUNT,
   STOXRT.ADJUSTMENT_ID,
   STOXRT.ADJUSTMENT_NUMBER,
   STOXRT.ADJUSTMENT_TYPE,
   STOXRT.AMOUNT,
   STOXRT.BILL_TO_CUSTOMER_ID,
   STOXRT.BILL_TO_SITE_USE_ID,
   STOXRT.CODE_COMBINATION_ID,
   STOXRT.COGS_PERCENT,
   STOXRT.COMMENTS,
   STOXRT.CONTEXT,
   STOXRT.CREATED_BY,
   STOXRT.CREATION_DATE,
   STOXRT.CUSTOMER_TRX_ID,
   STOXRT.CUSTOMER_TRX_LINE_ID,
   STOXRT.CUST_TRX_LINE_GL_DIST_ID,
   STOXRT.DEFAULT_SC_FLAG,
   STOXRT.EXTENDED_AMOUNT,
   STOXRT.EXTRACT_TYPE,
   STOXRT.FISCAL_ID,
   STOXRT.FORWARD_REVERSE_FLAG,
   STOXRT.FUNC_CURRENCY_CODE,
   STOXRT.GES_UPDATE_DATE,
   STOXRT.GLOBAL_NAME,
   STOXRT.GL_DATE,
   STOXRT.GL_POSTED_DATE,
   STOXRT.GROUPING_ID,
   STOXRT.INVENTORY_ITEM_ID,
   STOXRT.INVOICE_CURRENCY_CODE,
   STOXRT.INVOICE_PERCENT,
   STOXRT.INVOICING_RULE_ID,
   STOXRT.LAST_UPDATED_BY,
   STOXRT.LAST_UPDATE_DATE,
   STOXRT.LATEST_RECORD_FLAG,
   STOXRT.SK_LINE_SEQ_ID_INT AS LINE_SEQ_ID,
   STOXRT.LINE_TYPE,
   STOXRT.LINK_TO_CUST_TRX_LINE_ID,
   STOXRT.ORDER_HEADER_ID,
   STOXRT.ORDER_LINE_ID,
   STOXRT.ORDER_NUMBER,
   STOXRT.ORG_ID,
   STOXRT.LINE_PERCENT,
   STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
   STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
   STOXRT.QUOTA_FLAG,
   STOXRT.REASON_CODE,
   STOXRT.REBATE_AMOUNT,
   STOXRT.REBATE_PERCENTAGE_ID,
   STOXRT.REQUEST_ID,
   STOXRT.RULE_START_DATE,
   STOXRT.SALESREP_ID,
   STOXRT.SALES_CREDIT_TYPE_ID,
   STOXRT.SHIP_TO_CUSTOMER_ID,
   STOXRT.SHIP_TO_SITE_USE_ID,
   STOXRT.SOLD_TO_CUSTOMER_ID,
   STOXRT.SCA_SOURCE_TYPE_CD AS SOURCE_TYPE,
   STOXRT.SPLIT_PERCENT,
   STOXRT.TERRITORY_ID,
   STOXRT.TRANSACTION_DATE,
   STOXRT.TRANSACTION_GROUPING_TYPE,
   STOXRT.TRANSACTION_QUANTITY,
   STOXRT.TRANSACTION_SEQUENCE_ID,
   STOXRT.TRX_DATE,
   STOXRT.TRX_NAME,
   STOXRT.TRX_NUMBER,
   STOXRT.TRX_TYPE,
   STOXRT.UNIT_SELLING_PRICE,
   STOXRT.UNIT_STANDARD_PRICE,
   STOXRT.CREATE_DATETIME,
   STOXRT.ACTION_CODE,
   STOXRT.DV_TRANSACTION_KEY,
   STOXRT.DV_TRANSACTION_SOURCE_CD,
   STOXRT.SALES_REP_NUMBER              ,
   STOXRT.SALES_TERRITORY_KEY           ,
   STOXRT.BK_SALES_CREDIT_TYPE_CODE ,
   STOXRT.SK_SC_AGENT_ID_INT,
	STOXRT.SOURCE_DATA_KEY5,
	STOXRT.SALES_MOTION_CD
   FROM 
    $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG STOXRT
   INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
    ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
   INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL  
    ON (EORCTL.CUSTOMER_TRX_LINE_ID = STOXRT.CUSTOMER_TRX_LINE_ID
    AND EORCTL.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
  LEFT JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL 
 ON  NATIL.SK_CUSTOMER_TRX_LINE_ID_LINT=STOXRT.CUSTOMER_TRX_LINE_ID
  LEFT JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL_PAR
 ON   NATIL.RU_PARENT_AR_TRX_LINE_KEY=NATIL_PAR.AR_TRX_LINE_KEY
  LEFT JOIN $$COMREFVWDB.N_PRODUCT NP_PAR
 ON NATIL_PAR.PRODUCT_KEY=NP_PAR.ITEM_KEY    
   LEFT OUTER  JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
    ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
   INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
    ON (SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME
    AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID)
   INNER JOIN $$ETLVWDB.SM_AR_TRX  SMARTRX
    ON (  SMARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
    AND  SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE)
   INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX   
    ON  ( NARTRX.AR_TRX_KEY = SMARTRX.AR_TRX_KEY)
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT    
    ON     (NATT.BK_COMPANY_CODE = NARTRX.BK_COMPANY_CODE 
    AND NATT.BK_SET_OF_BOOKS_KEY = NARTRX.BK_SET_OF_BOOKS_KEY 
    AND NATT.BK_AR_TRX_TYPE_CODE = NARTRX.BK_AR_TRX_TYPE_CODE)
   INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT  
    ON (EORCT.CUSTOMER_TRX_ID = NARTRX.SK_CUSTOMER_TRX_ID_LINT
    AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
   INNER JOIN $$ETLVWDB.EV_OP_UNIT_GAAP_COMPANY EOUGC
   ON(NATT.BK_COMPANY_CODE = EOUGC.BK_COMPANY_CODE)
   INNER JOIN $$ETLVWDB.EL_AR_TRX_TYPE EL_TRX
   ON NATT.SK_CUST_TRX_TYPE_ID_INT = EL_TRX.CUST_TRX_TYPE_ID
   AND EL_TRX.ORG_ID = EOUGC.SK_ORGANIZATION_ID_INT 
   AND NSSC.GLOBAL_NAME = EL_TRX.GLOBAL_NAME 
    
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO   
    ON (STOXRT.ORDER_HEADER_ID = NSO.SK_SALES_ORDER_HEADER_ID_INT
    AND NSSC.SOURCE_SYSTEM_CODE = NSO.SS_CODE) 
 
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL 
    ON (STOXRT.ORDER_LINE_ID = NSOL.SK_SO_LINE_ID_INT             
    AND NSSC.SOURCE_SYSTEM_CODE = NSOL.SS_CODE) 
   LEFT OUTER JOIN $$NRTNCRVWDB.N_SALES_ORDER_LINE_NRT NSOL_NRT 
    ON(NSOL_NRT.SALES_ORDER_LINE_KEY= NSOL.SALES_ORDER_LINE_KEY
    AND NSOL_NRT.SS_CD = NSOL.SS_CODE )  
   LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME  
   ON EL_GNAME.ORG_ID = STOXRT.ORG_ID
   AND EL_GNAME.ACTIVE_IND = 'Y'       
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSO_CAL   
    ON (STOXRT.ORDER_HEADER_ID = NSO_CAL.SK_SALES_ORDER_HEADER_ID_INT
    AND EL_GNAME.ORIG_SS_CD = NSO_CAL.SS_CODE) 
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE NSOL_CAL 
    ON (STOXRT.ORDER_LINE_ID = NSOL_CAL.SK_SO_LINE_ID_INT             
    AND EL_GNAME.ORIG_SS_CD = NSOL_CAL.SS_CODE) 
   LEFT OUTER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS 
    ON NARTRX.AR_BATCH_SOURCE_KEY = NABS.AR_BATCH_SOURCE_KEY 	
INNER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
	ON (STOXRT.INVENTORY_ITEM_ID = ELMTL.INVENTORY_ITEM_ID
	AND STOXRT.GLOBAL_NAME=ELMTL.GLOBAL_NAME)                
	INNER JOIN $$COMREFVWDB.N_PRODUCT NPT
	ON (NPT.BK_PRODUCT_ID = ELMTL.SEGMENT1 ) 
   WHERE NSSC.GLOBAL_NAME='CDC'
   AND NATIL.SS_CODE='CDC' 
   AND (
    STOXRT.EXTRACT_TYPE = 'INV'
    OR (STOXRT.EXTRACT_TYPE ='REV'
    AND ( COALESCE(SORR.NAME,'Immediate') NOT LIKE '%VARIABLE%' AND UPPER(COALESCE(SORR.NAME,'Immediate')) NOT IN ('DAILY RATES') ) )  
   )
    AND (
      (NATT.AR_TRX_TYPE_SHORT_CODE IN ('CM','DM','INV')   AND STOXRT.REQUEST_ID = -999) 
  OR (NATT.AR_TRX_TYPE_SHORT_CODE = 'INV'  AND STOXRT.REQUEST_ID <> -999 
      AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT)  = 'ORDER ENTRY'
       OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
      AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Service Invoice'
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL')
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 
      AND ( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
       OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%' )  
      AND COALESCE(NSO.SALES_ORDER_CATEGORY_TYPE,NSO_CAL.SALES_ORDER_CATEGORY_TYPE)='RETURN'
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999   
      AND  ( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
       OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%') 

      AND COALESCE(NSOL.SALES_ORDER_CATEGORY_TYPE,NSOL_CAL.SALES_ORDER_CATEGORY_TYPE)  = 'RETURN'
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999 
      AND ( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
       OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%') 
      AND EORCTL.INTERFACE_LINE_ATTRIBUTE14 = 'CB Product Credit Memo'
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL') 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'INV'  AND STOXRT.REQUEST_ID <> -999
      AND  COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'METRIX'
     AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
   )      
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
      AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) IN ('SALES ADJUSTMENTS','DISPUTE','DCA TWO-TIER' ,'COOP TWO-TIER','ICMS-ADJ','DCA TWO TIER','COOP TWO TIER','ICMS-XAAS')
       OR UPPER(NABS.BK_BATCH_SOURCE_NAME) IN ('DISPUTE','ICMS-ADJ'/*,'ICMS-XAAS'*/
	   )
	   OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ICMS-XAAS%'/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/))
      AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'  
    ) 
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999
      AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ICMS-XAAS'
       /*OR UPPER(NABS.BK_BATCH_SOURCE_NAME) = ('ICMS-XAAS')*/
	   OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE ('ICMS-XAAS%')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/) 
      ) AND EORCTL.INTERFACE_LINE_ATTRIBUTE10 IN ('SPECIAL_DEBIT','SPECIAL_CREDIT','SPECIAL_INVOICE') 
   AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
  )
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  IN ('DM' ,'CM','INV') AND STOXRT.REQUEST_ID <> -999 
     AND( COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) = 'ORDER ENTRY'
        OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE  'ORDER MANAGEMENT%'
        )    
  AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
      ELSE 'UNK' END  = 'TSL'
   AND EORCTL.INTERFACE_LINE_ATTRIBUTE10 IN ('SPECIAL_DEBIT','SPECIAL_CREDIT','SPECIAL_INVOICE') )   
 OR (NATT.AR_TRX_TYPE_SHORT_CODE  = 'CM' AND STOXRT.REQUEST_ID <> -999

  AND (COALESCE(EORCTL.INTERFACE_LINE_CONTEXT ,EORCT.INTERFACE_HEADER_CONTEXT) In ( 'TAXI','METRIX','T4C SALES ADJ')OR UPPER(NABS.BK_BATCH_SOURCE_NAME)='SERVICE RMA' )
      AND CASE WHEN NSOL_NRT.BOOKINGS_SOURCE_CD <> 'UNK' THEN NSOL_NRT.BOOKINGS_SOURCE_CD
      WHEN NATIL.OFFER_ATTRIBUTED_FLG='Y' THEN NP_PAR.RU_BKG_SRC_CD
   WHEN NPT.RU_BKG_SRC_CD <> 'UNK' THEN NPT.RU_BKG_SRC_CD
       ELSE 'UNK' END  <> 'TSL'
    ) 
    )
    AND
   ( 
   ( EORCT.BATCH_SOURCE_ID,EORCT.GLOBAL_NAME) NOT IN 
    (SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
    FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
    WHERE EORBSA.NAME = 'CM-GLOBAL REBATE')
   ) 
    AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
   AND 
   (
    EBGA.ACCOUNT_CODE IS NOT NULL   
    OR STOXRT.BATCH_ID = 2
   ) 
   AND STOXRT.EXCEPTION_TYPE = 'RI' 
   AND COALESCE(EL_TRX.ATTRIBUTE1,'N') <> 'Y'             
   UNION ALL
   SELECT 
   STOXRT.BATCH_ID,
   STOXRT.ACCOUNTING_RULE_ID,
   STOXRT.ACCOUNTING_RULE_NAME,
   STOXRT.ACCOUNT_CLASS,
   STOXRT.ACCOUNT_CODE,
   STOXRT.ACCTD_AMOUNT,
   STOXRT.ADJUSTMENT_ID,
   STOXRT.ADJUSTMENT_NUMBER,
   STOXRT.ADJUSTMENT_TYPE,
   STOXRT.AMOUNT,
   STOXRT.BILL_TO_CUSTOMER_ID,
   STOXRT.BILL_TO_SITE_USE_ID,
   STOXRT.CODE_COMBINATION_ID,
   STOXRT.COGS_PERCENT,
   STOXRT.COMMENTS,
   STOXRT.CONTEXT,
   STOXRT.CREATED_BY,
   STOXRT.CREATION_DATE,
   STOXRT.CUSTOMER_TRX_ID,
   STOXRT.CUSTOMER_TRX_LINE_ID,
   STOXRT.CUST_TRX_LINE_GL_DIST_ID,
   STOXRT.DEFAULT_SC_FLAG,
   STOXRT.EXTENDED_AMOUNT,
   STOXRT.EXTRACT_TYPE,
   STOXRT.FISCAL_ID,
   STOXRT.FORWARD_REVERSE_FLAG,
   STOXRT.FUNC_CURRENCY_CODE,
   STOXRT.GES_UPDATE_DATE,
   STOXRT.GLOBAL_NAME,
   STOXRT.GL_DATE,
   STOXRT.GL_POSTED_DATE,
   STOXRT.GROUPING_ID,
   STOXRT.INVENTORY_ITEM_ID,
   STOXRT.INVOICE_CURRENCY_CODE,
   STOXRT.INVOICE_PERCENT,
   STOXRT.INVOICING_RULE_ID,
   STOXRT.LAST_UPDATED_BY,
   STOXRT.LAST_UPDATE_DATE,
   STOXRT.LATEST_RECORD_FLAG,
   STOXRT.SK_LINE_SEQ_ID_INT AS LINE_SEQ_ID,
   STOXRT.LINE_TYPE,
   STOXRT.LINK_TO_CUST_TRX_LINE_ID,
   STOXRT.ORDER_HEADER_ID,
   STOXRT.ORDER_LINE_ID,
   STOXRT.ORDER_NUMBER,
   STOXRT.ORG_ID,
   STOXRT.LINE_PERCENT,
   STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
   STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
   STOXRT.QUOTA_FLAG,
   STOXRT.REASON_CODE,
   STOXRT.REBATE_AMOUNT,
   STOXRT.REBATE_PERCENTAGE_ID,
   STOXRT.REQUEST_ID,
   STOXRT.RULE_START_DATE,
   STOXRT.SALESREP_ID,
   STOXRT.SALES_CREDIT_TYPE_ID,
   STOXRT.SHIP_TO_CUSTOMER_ID,
   STOXRT.SHIP_TO_SITE_USE_ID,
   STOXRT.SOLD_TO_CUSTOMER_ID,
   STOXRT.SCA_SOURCE_TYPE_CD AS SOURCE_TYPE,
   STOXRT.SPLIT_PERCENT,
   STOXRT.TERRITORY_ID,
   STOXRT.TRANSACTION_DATE,
   STOXRT.TRANSACTION_GROUPING_TYPE,
   STOXRT.TRANSACTION_QUANTITY,
   STOXRT.TRANSACTION_SEQUENCE_ID,
   STOXRT.TRX_DATE,
   STOXRT.TRX_NAME,
   STOXRT.TRX_NUMBER,
   STOXRT.TRX_TYPE,
   STOXRT.UNIT_SELLING_PRICE,
   STOXRT.UNIT_STANDARD_PRICE,
   STOXRT.CREATE_DATETIME,
   STOXRT.ACTION_CODE,
   STOXRT.DV_TRANSACTION_KEY,
   STOXRT.DV_TRANSACTION_SOURCE_CD,
   STOXRT.SALES_REP_NUMBER              ,
   STOXRT.SALES_TERRITORY_KEY           ,
   STOXRT.BK_SALES_CREDIT_TYPE_CODE  ,
   STOXRT.SK_SC_AGENT_ID_INT,
    STOXRT.SOURCE_DATA_KEY5,
 STOXRT.SALES_MOTION_CD 
   FROM 
    $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG STOXRT
   INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT 
    ON (EORCT.CUSTOMER_TRX_ID =  STOXRT.CUSTOMER_TRX_ID
    AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME)
   LEFT OUTER JOIN $$ETLVWDB.EL_BOOKINGS_GL_ACCOUNTS EBGA
    ON (EBGA.ACCOUNT_CODE = STOXRT.ACCOUNT_CODE)
  WHERE STOXRT.EXTRACT_TYPE = 'AR_ADJUSTMENT' 
   AND  STOXRT.GLOBAL_NAME='CDC'
AND (EORCT.BATCH_SOURCE_ID, EORCT.GLOBAL_NAME) NOT  IN (
 SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
 FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
 WHERE EORBSA.NAME =  'CM-GLOBAL REBATE')   
AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
AND 
(
     EBGA.ACCOUNT_CODE IS NOT NULL   
     OR STOXRT.BATCH_ID = 2
    )
    AND STOXRT.EXCEPTION_TYPE = 'RI'
   UNION ALL
   SELECT 
   EXORT.BATCH_ID,
   EXORT.ACCOUNTING_RULE_ID,
   EXORT.ACCOUNTING_RULE_NAME,
   EXORT.ACCOUNT_CLASS,
   EXORT.ACCOUNT_CODE,
   EXORT.ACCTD_AMOUNT,
   EXORT.ADJUSTMENT_ID,
   EXORT.ADJUSTMENT_NUMBER,
   EXORT.ADJUSTMENT_TYPE,
   EXORT.AMOUNT,
   EXORT.BILL_TO_CUSTOMER_ID,
   EXORT.BILL_TO_SITE_USE_ID,
   EXORT.CODE_COMBINATION_ID,
   EXORT.COGS_PERCENT,
   EXORT.COMMENTS,
   EXORT.CONTEXT,
   EXORT.CREATED_BY,
   EXORT.CREATION_DATE,
   EXORT.CUSTOMER_TRX_ID,
   EXORT.CUSTOMER_TRX_LINE_ID,
   EXORT.CUST_TRX_LINE_GL_DIST_ID,
   EXORT.DEFAULT_SC_FLAG,
   EXORT.EXTENDED_AMOUNT,
   EXORT.EXTRACT_TYPE,
   EXORT.FISCAL_ID,
   EXORT.FORWARD_REVERSE_FLAG,
   EXORT.FUNC_CURRENCY_CODE,
   EXORT.GES_UPDATE_DATE,
   EXORT.GLOBAL_NAME,
   EXORT.GL_DATE,
   EXORT.GL_POSTED_DATE,
   EXORT.GROUPING_ID,
   EXORT.INVENTORY_ITEM_ID,
   EXORT.INVOICE_CURRENCY_CODE,
   EXORT.INVOICE_PERCENT,
   EXORT.INVOICING_RULE_ID,
   EXORT.LAST_UPDATED_BY,
   EXORT.LAST_UPDATE_DATE,
   EXORT.LATEST_RECORD_FLAG,
   EXORT.SK_LINE_SEQ_ID_INT,
   EXORT.LINE_TYPE,
   EXORT.LINK_TO_CUST_TRX_LINE_ID,
   EXORT.ORDER_HEADER_ID,
   EXORT.ORDER_LINE_ID,
   EXORT.ORDER_NUMBER,
   EXORT.ORG_ID,
   EXORT.LINE_PERCENT,
   EXORT.PREVIOUS_CUSTOMER_TRX_ID,
   EXORT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
   EXORT.QUOTA_FLAG,
   EXORT.REASON_CODE,
   EXORT.REBATE_AMOUNT,
   EXORT.REBATE_PERCENTAGE_ID,
   EXORT.REQUEST_ID,
   EXORT.RULE_START_DATE,
   EXORT.SALESREP_ID,
   EXORT.SALES_CREDIT_TYPE_ID,
   EXORT.SHIP_TO_CUSTOMER_ID,
   EXORT.SHIP_TO_SITE_USE_ID,
   EXORT.SOLD_TO_CUSTOMER_ID,
   EXORT.SCA_SOURCE_TYPE_CD,
   EXORT.SPLIT_PERCENT,
   EXORT.TERRITORY_ID,
   EXORT.TRANSACTION_DATE,
   EXORT.TRANSACTION_GROUPING_TYPE,
   EXORT.TRANSACTION_QUANTITY,
   EXORT.TRANSACTION_SEQUENCE_ID,
   EXORT.TRX_DATE,
   EXORT.TRX_NAME,
   EXORT.TRX_NUMBER,
   EXORT.TRX_TYPE,
   EXORT.UNIT_SELLING_PRICE,
   EXORT.UNIT_STANDARD_PRICE,
   EXORT.CREATE_DATETIME,
   EXORT.ACTION_CODE,
   EXORT.DV_TRANSACTION_KEY,
   EXORT.DV_TRANSACTION_SOURCE_CD,
   EXORT.SALES_REP_NUMBER              ,
   EXORT.SALES_TERRITORY_KEY           ,
   EXORT.BK_SALES_CREDIT_TYPE_CODE ,
   EXORT.SK_SC_AGENT_ID_INT, 
   EXORT.SOURCE_DATA_KEY5,
   EXORT.SALES_MOTION_CD
   FROM 
   $$EXCEPDB.EX_OM_XXNCR_REV_CG EXORT
   WHERE EXORT.GLOBAL_NAME='CDC'


Post SQL : 



Target14 Name : WI_OM_XXNCR_REV_CG_CDC


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_OM_XXNCR_REV_CG','D');


Source15 Name : SQ_WI_EX_WI_OM_XXNCR_REVENUE_TRX_P_3


Pre SQL : 



SQL Query : 
SELECT 
 STOXRT.BATCH_ID,
 STOXRT.ACCOUNTING_RULE_ID,
 STOXRT.ACCOUNTING_RULE_NAME,
 STOXRT.ACCOUNT_CLASS,
 STOXRT.ACCOUNT_CODE,
 STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,
 STOXRT.AMOUNT,
 STOXRT.BILL_TO_CUSTOMER_ID,
 STOXRT.BILL_TO_SITE_USE_ID,
 STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,
 STOXRT.COMMENTS,
 STOXRT.CONTEXT,
 STOXRT.CREATED_BY,
 STOXRT.CREATION_DATE,
 STOXRT.CUSTOMER_TRX_ID,
 STOXRT.CUSTOMER_TRX_LINE_ID,
 STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,
 STOXRT.FISCAL_ID,
 STOXRT.FORWARD_REVERSE_FLAG,
 STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,
 STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,
 STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,
 STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,
 STOXRT.INVOICE_PERCENT,
 STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,
 STOXRT.LINE_SEQ_ID,
 STOXRT.LINE_TYPE,
 STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,
 STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,
 STOXRT.LINE_PERCENT,
 STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,
 STOXRT.REBATE_PERCENTAGE_ID,
 STOXRT.REQUEST_ID,
 STOXRT.RULE_START_DATE,
 STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,
 STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,
 STOXRT.SOURCE_TYPE,
 STOXRT.SPLIT_PERCENT,
 STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,
 STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,
 STOXRT.TRANSACTION_SEQUENCE_ID,
 STOXRT.TRX_DATE,
 STOXRT.TRX_NAME,
 STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,
 STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,
 STOXRT.ACTION_CODE ,
 'RI' EXCEPTION_TYPE,
 STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD,
 STOXRT.SALES_REP_NUMBER              ,
 STOXRT.SALES_TERRITORY_KEY           ,
 STOXRT.BK_SALES_CREDIT_TYPE_CODE ,
 STOXRT.SK_SC_AGENT_ID_INT    ,
 STOXRT.SOURCE_DATA_KEY5,
STOXRT.SALES_MOTION_CD   ,
STOXRT.RU_SERVICE_CONTRACT_START_DTM ,
STOXRT.RU_SERVICE_CONTRACT_END_DTM   ,
STOXRT.DV_CONTRACT_DURATION          ,
STOXRT.DV_ANNUALIZED_FLG             ,
STOXRT.DV_ANNUALIZED_US_NET_AMT      ,
STOXRT.DV_MULTIYEAR_US_NET_AMT       ,
STOXRT.BOOKINGS_POLICY_CD
 FROM   
 $$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT 
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
  ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
 INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT  
  ON (EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
  AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
 WHERE STOXRT.EXTRACT_TYPE IN( 'INV','REV')
 AND 
 ( (EORCT.BATCH_SOURCE_ID,EORCT.GLOBAL_NAME) NOT IN  
   ( SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
   FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
   WHERE EORBSA.NAME = 'CM-GLOBAL REBATE')
 ) 
 AND 
 (
 STOXRT.FISCAL_ID >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 )
 AND  
 (
  NOT EXISTS 
    (
    SELECT 1 
   FROM $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL  
    WHERE EORCTL.CUSTOMER_TRX_LINE_ID = STOXRT.CUSTOMER_TRX_LINE_ID
    AND EORCTL.GLOBAL_NAME = STOXRT.GLOBAL_NAME
    )
 
  OR 
  NOT EXISTS 
    (
    SELECT 1 
   FROM $$ETLVWDB.EL_RA_RULES SORR
    WHERE 
    SORR.GLOBAL_NAME = STOXRT.GLOBAL_NAME
    AND SORR.RULE_ID = STOXRT.ACCOUNTING_RULE_ID
    )
  OR 
  NOT EXISTS 
    (
     SELECT 1 
   FROM $$ETLVWDB.SM_AR_TRX SMARTRX
    WHERE SMARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
    AND  SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
    )
  OR 
  NOT EXISTS 
    (
     SELECT 1 
   FROM $$FINLGLVWDB.N_AR_TRX NARTRX
     WHERE NARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
     AND  NARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
    )
 
  OR 
  NOT EXISTS 
    (
     SELECT 1 
   FROM $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT 
    WHERE  EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
     AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME
    )
  OR 
  NOT EXISTS 
    (
     SELECT 1 
   FROM $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT
     INNER JOIN $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
     ON ( EORBSA.BATCH_SOURCE_ID = EORCT.BATCH_SOURCE_ID
     AND EORBSA.GLOBAL_NAME = EORCT.GLOBAL_NAME )
     WHERE 
     EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
     AND  EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME
    )
  OR 
  NOT EXISTS 
    (
    SELECT 1 
   FROM  $$FINLGLVWDB.N_AR_TRX NARTRX
    INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT    
    ON (NATT.BK_COMPANY_CODE = NARTRX.BK_COMPANY_CODE 
    AND NATT.BK_SET_OF_BOOKS_KEY = NARTRX.BK_SET_OF_BOOKS_KEY 
    AND NATT.BK_AR_TRX_TYPE_CODE = NARTRX.BK_AR_TRX_TYPE_CODE)
    WHERE NARTRX.SK_CUSTOMER_TRX_ID_LINT = STOXRT.CUSTOMER_TRX_ID
    AND  NARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
    )
 )
 UNION
  ALL
 SELECT 
 STOXRT.BATCH_ID,
 STOXRT.ACCOUNTING_RULE_ID,
 STOXRT.ACCOUNTING_RULE_NAME,
 STOXRT.ACCOUNT_CLASS,
 STOXRT.ACCOUNT_CODE,
 STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,
 STOXRT.AMOUNT,
 STOXRT.BILL_TO_CUSTOMER_ID,
 STOXRT.BILL_TO_SITE_USE_ID,
 STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,
 STOXRT.COMMENTS,
 STOXRT.CONTEXT,
 STOXRT.CREATED_BY,
 STOXRT.CREATION_DATE,
 STOXRT.CUSTOMER_TRX_ID,
 STOXRT.CUSTOMER_TRX_LINE_ID,
 STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,
 STOXRT.FISCAL_ID,
 STOXRT.FORWARD_REVERSE_FLAG,
 STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,
 STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,
 STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,
 STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,
 STOXRT.INVOICE_PERCENT,
 STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,
 STOXRT.LINE_SEQ_ID,
 STOXRT.LINE_TYPE,
 STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,
 STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,
 STOXRT.LINE_PERCENT,
 STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,
 STOXRT.REBATE_PERCENTAGE_ID,
 STOXRT.REQUEST_ID,
 STOXRT.RULE_START_DATE,
 STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,
 STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,
 STOXRT.SOURCE_TYPE,
 STOXRT.SPLIT_PERCENT,
 STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,
 STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,
 STOXRT.TRANSACTION_SEQUENCE_ID,
 STOXRT.TRX_DATE,
 STOXRT.TRX_NAME,
 STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,
 STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,
 STOXRT.ACTION_CODE ,
 'RI' EXCEPTION_TYPE,
 STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD,
 STOXRT.SALES_REP_NUMBER              ,
 STOXRT.SALES_TERRITORY_KEY           ,
 STOXRT.BK_SALES_CREDIT_TYPE_CODE  ,
 STOXRT.SK_SC_AGENT_ID_INT,
 STOXRT.SOURCE_DATA_KEY5,
STOXRT.SALES_MOTION_CD,
STOXRT.RU_SERVICE_CONTRACT_START_DTM ,
STOXRT.RU_SERVICE_CONTRACT_END_DTM   ,
STOXRT.DV_CONTRACT_DURATION          ,
STOXRT.DV_ANNUALIZED_FLG             ,
STOXRT.DV_ANNUALIZED_US_NET_AMT      ,
STOXRT.DV_MULTIYEAR_US_NET_AMT       ,
STOXRT.BOOKINGS_POLICY_CD
 FROM 
 $$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT 
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
  ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
 INNER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT  
  ON (EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
  AND EORCT.GLOBAL_NAME = NSSC.GLOBAL_NAME)
 WHERE STOXRT.EXTRACT_TYPE = 'AR_ADJUSTMENT' 
 AND (EORCT.BATCH_SOURCE_ID, EORCT.GLOBAL_NAME) NOT  IN 
    (  SELECT DISTINCT EORBSA.BATCH_SOURCE_ID,EORBSA.GLOBAL_NAME
    FROM $$ETLVWDB.EL_OM_RA_BATCH_SOURCES_ALL EORBSA
    WHERE EORBSA.NAME =  'CM-GLOBAL REBATE')   
 AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND  
 (
  NOT EXISTS 
    (
     SELECT 1 
   FROM $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX EORCT 
    WHERE  EORCT.CUSTOMER_TRX_ID = STOXRT.CUSTOMER_TRX_ID
     AND EORCT.GLOBAL_NAME = STOXRT.GLOBAL_NAME
    )
 )
 
 /* RCHETTRI : COMMENTED CORP_ADJ FLOW IN CARBT 
 UNION ALL
 SELECT 
 STOXRT.BATCH_ID,
 STOXRT.ACCOUNTING_RULE_ID,
 STOXRT.ACCOUNTING_RULE_NAME,
 STOXRT.ACCOUNT_CLASS,
 STOXRT.ACCOUNT_CODE,
 STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,
 STOXRT.AMOUNT,
 STOXRT.BILL_TO_CUSTOMER_ID,
 STOXRT.BILL_TO_SITE_USE_ID,
 STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,
 STOXRT.COMMENTS,
 STOXRT.CONTEXT,
 STOXRT.CREATED_BY,
 STOXRT.CREATION_DATE,
 STOXRT.CUSTOMER_TRX_ID,
 STOXRT.CUSTOMER_TRX_LINE_ID,
 STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,
 STOXRT.FISCAL_ID,
 STOXRT.FORWARD_REVERSE_FLAG,
 STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,
 STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,
 STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,
 STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,
 STOXRT.INVOICE_PERCENT,
 STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,
 STOXRT.LINE_SEQ_ID,
 STOXRT.LINE_TYPE,
 STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,
 STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,
 STOXRT.LINE_PERCENT,
 STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,
 STOXRT.REBATE_PERCENTAGE_ID,
 STOXRT.REQUEST_ID,
 STOXRT.RULE_START_DATE,
 STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,
 STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,
 STOXRT.SOURCE_TYPE,
 STOXRT.SPLIT_PERCENT,
 STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,
 STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,
 STOXRT.TRANSACTION_SEQUENCE_ID,
 STOXRT.TRX_DATE,
 STOXRT.TRX_NAME,
 STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,
 STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,
 STOXRT.ACTION_CODE ,
 'RI' EXCEPTION_TYPE,
 STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD
 FROM 
 $$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT 
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
  ON ( NSSC.GLOBAL_NAME = STOXRT.GLOBAL_NAME) 
 INNER JOIN $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
  ON ( EOCRATA.REV_ADJ_TRX_ID = STOXRT.ADJUSTMENT_ID 
  AND EOCRATA.GLOBAL_NAME = STOXRT.GLOBAL_NAME ) 
 INNER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA  
  ON ( EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID)
 WHERE
  EOCATA.ADJ_TYPE_NAME = 'IBM REBATE' 
  AND STOXRT.EXTRACT_TYPE = 'CORP_ADJ'
  AND STOXRT.FISCAL_ID  >= (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND
 (
  NOT EXISTS 
  (
   SELECT 1 FROM $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
   WHERE EOCRATA.REV_ADJ_TRX_ID = STOXRT.ADJUSTMENT_ID 
   AND EOCRATA.GLOBAL_NAME = STOXRT.GLOBAL_NAME
  )
 OR 
  NOT EXISTS 
  ( 
  SELECT 1 FROM $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
  INNER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA  
  ON ( EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID)
   WHERE EOCRATA.REV_ADJ_TRX_ID = STOXRT.ADJUSTMENT_ID 
   AND EOCRATA.GLOBAL_NAME = STOXRT.GLOBAL_NAME
  )
 )
 */ 
 /*
 Rchettri: Load Future Records with no RI failure in Post Sql 
 UNION  ALL
 SELECT 
 STOXRT.BATCH_ID,
 STOXRT.ACCOUNTING_RULE_ID,
 STOXRT.ACCOUNTING_RULE_NAME,
 STOXRT.ACCOUNT_CLASS,
 STOXRT.ACCOUNT_CODE,
 STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,
 STOXRT.AMOUNT,
 STOXRT.BILL_TO_CUSTOMER_ID,
 STOXRT.BILL_TO_SITE_USE_ID,
 STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,
 STOXRT.COMMENTS,
 STOXRT.CONTEXT,
 STOXRT.CREATED_BY,
 STOXRT.CREATION_DATE,
 STOXRT.CUSTOMER_TRX_ID,
 STOXRT.CUSTOMER_TRX_LINE_ID,
 STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,
 STOXRT.FISCAL_ID,
 STOXRT.FORWARD_REVERSE_FLAG,
 STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,
 STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,
 STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,
 STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,
 STOXRT.INVOICE_PERCENT,
 STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,
 STOXRT.LINE_SEQ_ID,
 STOXRT.LINE_TYPE,
 STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,
 STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,
 STOXRT.LINE_PERCENT,
 STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,
 STOXRT.REBATE_PERCENTAGE_ID,
 STOXRT.REQUEST_ID,
 STOXRT.RULE_START_DATE,
 STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,
 STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,
 STOXRT.SOURCE_TYPE,
 STOXRT.SPLIT_PERCENT,
 STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,
 STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,
 STOXRT.TRANSACTION_SEQUENCE_ID,
 STOXRT.TRX_DATE,
 STOXRT.TRX_NAME,
 STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,
 STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,
 STOXRT.ACTION_CODE ,
 'FT' EXCEPTION_TYPE,
 STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD,
 STOXRT.SALES_REP_NUMBER              ,
 STOXRT.SALES_TERRITORY_KEY           ,
 STOXRT.BK_SALES_CREDIT_TYPE_CODE  
 FROM 
 $$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT 
 WHERE STOXRT.FISCAL_ID > (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 */


Post SQL : 



Target15 Name : EX_WI_OM_XXNCR_REV_CG_3


Pre SQL : 



Post SQL : 
/* RCHETTRI : 
 Load Future Record with no RI failure as 'FT'. 
 All RI failure records are loaded to Exception as a part of Main Sql . For this use NOT EXISTS condition below.
 */
 INSERT INTO  $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG
 (
 BATCH_ID                       ,
 ACCOUNTING_RULE_ID             ,
 ACCOUNTING_RULE_NAME           ,
 ACCOUNT_CLASS                  ,
 ACCOUNT_CODE                   ,
 ACCTD_AMOUNT                   ,
 ADJUSTMENT_ID                  ,
 ADJUSTMENT_NUMBER              ,
 ADJUSTMENT_TYPE                ,
 AMOUNT                         ,
 BILL_TO_CUSTOMER_ID            ,
 BILL_TO_SITE_USE_ID            ,
 CODE_COMBINATION_ID            ,
 COGS_PERCENT                   ,
 COMMENTS                       ,
 CONTEXT                        ,
 CREATED_BY                     ,
 CREATION_DATE                  ,
 CUSTOMER_TRX_ID                ,
 CUSTOMER_TRX_LINE_ID           ,
 CUST_TRX_LINE_GL_DIST_ID       ,
 DEFAULT_SC_FLAG                ,
 EXTENDED_AMOUNT                ,
 EXTRACT_TYPE                   ,
 FISCAL_ID                      ,
 FORWARD_REVERSE_FLAG           ,
 FUNC_CURRENCY_CODE             ,
 GES_UPDATE_DATE                ,
 GLOBAL_NAME                    ,
 GL_DATE                        ,
 GL_POSTED_DATE                 ,
 GROUPING_ID                    ,
 INVENTORY_ITEM_ID              ,
 INVOICE_CURRENCY_CODE          ,
 INVOICE_PERCENT                ,
 INVOICING_RULE_ID              ,
 LAST_UPDATED_BY                ,
 LAST_UPDATE_DATE               ,
 LATEST_RECORD_FLAG             ,
 SK_LINE_SEQ_ID_INT             ,
 LINE_TYPE                      ,
 LINK_TO_CUST_TRX_LINE_ID       ,
 ORDER_HEADER_ID                ,
 ORDER_LINE_ID                  ,
 ORDER_NUMBER                   ,
 ORG_ID                         ,
 LINE_PERCENT                   ,
 PREVIOUS_CUSTOMER_TRX_ID       ,
 PREVIOUS_CUSTOMER_TRX_LINE_ID  ,
 QUOTA_FLAG                     ,
 REASON_CODE                    ,
 REBATE_AMOUNT                  ,
 REBATE_PERCENTAGE_ID           ,
 REQUEST_ID                     ,
 RULE_START_DATE                ,
 SALESREP_ID                    ,
 SALES_CREDIT_TYPE_ID           ,
 SHIP_TO_CUSTOMER_ID            ,
 SHIP_TO_SITE_USE_ID            ,
 SOLD_TO_CUSTOMER_ID            ,
 SCA_SOURCE_TYPE_CD             ,
 SPLIT_PERCENT                  ,
 TERRITORY_ID                   ,
 TRANSACTION_DATE               ,
 TRANSACTION_GROUPING_TYPE      ,
 TRANSACTION_QUANTITY           ,
 TRANSACTION_SEQUENCE_ID        ,
 TRX_DATE                       ,
 TRX_NAME                       ,
 TRX_NUMBER                     ,
 TRX_TYPE                       ,
 UNIT_SELLING_PRICE             ,
 UNIT_STANDARD_PRICE            ,
 CREATE_DATETIME                ,
 ACTION_CODE                    ,
 EXCEPTION_TYPE                 ,
 DV_TRANSACTION_KEY             ,
 DV_TRANSACTION_SOURCE_CD       ,
 SALES_REP_NUMBER               ,
 SALES_TERRITORY_KEY            ,
 BK_SALES_CREDIT_TYPE_CODE      ,
 SK_SC_AGENT_ID_INT,
 SOURCE_DATA_KEY5,
 RU_SERVICE_CONTRACT_START_DTM ,
RU_SERVICE_CONTRACT_END_DTM   ,
DV_CONTRACT_DURATION          ,
DV_ANNUALIZED_FLG             ,
DV_ANNUALIZED_US_NET_AMT      ,
DV_MULTIYEAR_US_NET_AMT       ,
BOOKINGS_POLICY_CD
 )
 SELECT 
 STOXRT.BATCH_ID,
 STOXRT.ACCOUNTING_RULE_ID,
 STOXRT.ACCOUNTING_RULE_NAME,
 STOXRT.ACCOUNT_CLASS,
 STOXRT.ACCOUNT_CODE,
 STOXRT.ACCTD_AMOUNT,
 STOXRT.ADJUSTMENT_ID,
 STOXRT.ADJUSTMENT_NUMBER,
 STOXRT.ADJUSTMENT_TYPE,
 STOXRT.AMOUNT,
 STOXRT.BILL_TO_CUSTOMER_ID,
 STOXRT.BILL_TO_SITE_USE_ID,
 STOXRT.CODE_COMBINATION_ID,
 STOXRT.COGS_PERCENT,
 STOXRT.COMMENTS,
 STOXRT.CONTEXT,
 STOXRT.CREATED_BY,
 STOXRT.CREATION_DATE,
 STOXRT.CUSTOMER_TRX_ID,
 STOXRT.CUSTOMER_TRX_LINE_ID,
 STOXRT.CUST_TRX_LINE_GL_DIST_ID,
 STOXRT.DEFAULT_SC_FLAG,
 STOXRT.EXTENDED_AMOUNT,
 STOXRT.EXTRACT_TYPE,
 STOXRT.FISCAL_ID,
 STOXRT.FORWARD_REVERSE_FLAG,
 STOXRT.FUNC_CURRENCY_CODE,
 STOXRT.GES_UPDATE_DATE,
 STOXRT.GLOBAL_NAME,
 STOXRT.GL_DATE,
 STOXRT.GL_POSTED_DATE,
 STOXRT.GROUPING_ID,
 STOXRT.INVENTORY_ITEM_ID,
 STOXRT.INVOICE_CURRENCY_CODE,
 STOXRT.INVOICE_PERCENT,
 STOXRT.INVOICING_RULE_ID,
 STOXRT.LAST_UPDATED_BY,
 STOXRT.LAST_UPDATE_DATE,
 STOXRT.LATEST_RECORD_FLAG,
 STOXRT.LINE_SEQ_ID,
 STOXRT.LINE_TYPE,
 STOXRT.LINK_TO_CUST_TRX_LINE_ID,
 STOXRT.ORDER_HEADER_ID,
 STOXRT.ORDER_LINE_ID,
 STOXRT.ORDER_NUMBER,
 STOXRT.ORG_ID,
 STOXRT.LINE_PERCENT,
 STOXRT.PREVIOUS_CUSTOMER_TRX_ID,
 STOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
 STOXRT.QUOTA_FLAG,
 STOXRT.REASON_CODE,
 STOXRT.REBATE_AMOUNT,
 STOXRT.REBATE_PERCENTAGE_ID,
 STOXRT.REQUEST_ID,
 STOXRT.RULE_START_DATE,
 STOXRT.SALESREP_ID,
 STOXRT.SALES_CREDIT_TYPE_ID,
 STOXRT.SHIP_TO_CUSTOMER_ID,
 STOXRT.SHIP_TO_SITE_USE_ID,
 STOXRT.SOLD_TO_CUSTOMER_ID,
 STOXRT.SOURCE_TYPE,
 STOXRT.SPLIT_PERCENT,
 STOXRT.TERRITORY_ID,
 STOXRT.TRANSACTION_DATE,
 STOXRT.TRANSACTION_GROUPING_TYPE,
 STOXRT.TRANSACTION_QUANTITY,
 STOXRT.TRANSACTION_SEQUENCE_ID,
 STOXRT.TRX_DATE,
 STOXRT.TRX_NAME,
 STOXRT.TRX_NUMBER,
 STOXRT.TRX_TYPE,
 STOXRT.UNIT_SELLING_PRICE,
 STOXRT.UNIT_STANDARD_PRICE,
 STOXRT.CREATE_DATETIME,
 STOXRT.ACTION_CODE ,
 'FT'   EXCEPTION_TYPE,
 STOXRT.DV_TRANSACTION_KEY,
 STOXRT.DV_TRANSACTION_SOURCE_CD,
 STOXRT.SALES_REP_NUMBER              ,
 STOXRT.SALES_TERRITORY_KEY           ,
 STOXRT.BK_SALES_CREDIT_TYPE_CODE  ,
 STOXRT.SK_SC_AGENT_ID_INT,
 STOXRT.SOURCE_DATA_KEY5,
 STOXRT.RU_SERVICE_CONTRACT_START_DTM ,
STOXRT.RU_SERVICE_CONTRACT_END_DTM   ,
STOXRT.DV_CONTRACT_DURATION          ,
STOXRT.DV_ANNUALIZED_FLG             ,
STOXRT.DV_ANNUALIZED_US_NET_AMT      ,
STOXRT.DV_MULTIYEAR_US_NET_AMT       ,
STOXRT.BOOKINGS_POLICY_CD
 FROM 
 $$STGDB.WI_DRVD_NCR_REV_BKG_CG STOXRT 
 WHERE STOXRT.FISCAL_ID > (SELECT FISCAL_ID  FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE)
 AND NOT EXISTS ( SELECT  1 FROM $$EXCEPDB.EX_WI_OM_XXNCR_REV_CG EX
     WHERE EX.GLOBAL_NAME = STOXRT.GLOBAL_NAME
     AND EX.TRANSACTION_SEQUENCE_ID = STOXRT.TRANSACTION_SEQUENCE_ID
     ) ;
 
 
CALL COLLECT_STATS_WRAP('$$EXCEPDB','EX_WI_OM_XXNCR_REV_CG','D');


Source16 Name : SQ_WI_DRVD_NCR_SLS_CHNL_CODE_P_4


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_SLS_CHNL_CODE_CG ALL;


SQL Query : 
SELECT 
STOXREVTRX.GLOBAL_NAME GLOBAL_NAME,
STOXREVTRX.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
NSSCT.SUPER_SALES_CHANNEL_DESCR SALES_CHANNEL_CODE 
FROM 
 $$STGDB.WI_OM_XXNCR_REV_CG STOXREVTRX
INNER JOIN  $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON (NSSC.GLOBAL_NAME = STOXREVTRX.GLOBAL_NAME)
INNER JOIN ( SELECT WIOXRT.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
WIOXRT.GLOBAL_NAME GLOBAL_NAME,
 CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') AND 
 ((NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('%XAAS%','CSP-MARKETPLACE') OR (NABS.BK_BATCH_SOURCE_NAME IN ('ICMS-ADJ','ORDER MANAGEMENT') 
 AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))
 AND  NABS.BK_BATCH_SOURCE_NAME NOT LIKE 'MANUAL%XAAS%')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/ 
 THEN NATL.SOLD_TO_CUST_ACCT_KEY /*ADDED DERIVATION FOR XAAS DATA AS PART OF Q2FY18 SOT XAAS*/ 
WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') AND NAT.SOLD_TO_CUSTOMER_KEY <> -999  THEN NAT.SOLD_TO_CUSTOMER_KEY   
ELSE COALESCE(NSORDTV.SOLD_TO_CUSTOMER_KEY,NSORDTV_CAL.SOLD_TO_CUSTOMER_KEY) end SOLD_TO_CUSTOMER_KEY
FROM 
 $$STGDB.WI_OM_XXNCR_REV_CG WIOXRT
INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
 ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)

LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSORDTV
 ON ( WIOXRT.ORDER_HEADER_ID = NSORDTV.SK_SALES_ORDER_HEADER_ID_INT  
        AND NSSC.SOURCE_SYSTEM_CODE = NSORDTV.SS_CODE)
/* START: ADDED AS PART OF AUS MIGRATION */
LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME
ON EL_GNAME.ORG_ID = WIOXRT.ORG_ID
AND EL_GNAME.ACTIVE_IND = 'Y'       
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSORDTV_CAL
 ON ( WIOXRT.ORDER_HEADER_ID = NSORDTV_CAL.SK_SALES_ORDER_HEADER_ID_INT  
        AND EL_GNAME.ORIG_SS_CD = NSORDTV.SS_CODE)
/* END: ADDED AS PART OF AUS MIGRATION */ 		
		
INNER JOIN $$ETLVWDB.SM_AR_TRX SMARTRX    
 ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
 AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
 ON (SMARTRX.AR_TRX_KEY = NAT.AR_TRX_KEY)
 /*ADDED BELOW JOINS FOR SOLD_TO ENABLEMENT FOR XAAS DATA*/ 
 INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SATL  ON (SATL.SK_CUSTOMER_TRX_LINE_ID_LINT = WIOXRT.CUSTOMER_TRX_LINE_ID AND SATL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL ON (SATL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY) INNER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS ON NAT.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY) SOLD_TO
 ON ( SOLD_TO.TRANSACTION_SEQUENCE_ID = STOXREVTRX.TRANSACTION_SEQUENCE_ID
 AND SOLD_TO.GLOBAL_NAME = STOXREVTRX.GLOBAL_NAME )
INNER JOIN  $$COMREFVWDB.N_CUSTOMER_ACCOUNT CA
 ON (CA.CUSTOMER_ACCOUNT_KEY = SOLD_TO.SOLD_TO_CUSTOMER_KEY )
INNER JOIN  $$COMREFVWDB.N_ERP_PARTY_TV EP
 ON(EP.ERP_PARTY_NUMBER = CA.ERP_CUSTOMER_NUMBER
 AND EP.END_TV_DATE = DATE '3500-01-01')
INNER  JOIN  $$COMREFVWDB.N_ORGANIZATION_PARTY_TV NOPT
 ON (EP.PARTY_KEY=NOPT.ORGANIZATION_PARTY_KEY
 AND NOPT.END_TV_DATE = DATE '3500-01-01')
INNER JOIN  $$COMREFVWDB.N_SALES_CHANNEL_TV NSCT
 ON(NOPT.BK_SALES_CHANNEL_CODE  = NSCT.BK_SALES_CHANNEL_CODE
 AND NSCT.END_TV_DATE = DATE '3500-01-01'
 AND NSCT.BK_SALES_CHANNEL_SOURCE_TYPE='CR')
INNER JOIN  $$COMREFVWDB.N_SUPER_SALES_CHANNEL_TV NSSCT
 ON (NSCT. BK_SUPER_SALES_CHANNEL_CODE = NSSCT. BK_SUPER_SALES_CHANNEL_CODE
 AND NSSCT.END_TV_DATE = DATE '3500-01-01')


Post SQL : 



Target16 Name : WI_DRVD_NCR_SLS_CHNL_CODE_CG_4


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_SLS_CHNL_CODE_CG','D');


Source17 Name : SQ_WI_DRVD_NCR_COMP_US_COST_P_5


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_COMP_US_COST_CG ALL;


SQL Query : 
SELECT 
WIOXRT.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
WIOXRT.GLOBAL_NAME GLOBAL_NAME,
CAST(NSC.STANDARD_COST_AMOUNT*COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 AS DECIMAL(18,6)) DV_BKGS_COMP_US_COST_AMT
FROM 
	$$STGDB.WI_OM_XXNCR_REV_CG WIOXRT
INNER JOIN $$COMREFVWDB.N_PRODUCT NPT
	ON (NPT.SK_INVENTORY_ITEM_ID_INT = WIOXRT.INVENTORY_ITEM_ID ) 
INNER JOIN $$COMREFVWDB.N_STANDARD_COST NSC
	ON ( NSC.ITEM_KEY = NPT.ITEM_KEY 
	AND NSC.BK_MRP_ORG_NAME = 'GLOBAL ORGANIZATION' )
INNER JOIN (SELECT 
	WIOXRT1.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
	WIOXRT1.GLOBAL_NAME,
	NSCM.BK_MRP_ORG_NAME  BK_MRP_ORG_NAME,
	NSCM.ITEM_KEY ITEM_KEY,
	MAX(NSCM.STANDARD_COST_REVS_DATETIME) STANDARD_COST_REVS_DATETIME
	FROM
	$$STGDB.WI_OM_XXNCR_REV_CG WIOXRT1
	INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
		ON (NSSC.GLOBAL_NAME = WIOXRT1.GLOBAL_NAME )
			
	/* INNER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SMSOLN */
	LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SMSOLN
		ON (SMSOLN.SK_SO_LINE_ID_INT = WIOXRT1.ORDER_LINE_ID 
		AND SMSOLN.SS_CODE = NSSC.SOURCE_SYSTEM_CODE )
	/* INNER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN */
	LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN
		ON ( SMSOLN.SALES_ORDER_LINE_KEY = NSOLN.SALES_ORDER_LINE_KEY)
	/* START: ADDED AS PART OF AUS MIGRATION */
	LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME
	ON EL_GNAME.ORG_ID = WIOXRT1.ORG_ID
	AND EL_GNAME.ACTIVE_IND = 'Y'       
	LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SMSOLN_CAL
		ON (SMSOLN_CAL.SK_SO_LINE_ID_INT = WIOXRT1.ORDER_LINE_ID 
		AND SMSOLN_CAL.SS_CODE = EL_GNAME.ORIG_SS_CD )
	LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN_CAL
		ON ( SMSOLN_CAL.SALES_ORDER_LINE_KEY = NSOLN_CAL.SALES_ORDER_LINE_KEY)
	/* END: ADDED AS PART OF AUS MIGRATION */   		
			
	INNER JOIN $$COMREFVWDB.N_PRODUCT NPT
		ON (NPT.SK_INVENTORY_ITEM_ID_INT = WIOXRT1.INVENTORY_ITEM_ID)
	INNER JOIN $$COMREFVWDB.N_STANDARD_COST NSCM
		ON (NSCM.ITEM_KEY = NPT.ITEM_KEY 
		AND NSCM.BK_MRP_ORG_NAME = 'GLOBAL ORGANIZATION'
		AND NSCM.STANDARD_COST_REVS_DATETIME <= CAST(CAST(COALESCE(NSOLN.BK_SO_SRC_CRT_DATETIME,NSOLN_CAL.BK_SO_SRC_CRT_DATETIME,WIOXRT1.TRANSACTION_DATE) AS DATE)   AS TIMESTAMP(0)))
	WHERE (SMSOLN.SS_CODE IS NOT NULL OR SMSOLN_CAL.SS_CODE IS NOT NULL)
	AND(NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL OR NSOLN_CAL.SALES_ORDER_LINE_KEY IS NOT NULL)
	AND NSSC.GLOBAL_NAME='CG'
	GROUP BY NSCM.BK_MRP_ORG_NAME, NSCM.ITEM_KEY, WIOXRT1.TRANSACTION_SEQUENCE_ID, WIOXRT1.GLOBAL_NAME
  ) MAX_DATE
	ON ( MAX_DATE.BK_MRP_ORG_NAME = NSC.BK_MRP_ORG_NAME
	AND  MAX_DATE.ITEM_KEY = NSC.ITEM_KEY
	AND  MAX_DATE.STANDARD_COST_REVS_DATETIME = NSC.STANDARD_COST_REVS_DATETIME
	AND  MAX_DATE.TRANSACTION_SEQUENCE_ID = WIOXRT.TRANSACTION_SEQUENCE_ID
	AND  MAX_DATE.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
WHERE 
WIOXRT.EXTRACT_TYPE <>'CORP_ADJ'
AND WIOXRT.GLOBAL_NAME='CG'


Post SQL : 



Target17 Name : WI_DRVD_NCR_COMP_US_COST_CG_5


Pre SQL : 



Post SQL : 



Source18 Name : SQ_WI_DRVD_NCR_COMP_US_COST_P_5_CDC


Pre SQL : 



SQL Query : 
SELECT 
WIOXRT.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
WIOXRT.GLOBAL_NAME GLOBAL_NAME,
CAST(NSC.STANDARD_COST_AMOUNT*COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 AS DECIMAL(18,6)) DV_BKGS_COMP_US_COST_AMT
FROM 
	$$STGDB.WI_OM_XXNCR_REV_CG WIOXRT
INNER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
ON (WIOXRT.INVENTORY_ITEM_ID = ELMTL.INVENTORY_ITEM_ID
 AND WIOXRT.GLOBAL_NAME=ELMTL.GLOBAL_NAME)                
INNER JOIN $$COMREFVWDB.N_PRODUCT NPT
ON (NPT.BK_PRODUCT_ID = ELMTL.SEGMENT1 ) 

INNER JOIN $$COMREFVWDB.N_STANDARD_COST NSC
	ON ( NSC.ITEM_KEY = NPT.ITEM_KEY 
	AND NSC.BK_MRP_ORG_NAME = 'GLOBAL ORGANIZATION' )
INNER JOIN (SELECT 
	WIOXRT1.TRANSACTION_SEQUENCE_ID TRANSACTION_SEQUENCE_ID,
	WIOXRT1.GLOBAL_NAME,
	NSCM.BK_MRP_ORG_NAME  BK_MRP_ORG_NAME,
	NSCM.ITEM_KEY ITEM_KEY,
	MAX(NSCM.STANDARD_COST_REVS_DATETIME) STANDARD_COST_REVS_DATETIME
	FROM
	$$STGDB.WI_OM_XXNCR_REV_CG WIOXRT1
	INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
		ON (NSSC.GLOBAL_NAME = WIOXRT1.GLOBAL_NAME )
LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SMSOLN
		ON (SMSOLN.SK_SO_LINE_ID_INT = WIOXRT1.ORDER_LINE_ID 
		AND SMSOLN.SS_CODE = NSSC.SOURCE_SYSTEM_CODE )
LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN
		ON ( SMSOLN.SALES_ORDER_LINE_KEY = NSOLN.SALES_ORDER_LINE_KEY)
LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME
	ON EL_GNAME.ORG_ID = WIOXRT1.ORG_ID
	AND EL_GNAME.ACTIVE_IND = 'Y'       
	LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SMSOLN_CAL
		ON (SMSOLN_CAL.SK_SO_LINE_ID_INT = WIOXRT1.ORDER_LINE_ID 
		AND SMSOLN_CAL.SS_CODE = EL_GNAME.ORIG_SS_CD )
	LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN_CAL
		ON ( SMSOLN_CAL.SALES_ORDER_LINE_KEY = NSOLN_CAL.SALES_ORDER_LINE_KEY)
INNER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
ON (WIOXRT1.INVENTORY_ITEM_ID = ELMTL.INVENTORY_ITEM_ID
AND WIOXRT1.GLOBAL_NAME=ELMTL.GLOBAL_NAME)                
INNER JOIN $$COMREFVWDB.N_PRODUCT NPT
ON (NPT.BK_PRODUCT_ID = ELMTL.SEGMENT1 ) 
	INNER JOIN $$COMREFVWDB.N_STANDARD_COST NSCM
		ON (NSCM.ITEM_KEY = NPT.ITEM_KEY 
		AND NSCM.BK_MRP_ORG_NAME = 'GLOBAL ORGANIZATION'
		AND NSCM.STANDARD_COST_REVS_DATETIME <= CAST(CAST(COALESCE(NSOLN.BK_SO_SRC_CRT_DATETIME,NSOLN_CAL.BK_SO_SRC_CRT_DATETIME,WIOXRT1.TRANSACTION_DATE) AS DATE)   AS TIMESTAMP(0)))
	WHERE (SMSOLN.SS_CODE IS NOT NULL OR SMSOLN_CAL.SS_CODE IS NOT NULL)
	AND(NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL OR NSOLN_CAL.SALES_ORDER_LINE_KEY IS NOT NULL)
	GROUP BY NSCM.BK_MRP_ORG_NAME, NSCM.ITEM_KEY, WIOXRT1.TRANSACTION_SEQUENCE_ID, WIOXRT1.GLOBAL_NAME
  ) MAX_DATE
	ON ( MAX_DATE.BK_MRP_ORG_NAME = NSC.BK_MRP_ORG_NAME
	AND  MAX_DATE.ITEM_KEY = NSC.ITEM_KEY
	AND  MAX_DATE.STANDARD_COST_REVS_DATETIME = NSC.STANDARD_COST_REVS_DATETIME
	AND  MAX_DATE.TRANSACTION_SEQUENCE_ID = WIOXRT.TRANSACTION_SEQUENCE_ID
	AND  MAX_DATE.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
WHERE 
WIOXRT.EXTRACT_TYPE <>'CORP_ADJ'
AND WIOXRT.GLOBAL_NAME='CDC'


Post SQL : 



Target18 Name : WI_DRVD_NCR_COMP_US_COST_CDC


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_COMP_US_COST_CG','D');


Source19 Name : SQ_WI_OM_WI_DRVD_NCR_REV_TRX_FOR_BKG_P_6


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_CG ALL;


SQL Query : 
SELECT
   WIOXRT.TRANSACTION_SEQUENCE_ID      TRANSACTION_SEQUENCE_ID,
   WIOXRT.GLOBAL_NAME       GLOBAL_NAME, 
   WIOXRT.TRANSACTION_DATE       TRANSACTION_DATE,
   WIOXRT.ACCOUNT_CLASS       ACCOUNT_CLASS_CODE,
   WIOXRT.ACCTD_AMOUNT       GL_DISTRIBUTION_FUNCTIONAL_AMT,
   EOCATA.ADJ_TYPE_NAME       ADJUSTMENT_TYPE_CODE,
   WIOXRT.AMOUNT        GL_DISTRIB_TRANSACTIONAL_AMT,
   WIOXRT.CREATED_BY       CREATED_BY_INT,
    /*commented for OAQ1fy15
   NATIL.RU_DEBIT_EXTENDED_AMOUNT + NATIL.RU_CREDIT_EXTENDED_AMOUNT AR_TRX_LINE_TRANSACTIONAL_AMT,*/
   CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (NATIL.RU_OFFER_ATRBTD_DBT_TRX_AMT + NATIL.RU_OFFER_ATRBTD_CRDT_TRX_AMT )
    WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'N' THEN (NATIL.RU_DEBIT_EXTENDED_AMOUNT + NATIL.RU_CREDIT_EXTENDED_AMOUNT )
    END  AR_TRX_LINE_TRANSACTIONAL_AMT,
   WIOXRT.EXTRACT_TYPE       EXTRACT_TYPE_CODE,
   WIOXRT.FORWARD_REVERSE_FLAG      FORWARD_REVERSE_CODE,
   WIOXRT.GL_DATE        GL_DATETIME,
   WIOXRT.GL_DATE        GL_DATE,
   WIOXRT.GL_POSTED_DATE       GL_POSTED_DATE,
   WIOXRT.TRANSACTION_GROUPING_TYPE     TRANSACTION_GROUPING_TYPE_CODE,
   WIOXRT.LAST_UPDATED_BY       LAST_UPDATED_BY_INT,
   WIOXRT.LATEST_RECORD_FLAG      LAST_RECORD_FLAG,
   WIOXRT.LINE_TYPE       LINE_TYPE_CODE,
   WIOXRT.QUOTA_FLAG       QUOTA_FLAG,  
   WIOXRT.REBATE_AMOUNT       REBATE_TRANSACTIONAL_AMOUNT,
   CASE WHEN  WIOXRT.REQUEST_ID = -999  THEN 'Y' ELSE 'N' END MANUAL_TRANSACTION_FLAG,
   WIOXRT.RULE_START_DATE       RULE_START_DATETIME, 
   WIOXRT.TRANSACTION_DATE       TRANSACTION_DATETIME,
   /* rchettri: added as a part of Lot-2A CG1 implementation 
   CASE WHEN EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' 
       AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%' 
      THEN WIOXRT.TRANSACTION_QUANTITY 
     ELSE 0 
   END TRANSACTION_QUANTITY,
   
  */
   CASE WHEN ((EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY') OR 
   (EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY TNC') AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
   OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) IN ('ORDER MANAGEMENT%') AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
       AND COALESCE(NSOT.BK_ORDER_TYPE_NAME ,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' 
       AND UPPER(COALESCE(NSORDTV.SALES_ORDER_CATEGORY_TYPE,NSORDTV_CAL.SALES_ORDER_CATEGORY_TYPE)) <> 'MIXED'
      THEN WIOXRT.TRANSACTION_QUANTITY 
     WHEN ((EORCTL.INTERFACE_LINE_CONTEXT IN ('ORDER ENTRY')  OR 
  (EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY TNC') AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
  OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) IN ('ORDER MANAGEMENT%') AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
       AND UPPER(NSORDTV.SALES_ORDER_CATEGORY_TYPE) in ('MIXED', 'RETURN')
       AND UPPER(NSOLN.SALES_ORDER_CATEGORY_TYPE) = 'RETURN'
      THEN WIOXRT.TRANSACTION_QUANTITY   
     ELSE 0 
   END TRANSACTION_QUANTITY,
   WIOXRT.TRX_DATE        AR_TRX_DATETIME,
   WIOXRT.TRX_NUMBER       AR_TRX_NUMBER,
   WIOXRT.TRX_TYPE        AR_TRX_TYPE_CODE,
   NATIL.RU_CREDIT_UNIT_AMOUNT + NATIL.RU_DEBIT_UNIT_AMOUNT  UNIT_SELLING_PRICE_TRX_AMT,
   NATIL.RU_UNIT_STD_PRICE_LOCAL_AMT     UNIT_STANDARD_PRICE_TRX_AMT,
   WIOXRT.INVOICE_CURRENCY_CODE      PD_INVOICE_CURRENCY_CODE, 
   CASE WHEN WIOXRT.TRANSACTION_GROUPING_TYPE ='O' THEN CAST(WIOXRT.GL_DATE AS DATE) ELSE CAST(WIOXRT.TRANSACTION_DATE AS DATE) END DV_FISCAL_DATE,
   'N'         DV_BKGS_ITEM_TYPE_CODE_FLAG ,
   /* rchettri: added as a part of Lot-2A CG1 implementation 
  CASE WHEN SUBSTR(NSORDTV.BK_ORDER_TYPE_NAME,1,8)='Standard' AND NSORDTV.SHIPMENT_PRIORITY_CODE  IN('Demo' ,'Int """""""""""""""""""""""""""""""" l Demo','Intl Demo') THEN 'Y' ELSE 'N' END DV_BKGS_INTL_DEMO_FLAG, */
   '=' DV_BKGS_INTL_DEMO_FLAG, 
   
   /* rchettri: added as a part of Lot-2A CG1 implementation 
   CASE WHEN SUBSTR(NSOT.DV_SALES_ORDER_TYPE_ALT_NAME,1,12)='Replacements' AND NSORDTV.SHIPMENT_PRIORITY_CODE IN ( 'Demo','Evaluation','Int"""""""""""""""""""""""""""""""" l Demo','Intl Demo') THEN 'Y' ELSE 'N' END DV_BKGS_REPL_DEMO_FLAG,
   */
   '=' DV_BKGS_REPL_DEMO_FLAG , 
 
   
   /*CASE WHEN COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) = '='  OR COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) IS NULL THEN 'Y' ELSE COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) END DV_BKGS_REVENUE_FLAG,*/
   /*CASE WHEN COALESCE(ORD_LN_V.ORIGINATED_QTC_VIA_CG1_FLG,ORD_LN_V_CAL.ORIGINATED_QTC_VIA_CG1_FLG) = 'Y' THEN
    CASE WHEN COALESCE(NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG ,NSOT_CAL_Y.SO_TYPE_REVENUE_GEN_FLAG) = '=' 
     OR COALESCE(NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL_Y.SO_TYPE_REVENUE_GEN_FLAG) IS NULL THEN 'Y' 
    ELSE COALESCE(NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL_Y.SO_TYPE_REVENUE_GEN_FLAG) 
    END 
   ELSE
    CASE WHEN COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG ,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) = '=' 
     OR COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) IS NULL THEN 'Y' 
    ELSE COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) 
    END 
   END DV_BKGS_REVENUE_FLAG,
   */
  /*   'Y' AS DV_BKGS_REVENUE_FLAG,   */
  
  CASE WHEN (NSOLN.SS_CODE = 'CG' AND NSORDTV.ORIGINATED_QTC_VIA_CG1_FLG = 'Y') OR (NSORDTV.SS_CODE <> 'CG')   THEN  CASE WHEN NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG = '=' OR NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG IS NULL THEN 'Y' ELSE NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG END 
    ELSE CASE WHEN NSOT.SO_TYPE_REVENUE_GEN_FLAG = '=' OR NSOT.SO_TYPE_REVENUE_GEN_FLAG IS NULL THEN 'Y' ELSE NSOT.SO_TYPE_REVENUE_GEN_FLAG END END
  as DV_BKGS_REVENUE_FLAG,  /*     added as part of Cf LSS CR post Q3FY15: If Order got created in old 11i system then flag will be derived based on order table otherwise if order gets created in new CG system, then flag will be derived from order line table*/
  
  
   /* RCHETTRI : REBOK CHANGES 
   CASE WHEN (UCH.TERRITORY_ID IS NULL OR UCH.TERRITORY_ID = -999) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG,
   */
   /*CASE WHEN (WIOXRT.SALES_TERRITORY_KEY = 73106 ) OR (UCH.TERRITORY_ID IS NULL OR UCH.TERRITORY_ID = -999) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG ,*/
   CASE WHEN (NST.SALES_TERRITORY_KEY  IS NULL ) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG ,
   /*CASE WHEN (WIOXRT.SALESREP_ID = -999 OR WIOXRT.SALES_REP_NUMBER   = '99998' ) THEN 'Y'ELSE 'N' END DV_BKGS_SALESREP_FLAG ,*/
   CASE WHEN (WIOXRT.SALES_REP_NUMBER = '-999' OR WIOXRT.SALES_REP_NUMBER IS NULL OR WIOXRT.SALES_REP_NUMBER = 'UNKNOWN' ) THEN 'Y'ELSE 'N' END DV_BKGS_SALESREP_FLAG ,
   NULL         DV_BKGS_IC_REVENUE_FLAG,
   CASE WHEN NPT.BK_PRODUCT_TYPE_ID='CHARGES' THEN 'Y' ELSE 'N' END DV_BKGS_CHARGES_FLAG,
   CASE WHEN SUBSTR(NPT.BK_PRODUCT_ID,1,4)='MISC' THEN 'Y' ELSE 'N' END DV_BKGS_MISC_FLAG,
   
    /*CASE WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,2) ='41' THEN 'Y' 
    WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,2) ='42' THEN 'Y'
    WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,3)='433' THEN 'Y' 
    ELSE 'N' 
    END DV_BKGS_SERVICE_FLAG,*/ /*knarlapu: Serv_Flg poplation as in rev flow*/
    
   CASE WHEN NPT.ITEM_KEY = -998 THEN  
    CASE WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,2) ='41' THEN 'Y'   WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,2) ='42' THEN 'Y'  WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,3)='433' THEN 'Y' 
    ELSE 'N' END
    ELSE 
    CASE WHEN NPT.GOODS_OR_SERVICE_TYPE = 'SERVICE' THEN 'Y' 
    ELSE 'N' END  
   END DV_BKGS_SERVICE_FLAG, /*knarlapu: Serv_Flg poplation as in rev flow*/
    
   CASE WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' 
   THEN CAST(EOCRATA.ADJUSTMENT_REVENUE_USD * COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 AS DECIMAL(18,6)) WHEN WIOXRT.EXTRACT_TYPE IN ('INV' ,'REV','AR_ADJUSTMENT') 
   THEN CAST(((CAST (COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)*
   (COALESCE(WIOXRT.AMOUNT,0.000000)- COALESCE(WIOXRT.REBATE_AMOUNT,0.000000)) AS DECIMAL(18,6)))* 
   (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
   NCCDR.PL_CONVERSION_RATE END)/100.000000) AS DECIMAL(18,6))
   ELSE 0.000000 END DV_BKGS_COMP_US_NET_PRC_AMT,
   
   CASE WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' THEN 0 
     ELSE  ( CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' THEN 0 
          ELSE /*ADDED AS PART OF Q1FY18 LIST_PRICE DRVN FOR XAAS DATA*/
   ( CASE WHEN EORCTL.INTERFACE_LINE_CONTEXT IN  ('SALES ADJUSTMENTS-WEBEX','WEBEX','ICMS-ADJ-WEBEX','XAAS','ICMS-XAAS','PP-XAAS','XAAS-CCE','ICMS-XAAS-CCE') 
           OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE ANY ('XAAS%','ICMS-XAAS%','CSP-MARKETPLACE') /*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
           OR (UPPER (NABS.BK_BATCH_SOURCE_NAME) IN ('ICMS-ADJ','ORDER MANAGEMENT') AND NATIL.TRX_LINE_SRC_NAME IN ('XAAS'))
           
                          THEN  CAST( ( ( 
        (CASE WHEN NSPT.PRODUCT_KEY>0 THEN (COALESCE(NSPT.BASE_PRICE,0)/(CASE WHEN NSPT.PRICING_TERM_MTHS_CNT=0 THEN 1 ELSE COALESCE(NSPT.PRICING_TERM_MTHS_CNT,1) END))
              WHEN NSPT_DEF.PRODUCT_KEY>0 THEN (COALESCE(NSPT.LIST_PRICE_LOCAL_AMT,0)/(CASE WHEN NSPT.PRICING_TERM_MTHS_CNT=0 THEN 1 ELSE COALESCE(NSPT.PRICING_TERM_MTHS_CNT,1) END))
              ELSE 0 END) 
                * (CASE WHEN NP.RU_CHARGE_TYPE_CD='Amortized One Time' 
                  THEN CAST(1 AS DECIMAL(26,7)) 
             ELSE CAST(ROUND(COALESCE(MONTHS_BETWEEN(NATIL.RU_REV_TRNSFR_CNTRCT_END_DT,NATIL.RU_REV_TRNSFR_CNTRCT_START_DT),0)) AS DECIMAL(26,7)) END) ) * 
           (CASE WHEN (NATT.AR_TRX_TYPE_SHORT_CODE = 'CM'  AND UPPER(NACAR.INTERFACE_HEADER_ATTRIBUTE10) = 'CREDIT_REBILL')
                 THEN DNATIL.TRANSACTION_QUANTITY ELSE 0 END) * WIOXRT.SPLIT_PERCENT)/100 AS DECIMAL(18,6))
     ELSE                  
     CAST( ( CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NPPT.LIST_PRICE_AMOUNT ELSE NPPT.LIST_PRICE_AMOUNT  END *
                    (  CASE WHEN ((EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY') 
     OR (EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY TNC') AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
     OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE ('ORDER MANAGEMENT%') AND NATIL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
                  AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' 
                  AND UPPER(COALESCE(NSORDTV.SALES_ORDER_CATEGORY_TYPE,NSORDTV_CAL.SALES_ORDER_CATEGORY_TYPE)) <> 'MIXED'              
                THEN DNATIL.TRANSACTION_QUANTITY /*OAQ1FY15*/
   
                WHEN ((EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY')  
       OR (EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY TNC') AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
     OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE ('ORDER MANAGEMENT%') AND NATIL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
                   AND UPPER(NSORDTV.SALES_ORDER_CATEGORY_TYPE) in ('MIXED', 'RETURN') 
                   AND UPPER(NSOLN.SALES_ORDER_CATEGORY_TYPE) ='RETURN'
                THEN DNATIL.TRANSACTION_QUANTITY
   
                WHEN (EORCTL.INTERFACE_LINE_CONTEXT IN ( 'SALES ADJUSTMENTS'  , 'DISPUTE','ICMS-ADJ')
       OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) IN ('DISPUTE','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME NOT IN ('XAAS')))
                   AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM'  AND /* NACAR.SAF_TYPE_CD = 'CREDIT_REBILL' */ 
       UPPER(NACAR.INTERFACE_HEADER_ATTRIBUTE10) = 'CREDIT_REBILL'
                THEN DNATIL.TRANSACTION_QUANTITY 
       
       WHEN ((EORCTL.INTERFACE_LINE_CONTEXT ='ICMS-ADJ' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) ='ICMS-ADJ')
    AND NATIL.TRX_LINE_SRC_NAME NOT IN ('XAAS'))
                 AND NATT.AR_TRX_TYPE_SHORT_CODE = 'INV'  AND  UPPER(NACAR.INTERFACE_HEADER_ATTRIBUTE10) = 'DEBIT_REBILL'
                 THEN DNATIL.TRANSACTION_QUANTITY  /*knarlapu: Adding DEBIT_REBILL to CARBT FLOW*/
                ELSE 0
               END)
             *WIOXRT.SPLIT_PERCENT)/100 AS DECIMAL(18,6)) END ) 
        END
       ) 
   END DV_BKGS_COMP_US_LST_PRC_AMT,
   CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' THEN 0 
     ELSE  CASE WHEN ( COALESCE(NSORDTV.PURCHASE_ORDER_TYPE_CODE,NSORDTV_CAL.PURCHASE_ORDER_TYPE_CODE,'~') = 'Demo/Eval'  
           OR 
           (COALESCE(NSORDTV.PURCHASE_ORDER_TYPE_CODE,NSORDTV_CAL.PURCHASE_ORDER_TYPE_CODE,'~') <> 'Demo/Eval' 
            AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) NOT LIKE   'Invoice Only%' 
           )
           )
         THEN ( CASE  WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' 
             THEN EOCRATA.ADJUSTMENT_COGS_USD
               * COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 
             ELSE WDNCUC.DV_BKGS_COMP_US_COST_AMT 
               *
               ( CASE  
                             WHEN ((EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY')
      OR (EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY TNC') AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
     OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE ('ORDER MANAGEMENT%') AND NATIL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
                    AND (  (COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND UPPER(COALESCE(NSORDTV.SALES_ORDER_CATEGORY_TYPE,NSORDTV_CAL.SALES_ORDER_CATEGORY_TYPE)) <> 'MIXED')  
                      OR 
                      (UPPER(NSORDTV.SALES_ORDER_CATEGORY_TYPE) in ('MIXED', 'RETURN') AND UPPER(NSOLN.SALES_ORDER_CATEGORY_TYPE) =  'RETURN' )
                     )
                  THEN WIOXRT.TRANSACTION_QUANTITY  
   
                  ELSE 0 
                END
               ) 
           END ) 
         ELSE 0.0000000 
       END 
   END DV_BKGS_COMP_US_COST_AMT,
   
   0         DV_BKGS_EXTENDED_QUANTITY,
   WIOXRT.SPLIT_PERCENT       SALES_COMMISSION_PERCENTAGE,
   0         DV_COMP_US_STANDARD_PRICE_AMT ,
   CASE WHEN NPT.ITEM_KEY = -998 THEN (CASE WHEN DV_BKGS_SERVICE_FLAG='Y' THEN EV.ITEM_KEY ELSE -998  /*CM_ADJ_PROD*/  END)  ELSE NPT.ITEM_KEY END PRODUCT_KEY, /*knarlapu: prod_key poplation as in rev flow*/
 
   COALESCE(CASE WHEN COALESCE(NSORDTV.SALES_ORDER_KEY,NSORDTV_CAL.SALES_ORDER_KEY) = -7777 THEN
   (CASE WHEN COALESCE(NSOLN.SALES_ORDER_LINE_KEY,NSOLN_CAL.SALES_ORDER_LINE_KEY) IS NOT NULL THEN COALESCE(NSOLN.SALES_ORDER_KEY,NSOLN_CAL.SALES_ORDER_KEY) END)
   WHEN COALESCE(NSORDTV.SALES_ORDER_KEY,NSORDTV_CAL.SALES_ORDER_KEY) IS NULL THEN -7777
   ELSE COALESCE(NSORDTV.SALES_ORDER_KEY,NSORDTV_CAL.SALES_ORDER_KEY) END,-7777) SALES_ORDER_KEY,
   
   /*CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NULL THEN ( CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END) ELSE NSOLN.SALES_ORDER_LINE_KEY END SALES_ORDER_LINE_KEY,*/
   COALESCE(NSOLN.SALES_ORDER_LINE_KEY,NSOLN_CAL.SALES_ORDER_LINE_KEY,-7777) SALES_ORDER_LINE_KEY,
   
   CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') 
   THEN  CASE WHEN NATL.SHIP_TO_CUSTOMER_KEY > 0 THEN NATL.SHIP_TO_CUSTOMER_KEY ELSE NAT.SHIP_TO_CUSTOMER_KEY END 
   ELSE  COALESCE(NSORDTV.SHIP_TO_CUSTOMER_KEY,NSORDTV_CAL.SHIP_TO_CUSTOMER_KEY, -999) END SHIP_TO_CUSTOMER_KEY,
   /*END: Added as part of CF-LSS Q3FY15  */
 /*PRMADDAL: Changed derivation for XAAS Data*/ 
  
 CASE WHEN (WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') AND
           /*(NABS.BK_BATCH_SOURCE_NAME  IN ('ICMS-XAAS','PP-XAAS','XAAS'))*/
     (NABS.BK_BATCH_SOURCE_NAME  LIKE ANY('ICMS-XAAS%','PP-XAAS%','XAAS%','CSP-MARKETPLACE') OR 
     (NABS.BK_BATCH_SOURCE_NAME IN ('ICMS-ADJ','ORDER MANAGEMENT') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')))) /*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
     THEN NATL1.SOLD_TO_CUST_ACCT_KEY
      WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') AND NAT.SOLD_TO_CUSTOMER_KEY <> -999 THEN NAT.SOLD_TO_CUSTOMER_KEY ELSE 
   COALESCE(NSORDTV.SOLD_TO_CUSTOMER_KEY,NSORDTV_CAL.SOLD_TO_CUSTOMER_KEY,-999) END SOLD_TO_CUSTOMER_KEY ,
    CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') THEN NAT.BILL_TO_CUSTOMER_KEY 
   ELSE COALESCE(NSORDTV.BILL_TO_CUSTOMER_KEY,NSORDTV_CAL.BILL_TO_CUSTOMER_KEY, -999) END  BILL_TO_CUSTOMER_KEY,
   
   /* rchettri
   CASE 
   WHEN NSORDTV.SALES_ORDER_KEY in (-9999,-8888) THEN
   (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.BK_SO_NUMBER_INT ELSE -9999 END)
   WHEN NSORDTV.BK_SO_NUMBER_INT IS NULL THEN -9999 
   ELSE NSORDTV.BK_SO_NUMBER_INT  END REPORTED_SALES_ORDER_NUM_INT  , */
   CASE 
   WHEN COALESCE(NSORDTV.SALES_ORDER_KEY,NSORDTV_CAL.SALES_ORDER_KEY) = -7777 THEN
   (CASE WHEN COALESCE(NSOLN.SALES_ORDER_LINE_KEY,NSOLN_CAL.SALES_ORDER_LINE_KEY) IS NOT NULL THEN COALESCE(NSOLN.BK_SO_NUMBER_INT,NSOLN_CAL.BK_SO_NUMBER_INT) END)
   WHEN COALESCE(NSORDTV.BK_SO_NUMBER_INT,NSORDTV_CAL.BK_SO_NUMBER_INT) IS NULL THEN -9999 
   ELSE COALESCE(NSORDTV.BK_SO_NUMBER_INT,NSORDTV_CAL.BK_SO_NUMBER_INT) END REPORTED_SALES_ORDER_NUM_INT ,
   
   CASE WHEN NCCDR.PL_CONVERSION_RATE  =0 OR NCCDR.PL_CONVERSION_RATE  IS NULL THEN 1 ELSE NCCDR.PL_CONVERSION_RATE  END CONVERSION_RT,
   WIOXRT.SK_LINE_SEQ_ID_INT,
   WIOXRT.SCA_SOURCE_TYPE_CD,
   WIOXRT.DEFAULT_SC_FLAG,
   WIOXRT.DV_TRANSACTION_KEY,
   WIOXRT.DV_TRANSACTION_SOURCE_CD,
   WIOXRT.SK_SC_AGENT_ID_INT,
   CASE WHEN ((EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY') 
   OR (EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY TNC') AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
   OR (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%' AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
  AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
  THEN 
      CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN(EL.ATTRIBUTE8/100.000000) * NSOLN.UNIT_LIST_PRICE ELSE NSOLN.UNIT_LIST_PRICE END  * DNATIL.TRANSACTION_QUANTITY*(WIOXRT.SPLIT_PERCENT/100)  AS DECIMAL(18,6))  
  ELSE 0
  END AS DV_LOCAL_EXTND_LIST_PRICE_AMT,
   CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT  IN ('ORDER ENTRY','ORDER ENTRY TNC')  OR 
   (UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%' AND NATL.TRX_LINE_SRC_NAME IN ('ORDER ENTRY')))
   AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
   THEN 
    CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NSOLN.UNIT_LIST_PRICE ELSE  
    NSOLN.UNIT_LIST_PRICE END *(WIOXRT.SPLIT_PERCENT/100) AS DECIMAL(18,6))
   ELSE 0
   END AS LOCAL_UNIT_LIST_PRICE_AMT1
  ,CAST(LOCAL_UNIT_LIST_PRICE_AMT1* (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
    CONVERSION_RT END) AS DECIMAL(18,6)) AS DV_UNIT_LIST_PRICE_USD_AMT
  ,CASE WHEN WIOXRT.EXTRACT_TYPE IN ('INV' ,'REV')
        THEN CAST((
             CAST(( 
       /*CASE WHEN NABS.BK_BATCH_SOURCE_NAME IN ('ICMS-XAAS','PP-XAAS','XAAS')*/ 
    CASE WHEN (NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('ICMS-XAAS%','PP-XAAS%','XAAS%','CSP-MARKETPLACE') /*ADDED AS PART OF Q1FY19 CE-BRAZIL*/ 
    OR  (NABS.BK_BATCH_SOURCE_NAME IN ('ICMS-ADJ','ORDER MANAGEMENT') AND NATL.TRX_LINE_SRC_NAME  IN ('XAAS')))
            THEN(CASE WHEN NATT.AR_TRX_TYPE_SHORT_CODE IN ('INV')
                   THEN (-1) * (NATIL1.DEBIT_PURC_ADJSTMT_TRXL_AMT)
                               ELSE 0 END )  
                 ELSE 
     ((CASE WHEN (NSOL.UNIT_SALE_PRICE IS NULL OR NSOL.UNIT_SALE_PRICE=0) THEN 0
           WHEN NATT.AR_TRX_TYPE_SHORT_CODE IN ('INV')
           THEN (CAST(NATIL1.RU_DEBIT_UNIT_AMOUNT/NSOL.UNIT_SALE_PRICE AS DECIMAL(26,7))
         * NATIL1.RU_DEBIT_QUANTITY)
           WHEN (COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) LIKE '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM')
        THEN (CAST(NATIL1.RU_CREDIT_UNIT_AMOUNT/NSOL.UNIT_SALE_PRICE AS DECIMAL(26,7))
         * NATIL1.RU_CREDIT_QUANTITY)
        ELSE 0 END) * COALESCE(NSPA.ADJSTD_USD_AMT,0))
     END) AS DECIMAL(26,7)) *
     CAST((COALESCE(WIOXRT.SPLIT_PERCENT,100.0000000)/100)AS DECIMAL(26,7)) *
  (COALESCE(CAST(NATLGD.TRANSACTION_LINE_PERCENTAGE AS DECIMAL(27,12)),100.0000000)/100) *
  (CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) ELSE 1 END) *
     CAST((CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1 ELSE 
              CONVERSION_RT END) AS DECIMAL(26,7))) AS DECIMAL(26,7))
    ELSE 0.0000000 END DV_COMP_US_NET_PURC_ADJ_AMT, /*Added as part of SOT XAAS Q1FY18*/
   WIOXRT.SALES_MOTION_CD /* Added as part of SALES OCTRelFY18 */
 ,CAST((CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
   AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
   THEN 
    CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NSOLN.ORIG_UNIT_LST_PRC_TRXL_AMT ELSE  NSOLN.ORIG_UNIT_LST_PRC_TRXL_AMT END *(WIOXRT.SPLIT_PERCENT/100) AS DECIMAL(18,6))
   ELSE 0
   END)* (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
    CONVERSION_RT END) AS DECIMAL(18,6)) AS ORIG_UNIT_LST_PRC_USD_AMT
    
  ,CAST((CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
   AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
   THEN 
    CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NSOLN.ORIG_UNIT_LST_PRC_TRXL_AMT ELSE  NSOLN.ORIG_UNIT_LST_PRC_TRXL_AMT END *(DNATIL.TRANSACTION_QUANTITY)*(WIOXRT.SPLIT_PERCENT/100) AS DECIMAL(18,6))
   ELSE 0
   END)* (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
    CONVERSION_RT END) AS DECIMAL(18,6)) AS ORIG_EXTD_LST_PRC_USD_AMT
     FROM 
   $$STGDB.WI_OM_XXNCR_REV_CG WIOXRT
   INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
   ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
   INNER JOIN $$ETLVWDB.SM_AR_TRX SMARTRX
   ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
   AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
   INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
   ON (SMARTRX.AR_TRX_KEY = NAT.AR_TRX_KEY)
  
   /*START: Added as part of CF-LSS Q3FY15  */
  INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SATL
   ON (WIOXRT.CUSTOMER_TRX_LINE_ID = SATL.SK_CUSTOMER_TRX_LINE_ID_LINT
   AND NSSC.SOURCE_SYSTEM_CODE=SATL.SS_CODE)
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL1
   ON (NATL1.AR_TRX_LINE_KEY=SATL.AR_TRX_LINE_KEY) 
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL1
  ON (NATL1.AR_TRX_LINE_KEY=NATIL1.AR_TRX_LINE_KEY)
  
  /*END: Added as part of CF-LSS Q3FY15  */
   
   INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
   ON (NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
   AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY           
   AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE)
   LEFT OUTER JOIN $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
   ON ( EOCRATA.REV_ADJ_TRX_ID = WIOXRT.ADJUSTMENT_ID 
   AND EOCRATA.GLOBAL_NAME = WIOXRT.GLOBAL_NAME
   AND WIOXRT.EXTRACT_TYPE IN('CORP_ADJ','INV' ,'REV') ) 
   LEFT OUTER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA 
   ON (EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID
   AND EOCATA.GLOBAL_NAME = EOCRATA.GLOBAL_NAME)
   /*
   LEFT OUTER JOIN ETLVWDB.EL_SALES_TERRITORY UCH 
   ON ( UCH.TERRITORY_ID = WIOXRT.TERRITORY_ID
   AND UCH.GLOBAL_NAME = WIOXRT.GLOBAL_NAME 
   AND UCH.HIERARCHY_TYPE_CODE LIKE 'CORP%.%REVENUE') 
   */
   LEFT OUTER JOIN $$COMREFVWDB.N_SALES_TERRITORY_TV NST
   ON WIOXRT.SALES_TERRITORY_KEY = NST.SALES_TERRITORY_KEY
   AND NST.END_TV_DATE = '3500-01-01' 
   AND NST.BK_SALES_HIERARCHY_TYPE_CODE LIKE 'CORP%.%REVENUE'
   LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT NPT 
   ON ( NPT.SK_INVENTORY_ITEM_ID_INT = WIOXRT.INVENTORY_ITEM_ID) 
   LEFT OUTER JOIN $$STGDB.WI_DRVD_NCR_COMP_US_COST_CG WDNCUC
   ON (WDNCUC.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID
   AND WDNCUC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME )
   
   LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SSOL
   ON ( SSOL.SK_SO_LINE_ID_INT = WIOXRT.ORDER_LINE_ID 
   AND SSOL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE)
   LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN
   ON ( SSOL.SALES_ORDER_LINE_KEY = NSOLN.SALES_ORDER_LINE_KEY 
   --AND NSOLN.END_TV_DATETIME = '3500-01-01 00:00:00' 
   )
   /* START: ADDED AS PART OF AUS MIGRATION */
   LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME
   ON EL_GNAME.ORG_ID = WIOXRT.ORG_ID
   AND EL_GNAME.ACTIVE_IND = 'Y'       
   LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SSOL_CAL
   ON ( SSOL_CAL.SK_SO_LINE_ID_INT = WIOXRT.ORDER_LINE_ID 
   AND SSOL_CAL.SS_CODE = EL_GNAME.ORIG_SS_CD)
   LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN_CAL
   ON ( SSOL_CAL.SALES_ORDER_LINE_KEY = NSOLN_CAL.SALES_ORDER_LINE_KEY 
   --AND NSOLN_CAL.END_TV_DATETIME = '3500-01-01 00:00:00'
   )
   /* END: ADDED AS PART OF AUS MIGRATION */ 
               
   /*OA Q1FY15 >>*/
   LEFT OUTER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LN_ORD_LN EL
   ON WIOXRT.CUSTOMER_TRX_LINE_ID = EL.CUSTOMER_TRX_LINE_ID
   AND WIOXRT.GLOBAL_NAME=EL.GLOBAL_NAME
   LEFT OUTER  JOIN  
    (SELECT NATIL.SK_CUSTOMER_TRX_LINE_ID_LINT,NATIL.AR_TRX_LINE_KEY AS AR_TRX_LINE_KEY ,NATIL_PAR.AR_TRX_LINE_KEY  AS PARENT_AR_TRX_LINE_KEY , 
    NATIL_PAR.SK_CUSTOMER_TRX_LINE_ID_LINT AS P_SK_CUSTOMER_TRX_LINE_ID_LINT,
   NATIL_PAR.PRODUCT_KEY AS PARENT_PRODUCT_KEY, NATIL.PRODUCT_KEY, NATIL.OFFER_ATTRIBUTED_FLG, NATIL.WITH_PARENT_ROLE, NATIL.SS_CODE
  , CASE WHEN NAAT.AR_TRX_TYPE_SHORT_CODE ='CM' and NATL.BK_AR_TRX_LINE_TYPE  = 'LINE' THEN
      NATIL_PAR.RU_CREDIT_QUANTITY 
     ELSE NATIL_PAR.RU_DEBIT_QUANTITY  
   END  as TRANSACTION_QUANTITY  
    FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL
  INNER JOIN  $$FINLGLVWDB.N_AR_TRX_LINE NATL
    ON (NATIL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY)
   INNER JOIN  $$FINLGLVWDB.N_AR_TRX_TYPE NAAT
    ON (NATL.BK_COMPANY_CODE = NAAT.BK_COMPANY_CODE
    AND NATL.BK_SET_OF_BOOKS_KEY = NAAT.BK_SET_OF_BOOKS_KEY
    AND NATL.BK_AR_TRX_TYPE_CODE = NAAT.BK_AR_TRX_TYPE_CODE)
    INNER JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL_PAR  
    ON COALESCE(NATIL.RU_PARENT_AR_TRX_LINE_KEY,0)  = NATIL_PAR.AR_TRX_LINE_KEY  ) DNATIL 
     ON  WIOXRT.CUSTOMER_TRX_LINE_ID = DNATIL.SK_CUSTOMER_TRX_LINE_ID_LINT
     AND NSSC.SOURCE_SYSTEM_CODE=DNATIL.SS_CODE                   
        LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT NP
           ON(NP.ITEM_KEY= CASE WHEN DNATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN DNATIL.PARENT_PRODUCT_KEY ELSE DNATIL.PRODUCT_KEY END)
   /* << OA Q1FY15 */
   
   LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT_PRICE_TV NPPT   /*OA Q1FY15: Modified join */
   ON ( NPPT.ITEM_KEY = NP.ITEM_KEY
   AND NPPT.BK_PRICE_LIST_NAME = 'Base Price List' 
   AND CAST(COALESCE(NSOLN.BK_SO_SRC_CRT_DATETIME,NSOLN_CAL.BK_SO_SRC_CRT_DATETIME,WIOXRT.TRANSACTION_DATE) AS DATE)  
   BETWEEN NPPT.START_TV_DATE AND NPPT.END_TV_DATE )
   LEFT OUTER JOIN $$FINLGLVWDB.N_CURRENCY_CONV_DAILY_RATE NCCDR
   ON ( NCCDR.BK_FROM_CURRENCY_CODE = WIOXRT.INVOICE_CURRENCY_CODE
   AND NCCDR.BK_TO_CURRENCY_CODE ='USD'
   AND NCCDR.BK_CONVERSION_DATE= CAST (WIOXRT.GL_DATE AS DATE))
   
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TV NSORDTV
   ON ( WIOXRT.ORDER_HEADER_ID = NSORDTV.SK_SALES_ORDER_HEADER_ID_INT  
   AND NSSC.SOURCE_SYSTEM_CODE = NSORDTV.SS_CODE
   AND NSORDTV.END_TV_DATETIME =  '3500-01-01 00:00:00' )
   /*LEFT OUTER JOIN SLSORDVWDB.N_SALES_ORDER_TYPE NSOT
   ON (NSOT.BK_ORDER_TYPE_NAME = NSORDTV.BK_ORDER_TYPE_NAME)*/
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV ORD_LN_V
    ON(NSOLN.SALES_ORDER_LINE_KEY = ORD_LN_V.SALES_ORDER_LINE_KEY
    AND ORD_LN_V.END_TV_DTM = '3500-01-01 00:00:00')
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT
    ON(NSOT.BK_ORDER_TYPE_NAME = ORD_LN_V.SO_LINE_TYPE_NAME) 
   /* START: ADDED AS PART OF AUS MIGRATION */
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT_Y
    ON(NSOT_Y.BK_ORDER_TYPE_NAME = NSORDTV.BK_ORDER_TYPE_NAME)
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSORDTV_CAL
   ON ( WIOXRT.ORDER_HEADER_ID = NSORDTV_CAL.SK_SALES_ORDER_HEADER_ID_INT  
   AND EL_GNAME.ORIG_SS_CD = NSORDTV_CAL.SS_CODE)
   /*LEFT OUTER JOIN SLSORDVWDB.N_SALES_ORDER_TYPE NSOT
   ON (NSOT.BK_ORDER_TYPE_NAME = NSORDTV.BK_ORDER_TYPE_NAME)*/
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV ORD_LN_V_CAL
    ON(NSOLN_CAL.SALES_ORDER_LINE_KEY = ORD_LN_V_CAL.SALES_ORDER_LINE_KEY
    AND ORD_LN_V_CAL.END_TV_DTM = '3500-01-01 00:00:00')
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT_CAL
    ON(NSOT_CAL.BK_ORDER_TYPE_NAME = ORD_LN_V_CAL.SO_LINE_TYPE_NAME) 
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT_CAL_Y
    ON(NSOT_CAL_Y.BK_ORDER_TYPE_NAME = NSORDTV_CAL.BK_ORDER_TYPE_NAME)  
   /* END: ADDED AS PART OF AUS MIGRATION */ 
   
   
   LEFT OUTER JOIN $$ETLVWDB.SM_AR_TRX_LINE SMATL
   ON ( WIOXRT.CUSTOMER_TRX_LINE_ID = SMATL.SK_CUSTOMER_TRX_LINE_ID_LINT
   AND NSSC.SOURCE_SYSTEM_CODE = SMATL.SS_CODE )
   LEFT OUTER JOIN $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL
   ON (SMATL.AR_TRX_LINE_KEY = NATIL.AR_TRX_LINE_KEY)
   INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL
   ON ( EORCTL.CUSTOMER_TRX_LINE_ID = WIOXRT.CUSTOMER_TRX_LINE_ID 
   AND EORCTL.GLOBAL_NAME  = WIOXRT.GLOBAL_NAME)
   LEFT JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON(NATL.AR_TRX_LINE_KEY = SMATL.AR_TRX_LINE_KEY)
   /*
   LEFT OUTER JOIN FINLGLVWDB.N_AR_CMDM_ADJ_REQUEST NACAR 
     ON ( NACAR.BK_SAF_ID_INT = NATL.BK_SAF_ID_INT 
     AND NACAR.SET_OF_BOOKS_KEY = NATL.BK_SAF_SET_OF_BOOKS_KEY
     AND NACAR.BK_COMPANY_CD  = NATL.BK_SAF_COMPANY_CODE  )
    */
   LEFT OUTER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX NACAR
   ON NACAR.CUSTOMER_TRX_ID  = WIOXRT.CUSTOMER_TRX_ID
   AND NACAR.GLOBAL_NAME     = WIOXRT.GLOBAL_NAME 
     
   LEFT OUTER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS 
    ON NAT.AR_BATCH_SOURCE_KEY = NABS.AR_BATCH_SOURCE_KEY
    
     INNER  JOIN $$ETLVWDB.EV_SRVC_FIN_ACCOUNT_PID_MAP EV
   ON (EV.BK_FINANCIAL_ACCOUNT_CODE=WIOXRT.ACCOUNT_CODE)                         
 /* PRMADDAL: ADDED TO DERIVE LIST PRICE AND PURCHASE ADJUSTMENT AMT AS PART OF Q1FY18 SOT XAAS*/
    LEFT OUTER JOIN $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
   ON (NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT = WIOXRT.CUST_TRX_LINE_GL_DIST_ID
   AND NATLGD.SS_CODE=NSSC.SOURCE_SYSTEM_CODE)
   /*LEFT OUTER JOIN (SELECT * FROM $$EXAASVWDB.N_EXAAS_SUBSCR_SO_LINE WHERE ORDER_LINE_STATUS_CD<>'Deleted') SOL
     ON NATL.RU_EXAAS_SUBSCRIPTION_SOL_KEY=SOL.EXAAS_SUBSCRIPTION_SOL_KEY 
    LEFT OUTER JOIN $$EXAASVWDB.N_EXAAS_SUBSCR_SO SO
     ON SOL.EXAAS_SUBSCRIPTION_SO_KEY=SO.EXAAS_SUBSCRIPTION_SO_KEY */
  LEFT OUTER JOIN (SELECT * FROM $$SLSORDVWDB.N_SALES_ORDER_LINE WHERE LINE_STATUS_CD<>'Deleted') SOL
     ON NATL.RU_EXAAS_SUBSCRIPTION_SOL_KEY=SOL.SALES_ORDER_LINE_KEY 
    LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER SO
     ON SOL.SALES_ORDER_KEY=SO.SALES_ORDER_KEY 
  /*SIGORANT: MODIFIED AS PART OF Q2FY18 */
    LEFT OUTER JOIN $$COMREFVWDB.N_SUBSCRIPTION_PRDT_PRC_TV NSPT
     ON(    
     NSPT.PRODUCT_KEY = NPT.ITEM_KEY
     AND NSPT.BK_PRICE_LIST_NAME = SO.BK_PRICE_LIST_NAME
     AND NSPT.BK_VERSION_NUM_INT=SOL.PRICE_VERSION_NUM_INT
     AND  NSPT.PRICING_FORMULA_CD<>'Rate Table')
   LEFT OUTER JOIN $$COMREFVWDB.N_SUBSCRIPTION_PRDT_PRC_TV NSPT_DEF
    ON(    
     NSPT_DEF.PRODUCT_KEY = NP.ITEM_KEY
     AND NSPT_DEF.BK_VERSION_NUM_INT=SOL.PRICE_VERSION_NUM_INT
     AND NSPT_DEF.BK_PRICE_LIST_NAME = 'Global Price List - US' 
     AND NSPT_DEF.PRICING_FORMULA_CD<>'Rate Table')
    LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE  NSOL
    ON (SSOL.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY) 
    LEFT OUTER JOIN $$SLSORDVWDB.N_SO_LINE_PRICE_ADJUSTMENT NSPA
    ON (NSOL.SALES_ORDER_LINE_KEY=NSPA.SALES_ORDER_LINE_KEY
      AND NSPA.SPECIAL_DISCOUNT_DESCR='Purchase Adjustment' AND NSPA.SS_CD<>'OPL')
   WHERE NSSC.GLOBAL_NAME='CG'


Post SQL : 



Target19 Name : WI_DRVD_NCR_REV_TRX_FOR_BKG_CG_6


Pre SQL : 



Post SQL : 



Source20 Name : SQ_WI_OM_WI_DRVD_NCR_REV_TRX_FOR_BKG_P_6_CDC


Pre SQL : 



SQL Query : 
SELECT
  WIOXRT.TRANSACTION_SEQUENCE_ID      TRANSACTION_SEQUENCE_ID,
  WIOXRT.GLOBAL_NAME       GLOBAL_NAME, 
  WIOXRT.TRANSACTION_DATE       TRANSACTION_DATE,
  WIOXRT.ACCOUNT_CLASS       ACCOUNT_CLASS_CODE,
  WIOXRT.ACCTD_AMOUNT       GL_DISTRIBUTION_FUNCTIONAL_AMT,
  EOCATA.ADJ_TYPE_NAME       ADJUSTMENT_TYPE_CODE,
  WIOXRT.AMOUNT        GL_DISTRIB_TRANSACTIONAL_AMT,
  WIOXRT.CREATED_BY       CREATED_BY_INT,
   /*commented for OAQ1fy15
  NATIL.RU_DEBIT_EXTENDED_AMOUNT + NATIL.RU_CREDIT_EXTENDED_AMOUNT AR_TRX_LINE_TRANSACTIONAL_AMT,*/
  CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (NATIL.RU_OFFER_ATRBTD_DBT_TRX_AMT + NATIL.RU_OFFER_ATRBTD_CRDT_TRX_AMT )
   WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'N' THEN (NATIL.RU_DEBIT_EXTENDED_AMOUNT + NATIL.RU_CREDIT_EXTENDED_AMOUNT )
   END  AR_TRX_LINE_TRANSACTIONAL_AMT,
  WIOXRT.EXTRACT_TYPE       EXTRACT_TYPE_CODE,
  WIOXRT.FORWARD_REVERSE_FLAG      FORWARD_REVERSE_CODE,
  WIOXRT.GL_DATE        GL_DATETIME,
  WIOXRT.GL_DATE        GL_DATE,
  WIOXRT.GL_POSTED_DATE       GL_POSTED_DATE,
  WIOXRT.TRANSACTION_GROUPING_TYPE     TRANSACTION_GROUPING_TYPE_CODE,
  WIOXRT.LAST_UPDATED_BY       LAST_UPDATED_BY_INT,
  WIOXRT.LATEST_RECORD_FLAG      LAST_RECORD_FLAG,
  WIOXRT.LINE_TYPE       LINE_TYPE_CODE,
  WIOXRT.QUOTA_FLAG       QUOTA_FLAG,  
  WIOXRT.REBATE_AMOUNT       REBATE_TRANSACTIONAL_AMOUNT,
  CASE WHEN  WIOXRT.REQUEST_ID = -999  THEN 'Y' ELSE 'N' END MANUAL_TRANSACTION_FLAG,
  WIOXRT.RULE_START_DATE       RULE_START_DATETIME, 
  WIOXRT.TRANSACTION_DATE       TRANSACTION_DATETIME,
  /* rchettri: added as a part of Lot-2A CG1 implementation 
  CASE WHEN EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' 
      AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%' 
     THEN WIOXRT.TRANSACTION_QUANTITY 
    ELSE 0 
  END TRANSACTION_QUANTITY,
  */
  CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
      AND COALESCE(NSOT.BK_ORDER_TYPE_NAME ,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' 
      AND UPPER(COALESCE(NSORDTV.SALES_ORDER_CATEGORY_TYPE,NSORDTV_CAL.SALES_ORDER_CATEGORY_TYPE)) <> 'MIXED'
     THEN WIOXRT.TRANSACTION_QUANTITY 
    WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY'  OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
      AND UPPER(NSORDTV.SALES_ORDER_CATEGORY_TYPE) in ('MIXED', 'RETURN')
      AND UPPER(NSOLN.SALES_ORDER_CATEGORY_TYPE) = 'RETURN'
     THEN WIOXRT.TRANSACTION_QUANTITY   
    ELSE 0 
  END TRANSACTION_QUANTITY,
  WIOXRT.TRX_DATE        AR_TRX_DATETIME,
  WIOXRT.TRX_NUMBER       AR_TRX_NUMBER,
  WIOXRT.TRX_TYPE        AR_TRX_TYPE_CODE,
  NATIL.RU_CREDIT_UNIT_AMOUNT + NATIL.RU_DEBIT_UNIT_AMOUNT  UNIT_SELLING_PRICE_TRX_AMT,
  NATIL.RU_UNIT_STD_PRICE_LOCAL_AMT     UNIT_STANDARD_PRICE_TRX_AMT,
  WIOXRT.INVOICE_CURRENCY_CODE      PD_INVOICE_CURRENCY_CODE, 
  CASE WHEN WIOXRT.TRANSACTION_GROUPING_TYPE ='O' THEN CAST(WIOXRT.GL_DATE AS DATE) ELSE CAST(WIOXRT.TRANSACTION_DATE AS DATE) END DV_FISCAL_DATE,
  'N'         DV_BKGS_ITEM_TYPE_CODE_FLAG ,
  /* rchettri: added as a part of Lot-2A CG1 implementation 
  CASE WHEN SUBSTR(NSORDTV.BK_ORDER_TYPE_NAME,1,8)='Standard' AND NSORDTV.SHIPMENT_PRIORITY_CODE  IN('Demo' ,'Int """""""""""""""""""""""""""""""" l Demo','Intl Demo') THEN 'Y' ELSE 'N' END DV_BKGS_INTL_DEMO_FLAG, */
  '=' DV_BKGS_INTL_DEMO_FLAG, 
  
  /* rchettri: added as a part of Lot-2A CG1 implementation 
  CASE WHEN SUBSTR(NSOT.DV_SALES_ORDER_TYPE_ALT_NAME,1,12)='Replacements' AND NSORDTV.SHIPMENT_PRIORITY_CODE IN ( 'Demo','Evaluation','Int"""""""""""""""""""""""""""""""" l Demo','Intl Demo') THEN 'Y' ELSE 'N' END DV_BKGS_REPL_DEMO_FLAG,
  */
  '=' DV_BKGS_REPL_DEMO_FLAG , 
  
  /*CASE WHEN COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) = '='  OR COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) IS NULL THEN 'Y' ELSE COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) END DV_BKGS_REVENUE_FLAG,*/
  /*CASE WHEN COALESCE(ORD_LN_V.ORIGINATED_QTC_VIA_CG1_FLG,ORD_LN_V_CAL.ORIGINATED_QTC_VIA_CG1_FLG) = 'Y' THEN
   CASE WHEN COALESCE(NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG ,NSOT_CAL_Y.SO_TYPE_REVENUE_GEN_FLAG) = '=' 
    OR COALESCE(NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL_Y.SO_TYPE_REVENUE_GEN_FLAG) IS NULL THEN 'Y' 
   ELSE COALESCE(NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL_Y.SO_TYPE_REVENUE_GEN_FLAG) 
   END 
  ELSE
   CASE WHEN COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG ,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) = '=' 
    OR COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) IS NULL THEN 'Y' 
   ELSE COALESCE(NSOT.SO_TYPE_REVENUE_GEN_FLAG,NSOT_CAL.SO_TYPE_REVENUE_GEN_FLAG) 
   END 
  END DV_BKGS_REVENUE_FLAG,
  */
 /*   'Y' AS DV_BKGS_REVENUE_FLAG,   */
 
 CASE WHEN (NSOLN.SS_CODE = 'CDC' AND NSORDTV.ORIGINATED_QTC_VIA_CG1_FLG = 'Y') OR (NSORDTV.SS_CODE <> 'CDC')   THEN  CASE WHEN NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG = '=' OR NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG IS NULL THEN 'Y' ELSE NSOT_Y.SO_TYPE_REVENUE_GEN_FLAG END 
   ELSE CASE WHEN NSOT.SO_TYPE_REVENUE_GEN_FLAG = '=' OR NSOT.SO_TYPE_REVENUE_GEN_FLAG IS NULL THEN 'Y' ELSE NSOT.SO_TYPE_REVENUE_GEN_FLAG END END
 as DV_BKGS_REVENUE_FLAG,  /*     added as part of Cf LSS CR post Q3FY15: If Order got created in old 11i system then flag will be derived based on order table otherwise if order gets created in new CG system, then flag will be derived from order line table*/
 
 
  /* RCHETTRI : REBOK CHANGES 
  CASE WHEN (UCH.TERRITORY_ID IS NULL OR UCH.TERRITORY_ID = -999) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG,
  */
  /*CASE WHEN (WIOXRT.SALES_TERRITORY_KEY = 73106 ) OR (UCH.TERRITORY_ID IS NULL OR UCH.TERRITORY_ID = -999) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG ,*/
  CASE WHEN (NST.SALES_TERRITORY_KEY  IS NULL ) THEN 'Y' ELSE 'N' END DV_BKGS_OVERLAY_FLAG ,
  /*CASE WHEN (WIOXRT.SALESREP_ID = -999 OR WIOXRT.SALES_REP_NUMBER   = '99998' ) THEN 'Y'ELSE 'N' END DV_BKGS_SALESREP_FLAG ,*/
  CASE WHEN (WIOXRT.SALES_REP_NUMBER = '-999' OR WIOXRT.SALES_REP_NUMBER IS NULL OR WIOXRT.SALES_REP_NUMBER = 'UNKNOWN' ) THEN 'Y'ELSE 'N' END DV_BKGS_SALESREP_FLAG ,
  NULL         DV_BKGS_IC_REVENUE_FLAG,
  CASE WHEN NPT.BK_PRODUCT_TYPE_ID='CHARGES' THEN 'Y' ELSE 'N' END DV_BKGS_CHARGES_FLAG,
  CASE WHEN SUBSTR(NPT.BK_PRODUCT_ID,1,4)='MISC' THEN 'Y' ELSE 'N' END DV_BKGS_MISC_FLAG,
  
   /*CASE WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,2) ='41' THEN 'Y' 
   WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,2) ='42' THEN 'Y'
   WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,3)='433' THEN 'Y' 
   ELSE 'N' 
   END DV_BKGS_SERVICE_FLAG,*/ /*knarlapu: Serv_Flg poplation as in rev flow*/
   
  CASE WHEN NPT.ITEM_KEY = -998 THEN  
   CASE WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,2) ='41' THEN 'Y'   WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,2) ='42' THEN 'Y'  WHEN SUBSTR(WIOXRT.ACCOUNT_CODE,1,3)='433' THEN 'Y' 
   ELSE 'N' END
   ELSE 
   CASE WHEN NPT.GOODS_OR_SERVICE_TYPE = 'SERVICE' THEN 'Y' 
   ELSE 'N' END  
  END DV_BKGS_SERVICE_FLAG, /*knarlapu: Serv_Flg poplation as in rev flow*/
   
  CASE WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' 
  THEN CAST(EOCRATA.ADJUSTMENT_REVENUE_USD * COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 AS DECIMAL(18,6)) WHEN WIOXRT.EXTRACT_TYPE IN ('INV' ,'REV','AR_ADJUSTMENT') 
  THEN CAST(((CAST (COALESCE(WIOXRT.SPLIT_PERCENT,100.000000)*
  (COALESCE(WIOXRT.AMOUNT,0.000000)- COALESCE(WIOXRT.REBATE_AMOUNT,0.000000)) AS DECIMAL(18,6)))* 
  (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
  NCCDR.PL_CONVERSION_RATE END)/100.000000) AS DECIMAL(18,6))
  ELSE 0.000000 END DV_BKGS_COMP_US_NET_PRC_AMT,
  
  CASE WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' THEN 0 
    ELSE  ( CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' THEN 0 
         ELSE /*ADDED AS PART OF Q1FY18 LIST_PRICE DRVN FOR XAAS DATA*/
  ( CASE WHEN EORCTL.INTERFACE_LINE_CONTEXT IN  ('SALES ADJUSTMENTS-WEBEX','WEBEX','ICMS-ADJ-WEBEX','XAAS','ICMS-XAAS','PP-XAAS') 
                            /*OR UPPER(NABS.BK_BATCH_SOURCE_NAME) IN ('XAAS','ICMS-XAAS') */
							OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE ANY ('XAAS%','ICMS-XAAS%','CSP-MARKETPLACE') /*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
                         THEN  CAST( ( ( 
						 (CASE WHEN NSPT.PRODUCT_KEY>0 THEN (COALESCE(NSPT.BASE_PRICE,0)/(CASE WHEN NSPT.PRICING_TERM_MTHS_CNT=0 THEN 1 ELSE COALESCE(NSPT.PRICING_TERM_MTHS_CNT,1) END)) 
		WHEN NSPT_DEF.PRODUCT_KEY>0 THEN (COALESCE(NSPT.LIST_PRICE_LOCAL_AMT,0)/(CASE WHEN NSPT.PRICING_TERM_MTHS_CNT=0 THEN 1 ELSE COALESCE(NSPT.PRICING_TERM_MTHS_CNT,1) END)) ELSE 0 END) 
               * (CASE WHEN NP.RU_CHARGE_TYPE_CD='Amortized One Time' 
                 THEN CAST(1 AS DECIMAL(26,7)) 
            ELSE CAST(ROUND(COALESCE(MONTHS_BETWEEN(NATIL.RU_REV_TRNSFR_CNTRCT_END_DT,NATIL.RU_REV_TRNSFR_CNTRCT_START_DT),0)) AS DECIMAL(26,7)) END) ) * 
          (CASE WHEN (NATT.AR_TRX_TYPE_SHORT_CODE = 'CM'  AND UPPER(NACAR.INTERFACE_HEADER_ATTRIBUTE10) = 'CREDIT_REBILL')
                THEN DNATIL.TRANSACTION_QUANTITY ELSE 0 END) * WIOXRT.SPLIT_PERCENT)/100 AS DECIMAL(18,6))
    ELSE                  
    CAST( ( CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NPPT.LIST_PRICE_AMOUNT ELSE NPPT.LIST_PRICE_AMOUNT  END *
             /* rchettri: added as a part of Lot-2A CG1 implementation 
             (  CASE WHEN EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%' 
               THEN WIOXRT.TRANSACTION_QUANTITY
  
               WHEN EORCTL.INTERFACE_LINE_CONTEXT IN ('SALES ADJUSTMENTS'  ,'ICMS-ADJ')
                  AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM'  AND NACAR.SAF_TYPE_CD = 'CREDIT_REBILL' 
               THEN WIOXRT.TRANSACTION_QUANTITY 
  
               ELSE 0
              END)
              */
             (  CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
                 AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' 
                 AND UPPER(COALESCE(NSORDTV.SALES_ORDER_CATEGORY_TYPE,NSORDTV_CAL.SALES_ORDER_CATEGORY_TYPE)) <> 'MIXED'              
               THEN DNATIL.TRANSACTION_QUANTITY /*OAQ1FY15*/
  
               WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
                  AND UPPER(NSORDTV.SALES_ORDER_CATEGORY_TYPE) in ('MIXED', 'RETURN') 
                  AND UPPER(NSOLN.SALES_ORDER_CATEGORY_TYPE) ='RETURN'
               THEN DNATIL.TRANSACTION_QUANTITY
  
               WHEN (EORCTL.INTERFACE_LINE_CONTEXT IN ( 'SALES ADJUSTMENTS'  , 'DISPUTE','ICMS-ADJ') OR UPPER(NABS.BK_BATCH_SOURCE_NAME) IN ('DISPUTE','ICMS-ADJ'))
                  AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM'  AND /* NACAR.SAF_TYPE_CD = 'CREDIT_REBILL' */ UPPER(NACAR.INTERFACE_HEADER_ATTRIBUTE10) = 'CREDIT_REBILL'
               THEN DNATIL.TRANSACTION_QUANTITY 
      
      WHEN (EORCTL.INTERFACE_LINE_CONTEXT ='ICMS-ADJ' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) ='ICMS-ADJ')
                AND NATT.AR_TRX_TYPE_SHORT_CODE = 'INV'  AND  UPPER(NACAR.INTERFACE_HEADER_ATTRIBUTE10) = 'DEBIT_REBILL'
                THEN DNATIL.TRANSACTION_QUANTITY  /*knarlapu: Adding DEBIT_REBILL to CARBT FLOW*/
  
               ELSE 0
              END)
            *WIOXRT.SPLIT_PERCENT)/100 AS DECIMAL(18,6)) END ) 
       END
      ) 
  END DV_BKGS_COMP_US_LST_PRC_AMT,
  CASE WHEN NPT.GOODS_OR_SERVICE_TYPE='SERVICE' THEN 0 
    ELSE  CASE WHEN ( COALESCE(NSORDTV.PURCHASE_ORDER_TYPE_CODE,NSORDTV_CAL.PURCHASE_ORDER_TYPE_CODE,'~') = 'Demo/Eval'  
          OR 
          (COALESCE(NSORDTV.PURCHASE_ORDER_TYPE_CODE,NSORDTV_CAL.PURCHASE_ORDER_TYPE_CODE,'~') <> 'Demo/Eval' 
           AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) NOT LIKE   'Invoice Only%' 
          )
          )
        THEN ( CASE  WHEN WIOXRT.EXTRACT_TYPE='CORP_ADJ' 
            THEN EOCRATA.ADJUSTMENT_COGS_USD
              * COALESCE(WIOXRT.SPLIT_PERCENT,100)/100 
            ELSE WDNCUC.DV_BKGS_COMP_US_COST_AMT 
              *
              ( CASE  
                 /* rchettri: added as a part of Lot-2A CG1 implementation 
                 WHEN EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' 
                   AND NSOT.BK_ORDER_TYPE_NAME like '%RMA%' 
                 THEN WIOXRT.TRANSACTION_QUANTITY  
                 */
                 WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
                   AND (  (COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND UPPER(COALESCE(NSORDTV.SALES_ORDER_CATEGORY_TYPE,NSORDTV_CAL.SALES_ORDER_CATEGORY_TYPE)) <> 'MIXED')  
                     OR 
                     (UPPER(NSORDTV.SALES_ORDER_CATEGORY_TYPE) in ('MIXED', 'RETURN') AND UPPER(NSOLN.SALES_ORDER_CATEGORY_TYPE) =  'RETURN' )
                    )
                 THEN WIOXRT.TRANSACTION_QUANTITY  
  
                 ELSE 0 
               END
              ) 
          END ) 
        ELSE 0.0000000 
      END 
  END DV_BKGS_COMP_US_COST_AMT,
  
  0         DV_BKGS_EXTENDED_QUANTITY,
  WIOXRT.SPLIT_PERCENT       SALES_COMMISSION_PERCENTAGE,
  0         DV_COMP_US_STANDARD_PRICE_AMT ,
   CASE WHEN NPT.ITEM_KEY = -998 THEN (CASE WHEN DV_BKGS_SERVICE_FLAG='Y' THEN EV.ITEM_KEY ELSE -998  /*CM_ADJ_PROD*/  END)  ELSE NPT.ITEM_KEY END PRODUCT_KEY, /*knarlapu: prod_key poplation as in rev flow*/
  
  /* rchettri
  CASE WHEN NSORDTV.SALES_ORDER_KEY in (-9999,-8888) THEN
  (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.SALES_ORDER_KEY ELSE (CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END)   END)
  WHEN NSORDTV.SALES_ORDER_KEY IS NULL  THEN 
  (CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END)  
  ELSE NSORDTV.SALES_ORDER_KEY END SALES_ORDER_KEY, */
  COALESCE(CASE WHEN COALESCE(NSORDTV.SALES_ORDER_KEY,NSORDTV_CAL.SALES_ORDER_KEY) = -7777 THEN
  (CASE WHEN COALESCE(NSOLN.SALES_ORDER_LINE_KEY,NSOLN_CAL.SALES_ORDER_LINE_KEY) IS NOT NULL THEN COALESCE(NSOLN.SALES_ORDER_KEY,NSOLN_CAL.SALES_ORDER_KEY) END)
  WHEN COALESCE(NSORDTV.SALES_ORDER_KEY,NSORDTV_CAL.SALES_ORDER_KEY) IS NULL THEN -7777
  ELSE COALESCE(NSORDTV.SALES_ORDER_KEY,NSORDTV_CAL.SALES_ORDER_KEY) END,-7777) SALES_ORDER_KEY,
  
  /*CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NULL THEN ( CASE WHEN NSSC.SOURCE_SYSTEM_CODE = 'QTC' THEN -9999 ELSE -8888 END) ELSE NSOLN.SALES_ORDER_LINE_KEY END SALES_ORDER_LINE_KEY,*/
  COALESCE(NSOLN.SALES_ORDER_LINE_KEY,NSOLN_CAL.SALES_ORDER_LINE_KEY,-7777) SALES_ORDER_LINE_KEY,
  
 /*START: Added as part of CF-LSS Q3FY15  */
 /* CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') 
  THEN NAT.SHIP_TO_CUSTOMER_KEY 
  ELSE 
  COALESCE(NSORDTV.SHIP_TO_CUSTOMER_KEY,NSORDTV_CAL.SHIP_TO_CUSTOMER_KEY, -999) END SHIP_TO_CUSTOMER_KEY,*/
  CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') 
  THEN  CASE WHEN NATL.SHIP_TO_CUSTOMER_KEY > 0 THEN NATL.SHIP_TO_CUSTOMER_KEY ELSE NAT.SHIP_TO_CUSTOMER_KEY END 
  ELSE  COALESCE(NSORDTV.SHIP_TO_CUSTOMER_KEY,NSORDTV_CAL.SHIP_TO_CUSTOMER_KEY, -999) END SHIP_TO_CUSTOMER_KEY,
  /*END: Added as part of CF-LSS Q3FY15  */
/*PRMADDAL: Changed derivation for XAAS Data*/ 
 
CASE WHEN (WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') AND
          /*(NABS.BK_BATCH_SOURCE_NAME  IN ('ICMS-XAAS','PP-XAAS','XAAS'))*/
		  (NABS.BK_BATCH_SOURCE_NAME  LIKE ANY ('ICMS-XAAS%','PP-XAAS%','XAAS%','CSP-MARKETPLACE')/*ADDED AS PART OF Q1FY19 CE-BRAZIL*/)) THEN NATL1.SOLD_TO_CUST_ACCT_KEY
     WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') AND NAT.SOLD_TO_CUSTOMER_KEY <> -999 THEN NAT.SOLD_TO_CUSTOMER_KEY ELSE 
  COALESCE(NSORDTV.SOLD_TO_CUSTOMER_KEY,NSORDTV_CAL.SOLD_TO_CUSTOMER_KEY,-999) END SOLD_TO_CUSTOMER_KEY ,
   CASE WHEN WIOXRT.EXTRACT_TYPE IN ('REV','INV','AR_ADJUSTMENT') THEN NAT.BILL_TO_CUSTOMER_KEY 
  ELSE COALESCE(NSORDTV.BILL_TO_CUSTOMER_KEY,NSORDTV_CAL.BILL_TO_CUSTOMER_KEY, -999) END  BILL_TO_CUSTOMER_KEY,
  
  /* rchettri
  CASE 
  WHEN NSORDTV.SALES_ORDER_KEY in (-9999,-8888) THEN
  (CASE WHEN NSOLN.SALES_ORDER_LINE_KEY IS NOT NULL THEN NSOLN.BK_SO_NUMBER_INT ELSE -9999 END)
  WHEN NSORDTV.BK_SO_NUMBER_INT IS NULL THEN -9999 
  ELSE NSORDTV.BK_SO_NUMBER_INT  END REPORTED_SALES_ORDER_NUM_INT  , */
  CASE 
  WHEN COALESCE(NSORDTV.SALES_ORDER_KEY,NSORDTV_CAL.SALES_ORDER_KEY) = -7777 THEN
  (CASE WHEN COALESCE(NSOLN.SALES_ORDER_LINE_KEY,NSOLN_CAL.SALES_ORDER_LINE_KEY) IS NOT NULL THEN COALESCE(NSOLN.BK_SO_NUMBER_INT,NSOLN_CAL.BK_SO_NUMBER_INT) END)
  WHEN COALESCE(NSORDTV.BK_SO_NUMBER_INT,NSORDTV_CAL.BK_SO_NUMBER_INT) IS NULL THEN -9999 
  ELSE COALESCE(NSORDTV.BK_SO_NUMBER_INT,NSORDTV_CAL.BK_SO_NUMBER_INT) END REPORTED_SALES_ORDER_NUM_INT ,
  
  CASE WHEN NCCDR.PL_CONVERSION_RATE  =0 OR NCCDR.PL_CONVERSION_RATE  IS NULL THEN 1 ELSE NCCDR.PL_CONVERSION_RATE  END CONVERSION_RT,
  WIOXRT.SK_LINE_SEQ_ID_INT,
  WIOXRT.SCA_SOURCE_TYPE_CD,
  WIOXRT.DEFAULT_SC_FLAG,
  WIOXRT.DV_TRANSACTION_KEY,
  WIOXRT.DV_TRANSACTION_SOURCE_CD,
  WIOXRT.SK_SC_AGENT_ID_INT,
  CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
 AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
 THEN 
     CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN(EL.ATTRIBUTE8/100.000000) * NSOLN.UNIT_LIST_PRICE ELSE NSOLN.UNIT_LIST_PRICE END  * DNATIL.TRANSACTION_QUANTITY*(WIOXRT.SPLIT_PERCENT/100)  AS DECIMAL(18,6))  
 ELSE 0
 END AS DV_LOCAL_EXTND_LIST_PRICE_AMT,
  CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
  AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
  THEN 
   CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NSOLN.UNIT_LIST_PRICE ELSE  NSOLN.UNIT_LIST_PRICE END *(WIOXRT.SPLIT_PERCENT/100) AS DECIMAL(18,6))
  ELSE 0
  END AS LOCAL_UNIT_LIST_PRICE_AMT1
 ,CAST(LOCAL_UNIT_LIST_PRICE_AMT1* (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
   CONVERSION_RT END) AS DECIMAL(18,6)) AS DV_UNIT_LIST_PRICE_USD_AMT
 ,CASE WHEN WIOXRT.EXTRACT_TYPE IN ('INV' ,'REV')
       THEN CAST((
	           CAST(( 
			   /*CASE WHEN NABS.BK_BATCH_SOURCE_NAME IN ('ICMS-XAAS','PP-XAAS','XAAS') */
			   CASE WHEN NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('ICMS-XAAS%','PP-XAAS%','XAAS%','CSP-MARKETPLACE') /*ADDED AS PART OF Q1FY19 CE-BRAZIL*/
			   
			        THEN(CASE WHEN NATT.AR_TRX_TYPE_SHORT_CODE IN ('INV')
       					      THEN (-1) * (NATIL1.DEBIT_PURC_ADJSTMT_TRXL_AMT)
                              ELSE 0 END )  
                ELSE 
				((CASE WHEN (NSOL.UNIT_SALE_PRICE IS NULL OR NSOL.UNIT_SALE_PRICE=0) THEN 0
				      WHEN NATT.AR_TRX_TYPE_SHORT_CODE IN ('INV')
				      THEN (CAST(NATIL1.RU_DEBIT_UNIT_AMOUNT/NSOL.UNIT_SALE_PRICE AS DECIMAL(26,7))
					   * NATIL1.RU_DEBIT_QUANTITY)
				      WHEN (COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) LIKE '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM')
					  THEN (CAST(NATIL1.RU_CREDIT_UNIT_AMOUNT/NSOL.UNIT_SALE_PRICE AS DECIMAL(26,7))
					   * NATIL1.RU_CREDIT_QUANTITY)
					  ELSE 0 END) * COALESCE(NSPA.ADJSTD_USD_AMT,0))
				END) AS DECIMAL(26,7)) *
    CAST((COALESCE(WIOXRT.SPLIT_PERCENT,100.0000000)/100)AS DECIMAL(26,7)) *
	(COALESCE(CAST(NATLGD.TRANSACTION_LINE_PERCENTAGE AS DECIMAL(27,12)),100.0000000)/100) *
	(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) ELSE 1 END) *
    CAST((CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1 ELSE 
             CONVERSION_RT END) AS DECIMAL(26,7))) AS DECIMAL(26,7))
   ELSE 0.0000000 END DV_COMP_US_NET_PURC_ADJ_AMT, /*Added as part of SOT XAAS Q1FY18*/
  WIOXRT.SALES_MOTION_CD /* Added as part of SALES OCTRelFY18 */
,CAST((CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
  AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
  THEN 
   CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NSOLN.ORIG_UNIT_LST_PRC_TRXL_AMT ELSE  NSOLN.ORIG_UNIT_LST_PRC_TRXL_AMT END *(WIOXRT.SPLIT_PERCENT/100) AS DECIMAL(18,6))
  ELSE 0
  END)* (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
   CONVERSION_RT END) AS DECIMAL(18,6)) AS ORIG_UNIT_LST_PRC_USD_AMT
   
 ,CAST((CASE WHEN (EORCTL.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' OR UPPER(NABS.BK_BATCH_SOURCE_NAME) LIKE 'ORDER MANAGEMENT%')
  AND COALESCE(NSOT.BK_ORDER_TYPE_NAME,NSOT_CAL.BK_ORDER_TYPE_NAME) like '%RMA%' AND NATT.AR_TRX_TYPE_SHORT_CODE = 'CM' 
  THEN 
   CAST(CASE WHEN NATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN (EL.ATTRIBUTE8/100.000000) * NSOLN.ORIG_UNIT_LST_PRC_TRXL_AMT ELSE  NSOLN.ORIG_UNIT_LST_PRC_TRXL_AMT END *(DNATIL.TRANSACTION_QUANTITY)*(WIOXRT.SPLIT_PERCENT/100) AS DECIMAL(18,6))
  ELSE 0
  END)* (CASE WHEN WIOXRT.INVOICE_CURRENCY_CODE='USD' THEN 1.00000000000 ELSE 
   CONVERSION_RT END) AS DECIMAL(18,6)) AS ORIG_EXTD_LST_PRC_USD_AMT
    FROM 
  $$STGDB.WI_OM_XXNCR_REV_CG WIOXRT
  INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
  ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
  INNER JOIN $$ETLVWDB.SM_AR_TRX SMARTRX
  ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
  AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NAT
  ON (SMARTRX.AR_TRX_KEY = NAT.AR_TRX_KEY)
 
  /*START: Added as part of CF-LSS Q3FY15  */
 INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SATL
  ON (WIOXRT.CUSTOMER_TRX_LINE_ID = SATL.SK_CUSTOMER_TRX_LINE_ID_LINT
  AND NSSC.SOURCE_SYSTEM_CODE=SATL.SS_CODE)
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL1
  ON (NATL1.AR_TRX_LINE_KEY=SATL.AR_TRX_LINE_KEY) 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL1
 ON (NATL1.AR_TRX_LINE_KEY=NATIL1.AR_TRX_LINE_KEY)
 
 /*END: Added as part of CF-LSS Q3FY15  */
  
  INNER JOIN $$FINLGLVWDB.N_AR_TRX_TYPE NATT
  ON (NATT.BK_COMPANY_CODE = NAT.BK_COMPANY_CODE
  AND NATT.BK_SET_OF_BOOKS_KEY = NAT.BK_SET_OF_BOOKS_KEY           
  AND NATT.BK_AR_TRX_TYPE_CODE = NAT.BK_AR_TRX_TYPE_CODE)
  LEFT OUTER JOIN $$ETLVWDB.EL_OM_CFI_REV_ADJ_TRX_ALL EOCRATA 
  ON ( EOCRATA.REV_ADJ_TRX_ID = WIOXRT.ADJUSTMENT_ID 
  AND EOCRATA.GLOBAL_NAME = WIOXRT.GLOBAL_NAME
  AND WIOXRT.EXTRACT_TYPE IN('CORP_ADJ','INV' ,'REV') ) 
  LEFT OUTER JOIN $$ETLVWDB.EL_OM_CFI_ADJ_TYPE_ALL EOCATA 
  ON (EOCATA.ADJ_TYPE_ID = EOCRATA.ADJ_TYPE_ID
  AND EOCATA.GLOBAL_NAME = EOCRATA.GLOBAL_NAME)
  /*
  LEFT OUTER JOIN ETLVWDB.EL_SALES_TERRITORY UCH 
  ON ( UCH.TERRITORY_ID = WIOXRT.TERRITORY_ID
  AND UCH.GLOBAL_NAME = WIOXRT.GLOBAL_NAME 
  AND UCH.HIERARCHY_TYPE_CODE LIKE 'CORP%.%REVENUE') 
  */
  LEFT OUTER JOIN $$COMREFVWDB.N_SALES_TERRITORY_TV NST
  ON WIOXRT.SALES_TERRITORY_KEY = NST.SALES_TERRITORY_KEY
  AND NST.END_TV_DATE = '3500-01-01' 
  AND NST.BK_SALES_HIERARCHY_TYPE_CODE LIKE 'CORP%.%REVENUE'
                                                 
LEFT OUTER JOIN $$ETLVWDB.EL_CDC_MTL_SYSTEM_ITEMS_B ELMTL    /* added for Q4FY18 CDC */
   ON (WIOXRT.INVENTORY_ITEM_ID = ELMTL.INVENTORY_ITEM_ID
     and WIOXRT.GLOBAL_NAME='CDC')
                
LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT NPT
              ON (NPT.BK_PRODUCT_ID = ELMTL.SEGMENT1 
      ) 


  LEFT OUTER JOIN $$STGDB.WI_DRVD_NCR_COMP_US_COST_CG WDNCUC
  ON (WDNCUC.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID
  AND WDNCUC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME )
  
  LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SSOL
  ON ( SSOL.SK_SO_LINE_ID_INT = WIOXRT.ORDER_LINE_ID 
  AND SSOL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE)
  LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN
  ON ( SSOL.SALES_ORDER_LINE_KEY = NSOLN.SALES_ORDER_LINE_KEY 
  --AND NSOLN.END_TV_DATETIME = '3500-01-01 00:00:00' 
  )
  /* START: ADDED AS PART OF AUS MIGRATION */
  LEFT OUTER JOIN $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME
  ON EL_GNAME.ORG_ID = WIOXRT.ORG_ID
  AND EL_GNAME.ACTIVE_IND = 'Y'       
  LEFT OUTER JOIN $$ETLVWDB.SM_SALES_ORDER_LINE SSOL_CAL
  ON ( SSOL_CAL.SK_SO_LINE_ID_INT = WIOXRT.ORDER_LINE_ID 
  AND SSOL_CAL.SS_CODE = EL_GNAME.ORIG_SS_CD)
  LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE_TV  NSOLN_CAL
  ON ( SSOL_CAL.SALES_ORDER_LINE_KEY = NSOLN_CAL.SALES_ORDER_LINE_KEY 
  --AND NSOLN_CAL.END_TV_DATETIME = '3500-01-01 00:00:00'
  )
  /* END: ADDED AS PART OF AUS MIGRATION */ 
              
  /*OA Q1FY15 >>*/
  LEFT OUTER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LN_ORD_LN EL
  ON WIOXRT.CUSTOMER_TRX_LINE_ID = EL.CUSTOMER_TRX_LINE_ID
  AND WIOXRT.GLOBAL_NAME=EL.GLOBAL_NAME
  LEFT OUTER  JOIN  
   (SELECT NATIL.SK_CUSTOMER_TRX_LINE_ID_LINT,NATIL.AR_TRX_LINE_KEY AS AR_TRX_LINE_KEY ,NATIL_PAR.AR_TRX_LINE_KEY  AS PARENT_AR_TRX_LINE_KEY , 
   NATIL_PAR.SK_CUSTOMER_TRX_LINE_ID_LINT AS P_SK_CUSTOMER_TRX_LINE_ID_LINT,
  NATIL_PAR.PRODUCT_KEY AS PARENT_PRODUCT_KEY, NATIL.PRODUCT_KEY, NATIL.OFFER_ATTRIBUTED_FLG, NATIL.WITH_PARENT_ROLE, NATIL.SS_CODE
 , CASE WHEN NAAT.AR_TRX_TYPE_SHORT_CODE ='CM' and NATL.BK_AR_TRX_LINE_TYPE  = 'LINE' THEN
     NATIL_PAR.RU_CREDIT_QUANTITY 
    ELSE NATIL_PAR.RU_DEBIT_QUANTITY  
  END  as TRANSACTION_QUANTITY  
   FROM $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL
 INNER JOIN  $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON (NATIL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY)
  INNER JOIN  $$FINLGLVWDB.N_AR_TRX_TYPE NAAT
   ON (NATL.BK_COMPANY_CODE = NAAT.BK_COMPANY_CODE
   AND NATL.BK_SET_OF_BOOKS_KEY = NAAT.BK_SET_OF_BOOKS_KEY
   AND NATL.BK_AR_TRX_TYPE_CODE = NAAT.BK_AR_TRX_TYPE_CODE)
   INNER JOIN  $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL_PAR  
   ON COALESCE(NATIL.RU_PARENT_AR_TRX_LINE_KEY,0)  = NATIL_PAR.AR_TRX_LINE_KEY  ) DNATIL 
    ON  WIOXRT.CUSTOMER_TRX_LINE_ID = DNATIL.SK_CUSTOMER_TRX_LINE_ID_LINT
    AND NSSC.SOURCE_SYSTEM_CODE=DNATIL.SS_CODE                   
       LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT NP
          ON(NP.ITEM_KEY= CASE WHEN DNATIL.OFFER_ATTRIBUTED_FLG = 'Y' THEN DNATIL.PARENT_PRODUCT_KEY ELSE DNATIL.PRODUCT_KEY END)
  /* << OA Q1FY15 */
  
  LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT_PRICE_TV NPPT   /*OA Q1FY15: Modified join */
  ON ( NPPT.ITEM_KEY = NP.ITEM_KEY
  AND NPPT.BK_PRICE_LIST_NAME = 'Base Price List' 
  AND CAST(COALESCE(NSOLN.BK_SO_SRC_CRT_DATETIME,NSOLN_CAL.BK_SO_SRC_CRT_DATETIME,WIOXRT.TRANSACTION_DATE) AS DATE)  BETWEEN NPPT.START_TV_DATE AND NPPT.END_TV_DATE )
  LEFT OUTER JOIN $$FINLGLVWDB.N_CURRENCY_CONV_DAILY_RATE NCCDR
  ON ( NCCDR.BK_FROM_CURRENCY_CODE = WIOXRT.INVOICE_CURRENCY_CODE
  AND NCCDR.BK_TO_CURRENCY_CODE ='USD'
  AND NCCDR.BK_CONVERSION_DATE= CAST (WIOXRT.GL_DATE AS DATE))
  
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TV NSORDTV
  ON ( WIOXRT.ORDER_HEADER_ID = NSORDTV.SK_SALES_ORDER_HEADER_ID_INT  
  AND NSSC.SOURCE_SYSTEM_CODE = NSORDTV.SS_CODE
  AND NSORDTV.END_TV_DATETIME =  '3500-01-01 00:00:00' )
  /*LEFT OUTER JOIN SLSORDVWDB.N_SALES_ORDER_TYPE NSOT
  ON (NSOT.BK_ORDER_TYPE_NAME = NSORDTV.BK_ORDER_TYPE_NAME)*/
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV ORD_LN_V
   ON(NSOLN.SALES_ORDER_LINE_KEY = ORD_LN_V.SALES_ORDER_LINE_KEY
   AND ORD_LN_V.END_TV_DTM = '3500-01-01 00:00:00')
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT
   ON(NSOT.BK_ORDER_TYPE_NAME = ORD_LN_V.SO_LINE_TYPE_NAME) 
  /* START: ADDED AS PART OF AUS MIGRATION */
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT_Y
   ON(NSOT_Y.BK_ORDER_TYPE_NAME = NSORDTV.BK_ORDER_TYPE_NAME)
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSORDTV_CAL
  ON ( WIOXRT.ORDER_HEADER_ID = NSORDTV_CAL.SK_SALES_ORDER_HEADER_ID_INT  
  AND EL_GNAME.ORIG_SS_CD = NSORDTV_CAL.SS_CODE)
  /*LEFT OUTER JOIN SLSORDVWDB.N_SALES_ORDER_TYPE NSOT
  ON (NSOT.BK_ORDER_TYPE_NAME = NSORDTV.BK_ORDER_TYPE_NAME)*/
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_LINE_V1_TV ORD_LN_V_CAL
   ON(NSOLN_CAL.SALES_ORDER_LINE_KEY = ORD_LN_V_CAL.SALES_ORDER_LINE_KEY
   AND ORD_LN_V_CAL.END_TV_DTM = '3500-01-01 00:00:00')
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT_CAL
   ON(NSOT_CAL.BK_ORDER_TYPE_NAME = ORD_LN_V_CAL.SO_LINE_TYPE_NAME) 
  LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER_TYPE NSOT_CAL_Y
   ON(NSOT_CAL_Y.BK_ORDER_TYPE_NAME = NSORDTV_CAL.BK_ORDER_TYPE_NAME)  
  /* END: ADDED AS PART OF AUS MIGRATION */ 
  
  
  LEFT OUTER JOIN $$ETLVWDB.SM_AR_TRX_LINE SMATL
  ON ( WIOXRT.CUSTOMER_TRX_LINE_ID = SMATL.SK_CUSTOMER_TRX_LINE_ID_LINT
  AND NSSC.SOURCE_SYSTEM_CODE = SMATL.SS_CODE )
  LEFT OUTER JOIN $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL
  ON (SMATL.AR_TRX_LINE_KEY = NATIL.AR_TRX_LINE_KEY)
  INNER JOIN $$ETLVWDB.EL_OM_RA_CUST_TRX_LINES EORCTL
  ON ( EORCTL.CUSTOMER_TRX_LINE_ID = WIOXRT.CUSTOMER_TRX_LINE_ID 
  AND EORCTL.GLOBAL_NAME  = WIOXRT.GLOBAL_NAME)
  LEFT JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON(NATL.AR_TRX_LINE_KEY = SMATL.AR_TRX_LINE_KEY)
  /*
  LEFT OUTER JOIN FINLGLVWDB.N_AR_CMDM_ADJ_REQUEST NACAR 
    ON ( NACAR.BK_SAF_ID_INT = NATL.BK_SAF_ID_INT 
    AND NACAR.SET_OF_BOOKS_KEY = NATL.BK_SAF_SET_OF_BOOKS_KEY
    AND NACAR.BK_COMPANY_CD  = NATL.BK_SAF_COMPANY_CODE  )
   */
  LEFT OUTER JOIN $$ETLVWDB.EL_OM_RA_CUSTOMER_TRX NACAR
  ON NACAR.CUSTOMER_TRX_ID  = WIOXRT.CUSTOMER_TRX_ID
  AND NACAR.GLOBAL_NAME     = WIOXRT.GLOBAL_NAME 
    
  LEFT OUTER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS 
   ON NAT.AR_BATCH_SOURCE_KEY = NABS.AR_BATCH_SOURCE_KEY
   
    INNER  JOIN $$ETLVWDB.EV_SRVC_FIN_ACCOUNT_PID_MAP EV
  ON (EV.BK_FINANCIAL_ACCOUNT_CODE=WIOXRT.ACCOUNT_CODE)                         
/* PRMADDAL: ADDED TO DERIVE LIST PRICE AND PURCHASE ADJUSTMENT AMT AS PART OF Q1FY18 SOT XAAS*/
   LEFT OUTER JOIN $$FINLGLVWDB.N_AR_TRX_LINE_GL_DIST NATLGD
  ON (NATLGD.SK_CST_TRX_LIN_GL_DIST_ID_LINT = WIOXRT.CUST_TRX_LINE_GL_DIST_ID
  AND NATLGD.SS_CODE=NSSC.SOURCE_SYSTEM_CODE)
  /*LEFT OUTER JOIN (SELECT * FROM $$EXAASVWDB.N_EXAAS_SUBSCR_SO_LINE WHERE ORDER_LINE_STATUS_CD<>'Deleted') SOL
    ON NATL.RU_EXAAS_SUBSCRIPTION_SOL_KEY=SOL.EXAAS_SUBSCRIPTION_SOL_KEY 
   LEFT OUTER JOIN $$EXAASVWDB.N_EXAAS_SUBSCR_SO SO
    ON SOL.EXAAS_SUBSCRIPTION_SO_KEY=SO.EXAAS_SUBSCRIPTION_SO_KEY */
	LEFT OUTER JOIN (SELECT * FROM $$SLSORDVWDB.N_SALES_ORDER_LINE WHERE LINE_STATUS_CD<>'Deleted') SOL
    ON NATL.RU_EXAAS_SUBSCRIPTION_SOL_KEY=SOL.SALES_ORDER_LINE_KEY 
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER SO
    ON SOL.SALES_ORDER_KEY=SO.SALES_ORDER_KEY 
	/*SIGORANT: MODIFIED AS PART OF Q2FY18 */
   LEFT OUTER JOIN $$COMREFVWDB.N_SUBSCRIPTION_PRDT_PRC_TV NSPT
    ON(    
    NSPT.PRODUCT_KEY = NPT.ITEM_KEY
    AND NSPT.BK_PRICE_LIST_NAME = SO.BK_PRICE_LIST_NAME
    AND NSPT.BK_VERSION_NUM_INT=SOL.PRICE_VERSION_NUM_INT
    AND  NSPT.PRICING_FORMULA_CD<>'Rate Table')
  LEFT OUTER JOIN $$COMREFVWDB.N_SUBSCRIPTION_PRDT_PRC_TV NSPT_DEF
   ON(    
	   NSPT_DEF.PRODUCT_KEY = NP.ITEM_KEY
	   AND NSPT_DEF.BK_VERSION_NUM_INT=SOL.PRICE_VERSION_NUM_INT
	   AND NSPT_DEF.BK_PRICE_LIST_NAME = 'Global Price List - US' 
	   AND NSPT_DEF.PRICING_FORMULA_CD<>'Rate Table')
   LEFT OUTER JOIN  $$SLSORDVWDB.N_SALES_ORDER_LINE  NSOL
   ON (SSOL.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY) 
   LEFT OUTER JOIN $$SLSORDVWDB.N_SO_LINE_PRICE_ADJUSTMENT NSPA
   ON (NSOL.SALES_ORDER_LINE_KEY=NSPA.SALES_ORDER_LINE_KEY
     AND NSPA.SPECIAL_DISCOUNT_DESCR='Purchase Adjustment' AND NSPA.SS_CD<>'OPL')
WHERE NSSC.GLOBAL_NAME='CDC'


Post SQL : 



Target20 Name : WI_DRVD_NCR_REV_TRX_FOR_BKG_CG_6_CDC


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_TRX_FOR_BKG_CG','D');


Source21 Name : SQ_W_MT_DRVD_NCR_REV_TRX_FOR_BKG_7


Pre SQL : 
DELETE FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG ALL;

/*ADDING UPDATE FOR SALES_ORDER_KEY FOR XAAS DATA.USED SO KEY INFORMATION FOR POPULATING DV_ANNUALIZED_FLG*/

UPDATE WI FROM 
$$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_CG WI,
(SELECT WIOXRT.TRANSACTION_SEQUENCE_ID,NATIL.EXAAS_SUBSCR_SO_KEY
 FROM $$STGDB.WI_OM_XXNCR_REV_CG WIOXRT
 INNER JOIN $$ETLVWDB.SM_AR_TRX SMARTRX
   ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
   AND SMARTRX.SS_CODE = 'CG') 
  INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX
   ON (SMARTRX.AR_TRX_KEY = NARTRX.AR_TRX_KEY) 
    INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SMATL
   ON ( WIOXRT.CUSTOMER_TRX_LINE_ID = SMATL.SK_CUSTOMER_TRX_LINE_ID_LINT
   AND SMATL.SS_CODE='CG') 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
   ON ( SMATL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY ) 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_ITEM_LINE NATIL
   ON ( NATL.AR_TRX_LINE_KEY = NATIL.AR_TRX_LINE_KEY )
LEFT OUTER JOIN $$FINLGLVWDB.N_AR_BATCH_SOURCE NABS
    ON NARTRX.AR_BATCH_SOURCE_KEY=NABS.AR_BATCH_SOURCE_KEY
WHERE 
( NABS.BK_BATCH_SOURCE_NAME LIKE ANY ('XAAS%','ICMS-XAAS%','PP-XAAS%','CSP-MARKETPLACE')
               OR (NABS.BK_BATCH_SOURCE_NAME IN ('ORDER MANAGEMENT','ICMS-ADJ') AND NATL.TRX_LINE_SRC_NAME IN ('XAAS')
      )  )	  
)WI_OM
SET SALES_ORDER_KEY=WI_OM.EXAAS_SUBSCR_SO_KEY
WHERE WI.TRANSACTION_SEQUENCE_ID_INT=WI_OM.TRANSACTION_SEQUENCE_ID;


SQL Query : 
SELECT 
 1   DRVD_NCR_REV_TRX_BKG_KEY,
 WDNRTFB.TRANSACTION_SEQUENCE_ID_INT   TRANSACTION_SEQUENCE_ID_INT,
 NSSC.SOURCE_SYSTEM_CODE     SOURCE_SYSTEM_CODE,
 WDNRTFB.TRANSACTION_DATE    TRANSACTION_DATE,
 WIOXRT.TRANSACTION_SEQUENCE_ID    SK_PH_TRANSACTION_SEQ_ID_INT, 
 NAAR.BK_ACCOUNTING_RULE_NAME    ACCOUNTING_RULE_NAME, 
 WDNRTFB.ACCOUNT_CLASS_CODE    ACCOUNT_CLASS_CODE,
 WDNRTFB.GL_DISTRIBUTION_FUNCTIONAL_AMT   GL_DISTRIBUTION_FUNCTIONAL_AMT,
 WDNRTFB.ADJUSTMENT_TYPE_CODE    ADJUSTMENT_TYPE_CODE,
 WDNRTFB.GL_DISTRIB_TRANSACTIONAL_AMT   GL_DISTRIB_TRANSACTIONAL_AMT,
 WDNRTFB.CREATED_BY_INT     CREATED_BY_INT,
 WDNRTFB.AR_TRX_LINE_TRANSACTIONAL_AMT   AR_TRX_LINE_TRANSACTIONAL_AMT,
 WDNRTFB.EXTRACT_TYPE_CODE    EXTRACT_TYPE_CODE,
 WDNRTFB.FORWARD_REVERSE_CODE    FORWARD_REVERSE_CODE,
 WDNRTFB.GL_DATETIME     GL_DATETIME,
 WDNRTFB.GL_DATE      GL_DATE, 
 WDNRTFB.GL_POSTED_DATE     GL_POSTED_DATE,
 WDNRTFB.TRANSACTION_GROUPING_TYPE_CODE   TRANSACTION_GROUPING_TYPE_CODE,
 WDNRTFB.LAST_UPDATED_BY_INT    LAST_UPDATED_BY_INT,
 WDNRTFB.LAST_RECORD_FLAG    LAST_RECORD_FLAG,
 NATL.BK_AR_TRX_LINE_TYPE    LINE_TYPE_CODE,
 WDNRTFB.QUOTA_FLAG     QUOTA_FLAG,
 COALESCE(WDNRTFB.REBATE_TRANSACTIONAL_AMOUNT,0)  REBATE_TRANSACTIONAL_AMOUNT,
 WDNRTFB.MANUAL_TRANSACTION_FLAG    MANUAL_TRANSACTION_FLAG,
 WDNRTFB.RULE_START_DATETIME    RULE_START_DATETIME,
 WDNRTFB.TRANSACTION_DATETIME    TRANSACTION_DATETIME,
 WDNRTFB.TRANSACTION_QUANTITY    TRANSACTION_QUANTITY,
 WDNRTFB.AR_TRX_DATETIME     AR_TRX_DATETIME,
 WDNRTFB.AR_TRX_NUMBER     AR_TRX_NUMBER,
 WDNRTFB.AR_TRX_TYPE_CODE    AR_TRX_TYPE_CODE,
 COALESCE(WDNRTFB.UNIT_SELLING_PRICE_TRX_AMT,0)  UNIT_SELLING_PRICE_TRX_AMT,
 COALESCE(WDNRTFB.UNIT_STANDARD_PRICE_TRX_AMT,0)  UNIT_STANDARD_PRICE_TRX_AMT,
 WIOXRT.SALES_TERRITORY_KEY  PD_SALES_TERRITORY_KEY,
 WIOXRT.SALES_REP_NUMBER    PD_SALES_REP_NUMBER,
 CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN 'UNKNOWN' ELSE EAAT.BK_AR_ADJ_NUMBER END PD_AR_ADJUSTMENT_NUMBER,
 CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN '020' ELSE EAAT.BK_COMPANY_CODE END PD_AR_ADJUSTMENT_COMPANY_CODE,
 CASE WHEN EAAT.BK_AR_ADJ_NUMBER IS NULL THEN 500 ELSE EAAT.BK_SET_OF_BOOKS_KEY END PD_AR_ADJ_SET_OF_BOOKS_KEY,
 NULL       PD_FUNCTIONAL_CURRENCY_CODE,
 WDNRTFB.PD_INVOICE_CURRENCY_CODE   PD_INVOICE_CURRENCY_CODE,
 NFM.BK_FISCAL_CALENDAR_CODE    DV_FISCAL_CALENDAR_CODE,
 SUBSTR(CAST(WIOXRT.FISCAL_ID AS VARCHAR(6)),5,2) DV_FISCAL_MONTH_NUMBER_INT,
 SUBSTR(CAST(WIOXRT.FISCAL_ID AS VARCHAR(6)),1,4)  DV_FISCAL_YEAR_NUMBER_INT,
 'FOR BOOKINGS REPORTING'    REPORTING_MEASURE_TYPE,
 CASE WHEN SSORCTLG.BK_AR_TRX_LINE_GL_DISTRIB_KEY IS NULL THEN -7777 ELSE SSORCTLG.BK_AR_TRX_LINE_GL_DISTRIB_KEY END BK_AR_TRX_LINE_GL_DISTRIB_KEY, 
 WDNRTFB.DV_FISCAL_DATE     DV_FISCAL_DATE, 
 WDNRTFB.DV_BKGS_ITEM_TYPE_CODE_FLAG   DV_BKGS_ITEM_TYPE_CODE_FLAG,
 WDNRTFB.DV_BKGS_INTL_DEMO_FLAG    DV_BKGS_INTL_DEMO_FLAG,
 WDNRTFB.DV_BKGS_REPL_DEMO_FLAG    DV_BKGS_REPL_DEMO_FLAG,
 WDNRTFB.DV_BKGS_REVENUE_FLAG    DV_BKGS_REVENUE_FLAG,
 WDNRTFB.DV_BKGS_OVERLAY_FLAG    DV_BKGS_OVERLAY_FLAG,
 WDNRTFB.DV_BKGS_SALESREP_FLAG    DV_BKGS_SALESREP_FLAG,
 CASE WHEN NCA.ERP_CUSTOMER_TYPE_CODE='I' THEN 'N' ELSE 'Y' END DV_BKGS_IC_REVENUE_FLAG,
 WDNRTFB.DV_BKGS_CHARGES_FLAG    DV_BKGS_CHARGES_FLAG,
 WDNRTFB.DV_BKGS_MISC_FLAG    DV_BKGS_MISC_FLAG,
 WDNRTFB.DV_BKGS_SERVICE_FLAG    DV_BKGS_SERVICE_FLAG,
 /*CASE WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  AND DV_BKGS_INTL_DEMO_FLAG='N' AND DV_BKGS_REPL_DEMO_FLAG='N' AND DV_BKGS_REVENUE_FLAG='Y' AND DV_BKGS_CHARGES_FLAG='N' AND DV_BKGS_OVERLAY_FLAG='N' AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' AND DV_BKGS_MISC_FLAG='N' AND DV_BKGS_SALESREP_FLAG='N' THEN 'Y' ELSE 'N' END DV_BKGS_CORP_BKG_FLAG , */
 CASE  WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999 
   THEN ( CASE  WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL 
        OR NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
        /*   AND DV_BKGS_INTL_DEMO_FLAG='N'   */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
        /* AND DV_BKGS_REPL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
       /* AND DV_BKGS_REVENUE_FLAG='Y' */ /*satchinn: Commented as part   corp booking flag changes  */
        AND DV_BKGS_CHARGES_FLAG='N' 
        AND DV_BKGS_OVERLAY_FLAG='N' 
        AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
        AND DV_BKGS_MISC_FLAG='N' 
        AND DV_BKGS_SALESREP_FLAG='N'
       /* AND ELST.TERRITORY_NODE_LEVEL1_CODE <> 'WW Distribution'    : RCHETTRI REBOK CHANGES */
     AND RSH.L1_SALES_TERRITORY_NAME_CODE <> 'WW Distribution' 
       THEN 'Y' 
       ELSE 'N' 
     END)
   ELSE 
    ( CASE WHEN SOURCE_DATA_KEY5 IN 'NRS SSPTP Transition Release' THEN 'N'
 WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
         /* AND DV_BKGS_INTL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
         /* AND DV_BKGS_REPL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
        /* AND DV_BKGS_REVENUE_FLAG='Y' */ /*satchinn: Commented as part   corp booking flag changes  */
         AND DV_BKGS_CHARGES_FLAG='N' 
         AND DV_BKGS_OVERLAY_FLAG='N' 
         AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
         AND DV_BKGS_MISC_FLAG='N' 
         AND DV_BKGS_SALESREP_FLAG='N' 
         /*AND ELST.TERRITORY_NODE_LEVEL1_CODE <> 'WW Distribution'     : RCHETTRI REBOK CHANGES */
   AND RSH.L1_SALES_TERRITORY_NAME_CODE <> 'WW Distribution' 
       THEN 'Y' 
       ELSE 'N' 
     END ) 
 END DV_BKGS_CORP_BKG_FLAG, /* Modified as part of true demand bkgs definition*/
 COALESCE(WDNRTFB.DV_BKGS_COMP_US_NET_PRC_AMT,0)  DV_BKGS_COMP_US_NET_PRC_AMT,
 COALESCE(WDNRTFB.DV_BKGS_COMP_US_LST_PRC_AMT,0)  DV_BKGS_COMP_US_LST_PRC_AMT,
 COALESCE(WDNRTFB.DV_BKGS_COMP_US_COST_AMT,0)  DV_BKGS_COMP_US_COST_AMT,
 COALESCE(WDNRTFB.DV_BKGS_EXTENDED_QUANTITY,0)  DV_BKGS_EXTENDED_QUANTITY,
 CASE WHEN WIOXRT.ORDER_LINE_ID IN (-9999,0) THEN '99998' ELSE WIOXRT.SALES_REP_NUMBER END BK_SCAA_SALES_REP_NUMBER,
 CASE WHEN WIOXRT.ORDER_LINE_ID IN (-9999,0) THEN WIOXRT.SALES_REP_NUMBER ELSE '99998' END BK_SCAN_SALES_REP_NUMBER,
 WDNRTFB.SALES_COMMISSION_PERCENTAGE   SALES_COMMISSION_PERCENTAGE,
 COALESCE(WDNSCC.SALES_CHANNEL_CODE,'NC/ADJ')  SALES_CHANNEL_CODE,
 WDNRTFB.DV_COMP_US_STANDARD_PRICE_AMT   DV_COMP_US_STANDARD_PRICE_AMT,
 WIOXRT.FISCAL_ID     DV_FISCAL_YEAR_MTH_NUMBER_INT,
 WDNRTFB.REPORTED_SALES_ORDER_NUM_INT   REPORTED_SALES_ORDER_NUM_INT, 
 CASE WHEN WIOXRT.FISCAL_ID <= BKGPDT.FISCAL_YEAR_MTH_NUMBER_INT  THEN BKGPDT.PROCESS_DATE
   ELSE CAST('1900-01-01' AS DATE) 
 END PROCESS_DATE,
 NARTRX.AR_TRX_KEY     AR_TRX_KEY,
 SMATL.AR_TRX_LINE_KEY     AR_TRX_LINE_KEY,
 WDNRTFB.PRODUCT_KEY     PRODUCT_KEY,
 WDNRTFB.SALES_ORDER_KEY     SALES_ORDER_KEY,
 WDNRTFB.SALES_ORDER_LINE_KEY    SALES_ORDER_LINE_KEY,
 WDNRTFB.SHIP_TO_CUSTOMER_KEY     SHIP_TO_CUSTOMER_KEY ,
 WDNRTFB.SOLD_TO_CUSTOMER_KEY       SOLD_TO_CUSTOMER_KEY  ,
 WDNRTFB.BILL_TO_CUSTOMER_KEY     BILL_TO_CUSTOMER_KEY ,
 WIOXRT.BK_SALES_CREDIT_TYPE_CODE      SALES_CREDIT_TYPE_CODE,
 USER EDW_CREATE_USER, 
 USER EDW_UPDATE_USER, 
 CURRENT_TIMESTAMP(0) EDW_CREATE_DATETIME, 
 CURRENT_TIMESTAMP(0)EDW_UPDATE_DATETIME, 
 WDNRTFB.CONVERSION_RT     CONVERSION_RT,
 CASE WHEN WDNRTFB.EXTRACT_TYPE_CODE IN ('REV','INV') THEN NARTRX.BK_AR_TRX_TYPE_CODE 
   WHEN WDNRTFB.EXTRACT_TYPE_CODE IN ('CORP_ADJ','AR_ADJUSTMENT') THEN WDNRTFB.EXTRACT_TYPE_CODE 
   ELSE 'UNKNOWN' 
 END DV_TRANSACTION_NAME,
 WIOXRT.DEFAULT_SC_FLAG  DEFAULT_SC_FLG,
 WIOXRT.SK_LINE_SEQ_ID_INT,
 WIOXRT.SCA_SOURCE_TYPE_CD,
 WIOXRT.DV_TRANSACTION_SOURCE_CD, 
 WIOXRT.DV_TRANSACTION_KEY,
 COALESCE(WIOXRT.AMOUNT,0) AS AMOUNT,
 COALESCE(WIOXRT.ACCTD_AMOUNT,0) AS ACCTD_AMOUNT,
 COALESCE(WIOXRT.TRANSACTION_QUANTITY,0) AS TRANSACTION_QUANTITY1 ,
 CASE WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999
   THEN ( CASE WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL  OR NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
        /* AND DV_BKGS_INTL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
        /* AND DV_BKGS_REPL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
        /* AND DV_BKGS_REVENUE_FLAG='Y' */  /*satchinn: Commented as part REVENUE  RECOGNITION flag changes  */
        AND DV_BKGS_CHARGES_FLAG='N' 
        AND DV_BKGS_OVERLAY_FLAG='N' 
        AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
        AND DV_BKGS_MISC_FLAG='N' 
        AND DV_BKGS_SALESREP_FLAG='N' 
       THEN 'Y' 
       ELSE 'N' 
     END)
   ELSE 
    ( CASE WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
         /* AND DV_BKGS_INTL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
         /* AND DV_BKGS_REPL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
        /* AND DV_BKGS_REVENUE_FLAG='Y'  */  /*satchinn: Commented as part REVENUE  RECOGNITION flag changes  */
         AND DV_BKGS_CHARGES_FLAG='N' 
         AND DV_BKGS_OVERLAY_FLAG='N' 
         AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
         AND DV_BKGS_MISC_FLAG='N' 
         AND DV_BKGS_SALESREP_FLAG='N' 
       THEN 'Y' 
       ELSE 'N' 
     END )  
 END DV_REVENUE_RECOGNITION_FLG, /* Added as part of true demand bkgs definition*/
 CASE WHEN NARTRX.SOLD_TO_CUSTOMER_KEY=-999
   THEN (CASE WHEN (NCA1.ERP_CUSTOMER_TYPE_CODE IS NULL  OR NCA1.ERP_CUSTOMER_TYPE_CODE<>'I')  
       /* AND DV_BKGS_INTL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
       /* AND DV_BKGS_REPL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
       AND DV_BKGS_REVENUE_FLAG='Y' 
       AND DV_BKGS_CHARGES_FLAG='N' 
       AND DV_BKGS_OVERLAY_FLAG='N' 
       AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
       AND DV_BKGS_MISC_FLAG='N' 
       AND DV_BKGS_SALESREP_FLAG='N' 
       /* AND ELST.TERRITORY_NODE_LEVEL1_CODE = 'WW Distribution' : RCHETTRI : REBOK CHANGES */
    AND RSH.L1_SALES_TERRITORY_NAME_CODE = 'WW Distribution' 
       THEN 'Y' 
      ELSE 'N' 
    END)
   ELSE ( CASE WHEN (NCA.ERP_CUSTOMER_TYPE_CODE IS NULL  OR NCA.ERP_CUSTOMER_TYPE_CODE<>'I')  
         /* AND DV_BKGS_INTL_DEMO_FLAG='N'  */ /* RCHETTRI : CG1 FUNCTIONALITY */  
         /*  AND DV_BKGS_REPL_DEMO_FLAG='N'   */ /* RCHETTRI : CG1 FUNCTIONALITY */ 
         AND DV_BKGS_REVENUE_FLAG='Y' 
         AND DV_BKGS_CHARGES_FLAG='N' 
         AND DV_BKGS_OVERLAY_FLAG='N' 
         AND DV_BKGS_ITEM_TYPE_CODE_FLAG='N' 
         AND DV_BKGS_MISC_FLAG='N' 
         AND DV_BKGS_SALESREP_FLAG='N' 
         /* AND ELST.TERRITORY_NODE_LEVEL1_CODE = 'WW Distribution': RCHETTRI : REBOK CHANGES */
   AND RSH.L1_SALES_TERRITORY_NAME_CODE = 'WW Distribution' 
       THEN 'Y' 
       ELSE 'N' 
     END )
 END DV_NET_SPREAD_FLG,  /* Added as part of true demand bkgs definition*/
 WIOXRT.ACTION_CODE ACTION_CODE,
 'I' AS DML_TYPE,
 WIOXRT.GLOBAL_NAME,
 WIOXRT.SK_SC_AGENT_ID_INT,
 COALESCE(WDNRTFB.DV_LOCAL_EXTND_LIST_PRICE_AMT,0)  DV_LOCAL_EXTND_LIST_PRICE_AMT,
 COALESCE(WDNRTFB.LOCAL_UNIT_LIST_PRICE_AMT,0)  LOCAL_UNIT_LIST_PRICE_AMT,
 COALESCE(WDNRTFB.DV_UNIT_LIST_PRICE_USD_AMT,0)  DV_UNIT_LIST_PRICE_USD_AMT,
COALESCE(WDNRTFB.DV_COMP_US_NET_PURC_ADJ_AMT,0)  DV_COMP_US_NET_PURC_ADJ_AMT,
 WIOXRT.SOURCE_DATA_KEY5,
 WIOXRT.SALES_MOTION_CD AS SALES_MOTION_CD, /*Added as part of SALES OCTRelFY18 */
 COALESCE(WDNRTFB.ORIG_UNIT_LST_PRC_USD_AMT,0)  ORIG_UNIT_LST_PRC_USD_AMT, /*Added as part of ANNUITY Q3FY20 */
 COALESCE(WDNRTFB.ORIG_EXTD_LST_PRC_USD_AMT,0)  ORIG_EXTD_LST_PRC_USD_AMT /*Added as part of ANNUITY Q3FY20 */
    /*ACV CHANGES Q1FY21*/
 ,WIOXRT.RU_SERVICE_CONTRACT_START_DTM AS RU_SERVICE_CONTRACT_START_DTM1,
 WIOXRT.RU_SERVICE_CONTRACT_END_DTM AS RU_SERVICE_CONTRACT_END_DTM1,
  ROUND(CASE WHEN WIOXRT.FORWARD_REVERSE_FLAG IN ('R','REVERSE') THEN WIOXRT.DV_CONTRACT_DURATION  
               ELSE 
			   CASE WHEN WDNRTFB.DV_BKGS_SERVICE_FLAG= 'N' THEN 
			        CASE --WIOXRT.RU_SERVICE_CONTRACT_START_DTM <> CAST('3500/01/01 00:00:00' AS TIMESTAMP(0)) AND WIOXRT.RU_SERVICE_CONTRACT_END_DTM <> CAST('3500/01/01 00:00:00' AS TIMESTAMP(0)) AND ( ( CAST(WIOXRT.RU_SERVICE_CONTRACT_END_DTM  AS DATE ) - CAST(WIOXRT.RU_SERVICE_CONTRACT_START_DTM AS DATE ) )  > 0) 
							   WHEN(CAST(WIOXRT.RU_SERVICE_CONTRACT_START_DTM AS DATE ) - CAST(WIOXRT.RU_SERVICE_CONTRACT_END_DTM AS DATE ))IS NOT NULL 
                               THEN CAST((CAST(CAST(WIOXRT.RU_SERVICE_CONTRACT_END_DTM AS DATE) -  CAST(WIOXRT.RU_SERVICE_CONTRACT_START_DTM AS DATE) AS INTEGER)*12(FLOAT))/365 AS DECIMAL(15,6) )
                               WHEN WIOXRT.DV_CONTRACT_DURATION > 0 THEN WIOXRT.DV_CONTRACT_DURATION
                               WHEN (NP.BK_PRODUCT_ID LIKE 'SWOA%' OR  NP.BK_PRODUCT_ID LIKE '%ADJ%' )AND NP.BK_PRODUCT_ID NOT LIKE 'SWOA-MX%'  THEN NULL
							   ELSE 
							   CASE WHEN NP.PRICING_UNIT_NAME = 'YEAR' THEN NP.PRICING_UNIT_DURATION_INT * 12 
                                    WHEN NP.PRICING_UNIT_NAME = 'MONTHS' THEN NP.PRICING_UNIT_DURATION_INT  
									WHEN NP.PRICING_UNIT_NAME = 'DAYS' THEN CAST(((NP.PRICING_UNIT_DURATION_INT *12(FLOAT))/365) AS DECIMAL(15,6))
                                    WHEN EL_NP.BIZ_DEF_TERM IS NOT NULL THEN EL_NP.BIZ_DEF_TERM
                                    WHEN EL_NP.DURATION IS NOT NULL THEN EL_NP.DURATION
							   ELSE NULL
							   END 
							END
					    ELSE 
							CASE --WHEN WIOXRT.RU_SERVICE_CONTRACT_START_DTM <> CAST('3500/01/01 00:00:00' AS TIMESTAMP(0)) AND WIOXRT.RU_SERVICE_CONTRACT_END_DTM <> CAST('3500/01/01 00:00:00' AS TIMESTAMP(0)) AND ( ( CAST(WIOXRT.RU_SERVICE_CONTRACT_END_DTM  AS DATE ) - CAST(WIOXRT.RU_SERVICE_CONTRACT_START_DTM AS DATE ) )  > 0)  
							WHEN(CAST(WIOXRT.RU_SERVICE_CONTRACT_START_DTM AS DATE ) - CAST(WIOXRT.RU_SERVICE_CONTRACT_END_DTM AS DATE ))IS NOT NULL 
							THEN  CAST((CAST(CAST(WIOXRT.RU_SERVICE_CONTRACT_END_DTM AS DATE) -  CAST(WIOXRT.RU_SERVICE_CONTRACT_START_DTM AS DATE) AS INTEGER)*12(FLOAT))/365 AS DECIMAL(15,6) )
							WHEN  WIOXRT.DV_CONTRACT_DURATION > 0 THEN WIOXRT.DV_CONTRACT_DURATION
                     END
  END END) AS  DV_CONTRACT_DURATION1,
  
COALESCE(CASE WHEN WIOXRT.FORWARD_REVERSE_FLAG IN ('R','REVERSE') THEN WIOXRT.DV_ANNUALIZED_FLG 
     ELSE   
     CASE WHEN WDNRTFB.DV_BKGS_SERVICE_FLAG= 'N' THEN 
         CASE WHEN DV_CONTRACT_DURATION1 IS NULL THEN 'Y' 
              WHEN DV_CONTRACT_DURATION1 IS NOT NULL THEN
		      CASE
				   WHEN NP.MONETIZATION_TYPE_CD ='PERPETUAL' AND NP.ELA_FLG = 'Y' THEN 'Y'  
				   WHEN RP.RU_BK_ALLOCATED_SERVC_GROUP_ID IN ('AS TRANSACTION','AS FIXED') THEN 'Y'  /* Part of FY21 Day 1 release added by ACV Core team */
				   WHEN COALESCE ( EX.EXCLUDE_FLAG,'N' ) = 'Y' THEN 'Y' 
                   WHEN EX.EXCLUDE_FLAG IS NOT NULL AND EX.EXCLUDE_FLAG = 'N'  
                   THEN     CASE  WHEN DV_CONTRACT_DURATION1 >12 AND NP.MONETIZATION_TYPE_CD <>'USAGE'  THEN 'N' ELSE 'Y' END
                                  WHEN DV_CONTRACT_DURATION1 >12 AND NP.MONETIZATION_TYPE_CD <>'USAGE'  
								  AND (CASE WHEN NSL.XCAT_FLG = 'Y' THEN NSL.XCAT_FLG ELSE COALESCE(NP.XCAT_FLG,'N') END) <>'Y' AND FDM.BK_DEAL_ID IS NULL THEN 'N' ELSE 'Y'
                            END
					ELSE 'Y' /*ADDED THIS AS PER NBM CODE*/
              END 
         ELSE
         CASE  WHEN DV_CONTRACT_DURATION1 IS NULL THEN 'Y' 
               WHEN DV_CONTRACT_DURATION1 IS NOT NULL THEN
               CASE WHEN DV_CONTRACT_DURATION1 >12 THEN 'N' ELSE 'Y' END
         END
     END 
END,'=')  DV_ANNUALIZED_FLG1,
CASE WHEN WIOXRT.FORWARD_REVERSE_FLAG IN ('R','REVERSE') THEN -1* WIOXRT.DV_ANNUALIZED_US_NET_AMT
     ELSE 
	 CASE WHEN DV_ANNUALIZED_FLG1 = 'Y' THEN DV_BKGS_COMP_US_NET_PRC_AMT
          WHEN DV_ANNUALIZED_FLG1 = 'N' THEN ( DV_BKGS_COMP_US_NET_PRC_AMT / DV_CONTRACT_DURATION1 ) * 12
          ELSE DV_BKGS_COMP_US_NET_PRC_AMT  END
END AS DV_ANNUALIZED_US_NET_AMT1,   
CASE WHEN WIOXRT.FORWARD_REVERSE_FLAG IN ('R','REVERSE') THEN -1* WIOXRT.DV_MULTIYEAR_US_NET_AMT
     ELSE 
     CASE WHEN DV_ANNUALIZED_FLG1 = 'Y'  THEN 0
          WHEN DV_ANNUALIZED_FLG1='N'    THEN DV_BKGS_COMP_US_NET_PRC_AMT - DV_ANNUALIZED_US_NET_AMT1
          ELSE 0 
     END
END AS DV_MULTIYEAR_US_NET_AMT  ,
CASE WHEN WIOXRT.BATCH_ID=1 THEN 'TCV' /*HARDCODING INITIALLY. WILL UPDATE IN WDRVD POSTSQL*/
     ELSE WIOXRT.BOOKINGS_POLICY_CD
END	 AS BOOKINGS_POLICY_CD
 FROM 
  (SELECT PROCESS_DATE , FISCAL_YEAR_MTH_NUMBER_INT FROM $$ETLVWDB.BKG_PROCESS_DT_CNTRL )  BKGPDT,
  $$STGDB.WI_OM_XXNCR_REV_CG WIOXRT
 INNER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
  ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
 INNER JOIN $$STGDB.WI_DRVD_NCR_REV_TRX_FOR_BKG_CG WDNRTFB
  ON ( WDNRTFB.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID
  AND WDNRTFB.GLOBAL_NAME = WIOXRT.GLOBAL_NAME )
 INNER JOIN $$ETLVWDB.EL_RA_RULES SORR
  ON (SORR.RULE_ID = WIOXRT.ACCOUNTING_RULE_ID
  AND SORR.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
 INNER JOIN $$FINLGLVWDB.N_AR_ACCOUNTING_RULE NAAR
  ON (NAAR.BK_ACCOUNTING_RULE_NAME = SORR.NAME)
 LEFT OUTER JOIN $$ETLVWDB.EL_SALES_REP ELSALER  
  ON ( ELSALER.SALES_REP_ID = WIOXRT.SALESREP_ID 
  AND ELSALER.GLOBAL_NAME = WIOXRT.GLOBAL_NAME )
 INNER JOIN $$ETLVWDB.SM_AR_TRX_LINE SMATL
  ON ( WIOXRT.CUSTOMER_TRX_LINE_ID = SMATL.SK_CUSTOMER_TRX_LINE_ID_LINT
  AND NSSC.SOURCE_SYSTEM_CODE = SMATL.SS_CODE) 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX_LINE NATL
  ON ( SMATL.AR_TRX_LINE_KEY = NATL.AR_TRX_LINE_KEY )
  /* rchettri : rebok changes : use COMREFVWDB. R_SALES_HIERARCHY for node level information
  LEFT OUTER JOIN $$ETLVWDB.EL_SALES_TERRITORY ELST 
  ON (ELST.TERRITORY_ID = WIOXRT.TERRITORY_ID
  AND ELST.GLOBAL_NAME = WIOXRT.GLOBAL_NAME) 
  */
 LEFT OUTER JOIN $$COMREFVWDB.R_SALES_HIERARCHY RSH
 ON WIOXRT.SALES_TERRITORY_KEY   = RSH.SALES_TERRITORY_KEY  
 INNER JOIN $$ETLVWDB.SM_AR_TRX SMARTRX
  ON (SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
  AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE) 
 INNER JOIN $$FINLGLVWDB.N_AR_TRX NARTRX
  ON (SMARTRX.AR_TRX_KEY = NARTRX.AR_TRX_KEY) 
 INNER JOIN $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA 
  ON (NCA.CUSTOMER_ACCOUNT_KEY = NARTRX.SOLD_TO_CUSTOMER_KEY) 
 INNER JOIN $$COMREFVWDB.N_ERP_CUST_ACCT_LOC_USE NECAL   
  ON (NECAL.ERP_CUST_ACCOUNT_LOCATION_KEY = NARTRX.BILL_TO_CUSTOMER_KEY) 
 INNER JOIN $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA1  
  ON (NCA1.CUSTOMER_ACCOUNT_KEY = NECAL.CUSTOMER_ACCOUNT_KEY) 
 LEFT OUTER JOIN $$ETLVWDB.EL_SALES_CREDIT_TYPES ESCT 
  ON (WIOXRT.SALES_CREDIT_TYPE_ID = ESCT.SK_CREDIT_TYPE_ID
  AND WIOXRT.GLOBAL_NAME = ESCT.GLOBAL_NAME)
 LEFT OUTER JOIN $$ETLVWDB.EL_AR_ADJUSTMENT_TRX EAAT 
  ON (EAAT.SK_ADJUSTMENT_ID_INT = WIOXRT.ADJUSTMENT_ID
  AND EAAT.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
  AND WIOXRT.EXTRACT_TYPE='AR_ADJUSTMENT' ) 
 LEFT OUTER JOIN $$ETLVWDB.SM_ST_OM_RA_CUST_TRX_LN_GLDT SSORCTLG 
  ON ( SSORCTLG.CUST_TRX_LINE_GL_DIST_ID = WIOXRT.CUST_TRX_LINE_GL_DIST_ID 
  AND SSORCTLG.SS_CODE = NSSC.SOURCE_SYSTEM_CODE ) 
 LEFT OUTER JOIN $$COMREFVWDB.N_FISCAL_MONTH NFM
  ON ( CAST(WIOXRT.GL_DATE AS DATE) >= NFM.FISCAL_MONTH_START_DATE 
  AND CAST(WIOXRT.GL_DATE AS DATE) <= NFM.FISCAL_MONTH_END_DATE)
 LEFT OUTER JOIN $$STGDB.WI_DRVD_NCR_SLS_CHNL_CODE_CG WDNSCC
  ON (WDNSCC.TRANSACTION_SEQUENCE_ID = WIOXRT.TRANSACTION_SEQUENCE_ID 
  AND WDNSCC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
  /*ANNUITY COLS PROPAGATION : ACV CHANGES Q1FY21*/
INNER JOIN $$COMREFVWDB.N_PRODUCT NP 
ON WDNRTFB.PRODUCT_KEY=NP.ITEM_KEY  
LEFT OUTER JOIN 
(SELECT SKU,INVENTORY_ITEM_ID,DURATION,BIZ_DEF_TERM FROM $$ETLVWDB.EL_CG1_XXCFIR_PROD_SUBSCR_SKU WHERE END_DATE IS NULL)EL_NP 
	ON NP.BK_PRODUCT_ID=EL_NP.SKU
LEFT OUTER JOIN $$COMREFVWDB.N_PRODUCT_FAMILY NPF ON NP.RU_BK_PRODUCT_FAMILY_ID=NPF.BK_PRODUCT_FAMILY_ID

LEFT OUTER JOIN $$COMREFVWDB.R_PRODUCTS RP ON NP.ITEM_KEY=RP.ITEM_KEY

   LEFT OUTER JOIN $$STGDB.WI_ATCCV_EXCLUDE_TRX EX 
   ON EX.EXCLUDE_VALUE =  ( 
        CASE WHEN EX.EXCLUDE_REF_COLUMN_1 = 'RU_BK_PRODUCT_FAMILY_ID' THEN NP.RU_BK_PRODUCT_FAMILY_ID 
                          WHEN EXCLUDE_REF_COLUMN_1 = 'BK_PRODUCT_ID'  THEN NP.BK_PRODUCT_ID 
        WHEN EXCLUDE_REF_COLUMN_1='BK_BUSINESS_UNIT_ID' THEN NPF.BK_BUSINESS_UNIT_ID
        END ) 
   LEFT OUTER JOIN $$SLSORDVWDB.N_SALES_ORDER NSL
   ON NSL.SALES_ORDER_KEY=WDNRTFB.SALES_ORDER_KEY
  LEFT OUTER JOIN $$FINLGLVWDB.N_FCM_DEAL_MAPPING  FDM
  ON COALESCE(NSL.BK_DEAL_ID,'-9999') = FDM.BK_DEAL_ID
  AND WIOXRT.FISCAL_ID = FDM.BK_DV_FISCAL_YEAR_MTH_NUM_INT


Post SQL : 



Target21 Name : WI_DRVD_NCR_REV_FOR_BKG_CG_7


Pre SQL : 



Post SQL : 
UPDATE WREV FROM 
$$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG WREV,
$$STGDB.WI_DRVD_NCR_REV_BKG_CG WCG,
$$COMREFVWDB.N_PRODUCT NP,
$$COMREFVWDB.N_PRODUCT_FAMILY NPF
SET DV_BKGS_CORP_BKG_FLAG = 'N',
DV_REVENUE_RECOGNITION_FLG='N',
DV_NET_SPREAD_FLG= 'N'
WHERE WREV.TRANSACTION_SEQUENCE_ID_INT=WCG.TRANSACTION_SEQUENCE_ID 
AND WREV.GLOBAL_NAME=WCG.GLOBAL_NAME
AND WCG.INVENTORY_ITEM_ID = NP.SK_INVENTORY_ITEM_ID_INT
AND NP.RU_BK_PRODUCT_FAMILY_ID = NPF.BK_PRODUCT_FAMILY_ID
AND NPF.BK_BUSINESS_UNIT_ID ='CDBU'
AND NP.GOODS_OR_SERVICE_TYPE = 'GOODS'
AND WCG.ACCOUNT_CODE NOT IN ('40100','50100','50120');

	/*MARGIN_ACQUISITIONS_DIVESTITURE*/			
 			
UPDATE WREV FROM 			
$$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG WREV,			
$$STGDB.WI_DRVD_NCR_REV_BKG_CG WCG,			
$$COMREFVWDB.N_PRODUCT NP			
SET DV_BKGS_CORP_BKG_FLAG = 'N',			
 DV_REVENUE_RECOGNITION_FLG='N',			
 DV_NET_SPREAD_FLG= 'N'			
 WHERE WREV.TRANSACTION_SEQUENCE_ID_INT=WCG.TRANSACTION_SEQUENCE_ID 			
 AND WREV.GLOBAL_NAME=WCG.GLOBAL_NAME			
 AND WCG.INVENTORY_ITEM_ID = NP.SK_INVENTORY_ITEM_ID_INT
AND NP.DIVESTITURE_TYPE_CD <>'UNKNOWN'			
AND WCG.ACCOUNT_CODE IN ('40111','50300','42710','42305')
AND WREV.DV_FISCAL_YEAR_MTH_NUMBER_INT IN (SELECT FISCAL_ID FROM $$ETLVWDB.EL_AR_MONTH_PROCESS_DATE);

CALL COLLECT_STATS_WRAP('$$STGDB','WI_DRVD_NCR_REV_FOR_BKG_CG','D');

UPDATE WREV FROM 
$$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG WREV
SET DV_CONTRACT_DURATION=NULL
WHERE WREV.DV_CONTRACT_DURATION=(-999);


Source22 Name : SQ_EX_OM_XXNCR_REVENUE_TRX_P_8


Pre SQL : 
DELETE FROM $$EXCEPDB.EX_OM_XXNCR_REV_CG ALL;


SQL Query : 
SELECT 
  WIOXRT.BATCH_ID,
  WIOXRT.ACCOUNTING_RULE_ID,
  WIOXRT.ACCOUNTING_RULE_NAME,
  WIOXRT.ACCOUNT_CLASS,
  WIOXRT.ACCOUNT_CODE,
  WIOXRT.ACCTD_AMOUNT,
  WIOXRT.ADJUSTMENT_ID,
  WIOXRT.ADJUSTMENT_NUMBER,
  WIOXRT.ADJUSTMENT_TYPE,
  WIOXRT.AMOUNT,
  WIOXRT.BILL_TO_CUSTOMER_ID,
  WIOXRT.BILL_TO_SITE_USE_ID,
  WIOXRT.CODE_COMBINATION_ID,
  WIOXRT.COGS_PERCENT,
  WIOXRT.COMMENTS,
  WIOXRT.CONTEXT,
  WIOXRT.CREATED_BY,
  WIOXRT.CREATION_DATE,
  WIOXRT.CUSTOMER_TRX_ID,
  WIOXRT.CUSTOMER_TRX_LINE_ID,
  WIOXRT.CUST_TRX_LINE_GL_DIST_ID,
  WIOXRT.DEFAULT_SC_FLAG,
  WIOXRT.EXTENDED_AMOUNT,
  WIOXRT.EXTRACT_TYPE,
  WIOXRT.FISCAL_ID,
  WIOXRT.FORWARD_REVERSE_FLAG,
  WIOXRT.FUNC_CURRENCY_CODE,
  WIOXRT.GES_UPDATE_DATE,
  WIOXRT.GLOBAL_NAME,
  WIOXRT.GL_DATE,
  WIOXRT.GL_POSTED_DATE,
  WIOXRT.GROUPING_ID,
  WIOXRT.INVENTORY_ITEM_ID,
  WIOXRT.INVOICE_CURRENCY_CODE,
  WIOXRT.INVOICE_PERCENT,
  WIOXRT.INVOICING_RULE_ID,
  WIOXRT.LAST_UPDATED_BY,
  WIOXRT.LAST_UPDATE_DATE,
  WIOXRT.LATEST_RECORD_FLAG,
  WIOXRT.SK_LINE_SEQ_ID_INT,
  WIOXRT.LINE_TYPE,
  WIOXRT.LINK_TO_CUST_TRX_LINE_ID,
  WIOXRT.ORDER_HEADER_ID,
  WIOXRT.ORDER_LINE_ID,
  WIOXRT.ORDER_NUMBER,
  WIOXRT.ORG_ID,
  WIOXRT.LINE_PERCENT,
  WIOXRT.PREVIOUS_CUSTOMER_TRX_ID,
  WIOXRT.PREVIOUS_CUSTOMER_TRX_LINE_ID,
  WIOXRT.QUOTA_FLAG,
  WIOXRT.REASON_CODE,
  WIOXRT.REBATE_AMOUNT,
  WIOXRT.REBATE_PERCENTAGE_ID,
  WIOXRT.REQUEST_ID,
  WIOXRT.RULE_START_DATE,
  WIOXRT.SALESREP_ID,
  WIOXRT.SALES_CREDIT_TYPE_ID,
  WIOXRT.SHIP_TO_CUSTOMER_ID,
  WIOXRT.SHIP_TO_SITE_USE_ID,
  WIOXRT.SOLD_TO_CUSTOMER_ID,
  WIOXRT.SCA_SOURCE_TYPE_CD,
  WIOXRT.SPLIT_PERCENT,
  WIOXRT.TERRITORY_ID,
  WIOXRT.TRANSACTION_DATE,
  WIOXRT.TRANSACTION_GROUPING_TYPE,
  WIOXRT.TRANSACTION_QUANTITY,
  WIOXRT.TRANSACTION_SEQUENCE_ID,
  WIOXRT.TRX_DATE,
  WIOXRT.TRX_NAME,
  WIOXRT.TRX_NUMBER,
  WIOXRT.TRX_TYPE,
  WIOXRT.UNIT_SELLING_PRICE,
  WIOXRT.UNIT_STANDARD_PRICE,
  WIOXRT.CREATE_DATETIME,
  WIOXRT.ACTION_CODE ,
  'RI' EXCEPTION_TYPE,
  WIOXRT.DV_TRANSACTION_KEY, 
  WIOXRT.DV_TRANSACTION_SOURCE_CD,
  WIOXRT.SALES_REP_NUMBER     ,         
  WIOXRT.SALES_TERRITORY_KEY   ,        
  WIOXRT.BK_SALES_CREDIT_TYPE_CODE,
  WIOXRT.SK_SC_AGENT_ID_INT ,
  WIOXRT.SOURCE_DATA_KEY5 ,
  WIOXRT.SALES_MOTION_CD ,
  WIOXRT.RU_SERVICE_CONTRACT_START_DTM ,
WIOXRT.RU_SERVICE_CONTRACT_END_DTM   ,
WIOXRT.DV_CONTRACT_DURATION          ,
WIOXRT.DV_ANNUALIZED_FLG             ,
WIOXRT.DV_ANNUALIZED_US_NET_AMT      ,
WIOXRT.DV_MULTIYEAR_US_NET_AMT       ,
WIOXRT.BOOKINGS_POLICY_CD
 
 FROM   
  $$STGDB.WI_OM_XXNCR_REV_CG WIOXRT
 LEFT OUTER JOIN $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC
  ON (NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
 WHERE
 (
 NOT EXISTS ( SELECT 1 FROM $$COMREFVWDB.N_SOURCE_SYSTEM_CODES NSSC 
  WHERE NSSC.GLOBAL_NAME = WIOXRT.GLOBAL_NAME)
 OR
 NOT EXISTS (SELECT 1 FROM $$STGDB.WI_DRVD_NCR_REV_FOR_BKG_CG WDNRTFB
  WHERE WDNRTFB.TRANSACTION_SEQUENCE_ID_INT = WIOXRT.TRANSACTION_SEQUENCE_ID
  AND WDNRTFB.GLOBAL_NAME = WIOXRT.GLOBAL_NAME ) 
 OR
 NOT EXISTS (SELECT 1 FROM $$ETLVWDB.EL_RA_RULES SORR, 
  $$FINLGLVWDB.N_AR_ACCOUNTING_RULE NAAR
  WHERE SORR.RULE_ID = WIOXRT.ACCOUNTING_RULE_ID
  AND SORR.GLOBAL_NAME= WIOXRT.GLOBAL_NAME
  AND NAAR.BK_ACCOUNTING_RULE_NAME = SORR.NAME) 
 
 OR
 (
   NOT EXISTS 
    (SELECT 1 FROM $$ETLVWDB.SM_SALES_ORDER_LINE SMSOL ,
        $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL
    WHERE SMSOL.SK_SO_LINE_ID_INT = WIOXRT.ORDER_LINE_ID
    AND SMSOL.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
    AND SMSOL.SALES_ORDER_LINE_KEY = NSOL.SALES_ORDER_LINE_KEY
    /* start: ADDED AS PART OF AUS MIGRATION */ 
    )
   AND NOT EXISTS
    (
    SELECT 1 FROM $$ETLVWDB.EL_AR_SO_GLOBAL_NAME EL_GNAME,
      $$ETLVWDB.SM_SALES_ORDER_LINE SMSOL_CAL ,
        $$SLSORDVWDB.N_SALES_ORDER_LINE_TV NSOL_CAL
    WHERE 
    EL_GNAME.ORG_ID = WIOXRT.ORG_ID
    AND EL_GNAME.ACTIVE_IND = 'Y' 
    AND SMSOL_CAL.SK_SO_LINE_ID_INT = WIOXRT.ORDER_LINE_ID
    AND SMSOL_CAL.SS_CODE = EL_GNAME.ORIG_SS_CD
    AND SMSOL_CAL.SALES_ORDER_LINE_KEY = NSOL_CAL.SALES_ORDER_LINE_KEY 
    /* END: ADDED AS PART OF AUS MIGRATION */ 
    )
 )  
 OR
 NOT EXISTS (SELECT 1 FROM  $$ETLVWDB.SM_AR_TRX_LINE SMATL
  WHERE WIOXRT.CUSTOMER_TRX_LINE_ID = SMATL.SK_CUSTOMER_TRX_LINE_ID_LINT
  AND NSSC.SOURCE_SYSTEM_CODE = SMATL.SS_CODE ) 
 OR
 NOT EXISTS ( SELECT 1 FROM $$ETLVWDB.SM_AR_TRX SMARTRX , 
         $$FINLGLVWDB.N_AR_TRX NARTRX, 
         $$COMREFVWDB.N_CUSTOMER_ACCOUNT NCA
  WHERE SMARTRX.SK_CUSTOMER_TRX_ID_LINT = WIOXRT.CUSTOMER_TRX_ID
  AND SMARTRX.SS_CODE = NSSC.SOURCE_SYSTEM_CODE
  AND SMARTRX.AR_TRX_KEY = NARTRX.AR_TRX_KEY
  AND NCA.CUSTOMER_ACCOUNT_KEY = NARTRX.SOLD_TO_CUSTOMER_KEY)
 
 )


Post SQL : 



Target22 Name : EX_OM_XXNCR_REV_CG_8


Pre SQL : 



Post SQL : 
CALL COLLECT_STATS_WRAP('$$EXCEPDB','EX_OM_XXNCR_REV_CG','D');